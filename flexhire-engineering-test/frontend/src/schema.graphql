# Replace this with the Flexhire GraphQL API schema file!
# The fastest way is to be logged into your flexhire account with API access
# and then open this URL in the browser: https://flexhire.com/api/v2/schema
# It should download the schema.graphql file.
# Check https://flexhire.com/developer for more information.

directive @api(
  options: [SpectaQLOption!] = [{ key: "documented", value: "true" }]
) on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD | FIELD_DEFINITION | FRAGMENT_DEFINITION | FRAGMENT_SPREAD | INLINE_FRAGMENT | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | MUTATION | OBJECT | QUERY | SCALAR | SCHEMA | SUBSCRIPTION | UNION | VARIABLE_DEFINITION

directive @ats(
  options: [SpectaQLOption!] = [{ key: "documented", value: "true" }]
) on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD | FIELD_DEFINITION | FRAGMENT_DEFINITION | FRAGMENT_SPREAD | INLINE_FRAGMENT | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | MUTATION | OBJECT | QUERY | SCALAR | SCHEMA | SUBSCRIPTION | UNION | VARIABLE_DEFINITION

"""
Directs the executor to deliver this part of the result after the initial result.
"""
directive @defer(
  """
  If false, this field _won't_ be deferred.
  """
  if: Boolean = true

  """
  A unique label to identify the deferred payload.
  """
  label: String
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @hris(
  options: [SpectaQLOption!] = [{ key: "documented", value: "true" }]
) on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD | FIELD_DEFINITION | FRAGMENT_DEFINITION | FRAGMENT_SPREAD | INLINE_FRAGMENT | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | MUTATION | OBJECT | QUERY | SCALAR | SCHEMA | SUBSCRIPTION | UNION | VARIABLE_DEFINITION

"""
Directs the executor to deliver this list item-by-item, after the requested `initialCount`.
"""
directive @stream(
  """
  If false, this field _won't_ be streamed.
  """
  if: Boolean = true

  """
  The number of items to return in the initial response.
  """
  initialCount: Int = 0

  """
  A unique label to identify the stream payload.
  """
  label: String
) on FIELD

directive @talent(
  options: [SpectaQLOption!] = [{ key: "documented", value: "true" }]
) on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD | FIELD_DEFINITION | FRAGMENT_DEFINITION | FRAGMENT_SPREAD | INLINE_FRAGMENT | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | MUTATION | OBJECT | QUERY | SCALAR | SCHEMA | SUBSCRIPTION | UNION | VARIABLE_DEFINITION

"""
Autogenerated input type of AcceptContract
"""
input AcceptContractInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID!
  freelancerAgreesTerms: Boolean
  freelancerContactEmail: String
  freelancerFeedback: String
  freelancerMessage: String
  interviewDate: DateTime
  phone: String @deprecated(reason: "use updateUser to update the phone number")
}

"""
Autogenerated return type of AcceptContract.
"""
type AcceptContractPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
}

"""
Autogenerated input type of AcceptContractRequests
"""
input AcceptContractRequestsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  jobApplicationId: ID
}

"""
Autogenerated return type of AcceptContractRequests.
"""
type AcceptContractRequestsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  jobApplication: JobApplication
}

"""
Autogenerated input type of AcceptInterviewRequest
"""
input AcceptInterviewRequestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  freelancerContactEmail: String
  freelancerFeedback: String
  freelancerMessage: String
  interviewDate: DateTime
  jobApplicationId: ID
  jobApplicationRawId: Int
    @deprecated(reason: "only used to support some legacy frontend code")
  phone: String @deprecated(reason: "use updateUser to update the phone number")
}

"""
Autogenerated return type of AcceptInterviewRequest.
"""
type AcceptInterviewRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  jobApplication: JobApplication
}

"""
Autogenerated input type of AddQuestionsToJob
"""
input AddQuestionsToJobInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  jobId: ID!
  questionsIds: [ID!]!
}

"""
Autogenerated return type of AddQuestionsToJob.
"""
type AddQuestionsToJobPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  job: Job
}

"""
answer to a question asked when screening an applicant to a job
"""
type Answer implements Node
  @ats(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Screening" }
    ]
  ) {
  """
  evaluations of this answer by colleagues or AI
  """
  answerEvaluations: [AnswerEvaluation!]

  """
  average rating of answers like this one by colleagues or AI. The value is
  between 0 and 1. For example, if this video answers a question, this will
  return the average rating of all answers to that question.
  """
  averageAnswerRating: Float

  """
  average rating of this answer by colleagues or AI. The value is between 0 and 1.
  """
  averageRating: Float

  """
  screening requests associated with this answer
  """
  contractRequests: [ContractRequest!]

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!

  """
  the question that was asked
  """
  question: Question
  questionId: Int!

  """
  internal DB ID of this record
  """
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")
  textualAnswer: String
  type: String!

  """
  the applicant that recorded the answer
  """
  user: User
  userId: Int!

  """
  the video answer recorded by the applicant
  """
  video: Video
}

"""
an evaluation of a video answer recorded by a job applicant for a structured interview question
"""
type AnswerEvaluation implements Node
  @ats(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Screening" }
    ]
  ) {
  """
  the answer that was evaluated
  """
  answer: Answer

  """
  (AI only) what the AI model expected from the best possible candidate
  """
  expectation: String

  """
  full blown explanation of the evaluation. Used only by AI.
  """
  explanation: String

  """
  whether the evaluation was made by an AI model
  """
  generatedByAi: Boolean

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!

  """
  short notes / summary about the evaluation
  """
  notes: String

  """
  the question that was evaluated
  """
  question: Question

  """
  the score of the evaluation, between 0 and 1. 1 is the best possible score while 0 is the lowest
  """
  score: Float

  """
  the author of the evaluation or the AI profile that generated the evaluation
  """
  user: User

  """
  the video that was evaluated
  """
  video: Video
}

"""
The connection type for AnswerEvaluation.
"""
type AnswerEvaluationConnection {
  """
  A list of edges.
  """
  edges: [AnswerEvaluationEdge]

  """
  A list of nodes.
  """
  nodes: [AnswerEvaluation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type AnswerEvaluationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: AnswerEvaluation
}

"""
API keys used to access Flexhire programmatically
"""
type ApiKey implements Node {
  createdAt: DateTime

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!

  """
  slice of the actual key, to be used to identify it
  """
  keySlice: String
  lastUsedAt: DateTime
  user: User
}

type ApiKeyTestResult {
  error: String
  valid: Boolean!
}

type ApplicationsResults {
  applications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): JobApplicationConnection
  filteredOutCount: Int!
  filteredOutIds: [Int!]!
  highlightCount: Int!
  highlightCountMyTeam: Int!
  totalCount: Int!
  totalCountMyTeam: Int!
}

"""
Autogenerated input type of ApplyToJob
"""
input ApplyToJobInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  jobId: ID!

  """
  used to track which external platform or context the user came from
  """
  ref: String

  """
  the page from which the user was referred before applying to the job
  """
  refererUrl: String

  """
  set to what status the job application should be recorded at
  """
  status: JobApplicationStatus
}

"""
Autogenerated return type of ApplyToJob.
"""
type ApplyToJobPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  jobApplication: JobApplication
}

enum ApprovalTypeEnum {
  auto_approval
  manual_approval
}

"""
Autogenerated input type of ApprovePayrollItem
"""
input ApprovePayrollItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  clientRatingFeedbackContinue: String
  clientRatingFeedbackStart: String
  clientRatingFeedbackStop: String
  clientRatingScore: Int
  payrollItemIds: [ID!]
}

"""
Autogenerated return type of ApprovePayrollItem.
"""
type ApprovePayrollItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  payrollItems: [PayrollItem!]!
}

"""
Autogenerated input type of ApproveTimeOffRequest
"""
input ApproveTimeOffRequestInput {
  """
  if true, this unpaid request will be approved as a paid one
  """
  approveAsPto: Boolean = false

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the time off request to approve
  """
  timeOffRequestId: ID
}

"""
Autogenerated return type of ApproveTimeOffRequest.
"""
type ApproveTimeOffRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  timeOffRequest: TimeOffRequest
}

"""
Autogenerated input type of AutoLoginWithLink
"""
input AutoLoginWithLinkInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  the link's token
  """
  token: String!
}

"""
Autogenerated return type of AutoLoginWithLink.
"""
type AutoLoginWithLinkPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  the root.currentUser value after this operation. Used to read data about the User that this session has logged into
  """
  currentUser: User
  errors: [Error!]

  """
  the Link object that matched the given token
  """
  link: Link

  """
  whether a login was performed as a result of this mutation
  """
  loginPerformed: Boolean
}

"""
keeps track of which messages from the given flow have been already sent
"""
type AutomatedMessageSchedule implements Node {
  flowName: JobAutomatedMessagingFlowNameEnum!

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  jobApplication: JobApplication!
}

input AutomatedMessagingAttributes {
  """
  how many days to wait since the previous step in the flow before sending the message
  """
  delayDays: Int!

  """
  the name of the flow to use
  """
  flowName: JobAutomatedMessagingFlowNameEnum!
  followUpIndex: Int
  id: ID

  """
  the template for the message to send
  """
  message: String!

  """
  modality of how to send the message
  """
  sendBy: SendByEnum!
}

enum AutomationTypeEnum {
  custom
  ephemeral
  event
  job_event
  peek
}

"""
a background check for a specific person. Can be requested when making an offer or as a standalone request
"""
type BackgroundCheck implements Node
  @hris(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Team" }
    ]
  ) {
  completedAt: DateTime
  contracts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ContractConnection
  createdAt: DateTime
  email: String
  firm: Firm
  firstName: String

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  invoiceItem: InvoiceItem
  lastName: String
  name: String
  requestedBy: User
  status: BackgroundCheckStatusEnum!
  user: User
}

"""
The connection type for BackgroundCheck.
"""
type BackgroundCheckConnection {
  """
  A list of edges.
  """
  edges: [BackgroundCheckEdge]

  """
  A list of nodes.
  """
  nodes: [BackgroundCheck]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type BackgroundCheckEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BackgroundCheck
}

enum BackgroundCheckStatusEnum {
  """
  the background check could not be completed
  """
  expired

  """
  the background check was completed but something came up with the person
  """
  failed

  """
  not started yet / draft
  """
  pending

  """
  currently being processed by our partner
  """
  processing

  """
  the background check was completed and nothing came up
  """
  successful

  """
  waiting for customer to pay the invoice before it starts
  """
  waiting
}

input BackgroundChecksFilters {
  invitationType: InvitationTypeEnum
  status: BackgroundCheckStatusEnum
}

enum BackgroundThemeEnum {
  default
  light
}

type BankTransferDetails {
  currency: Currency
  firm: Firm
  invoice: Invoice
  paymentMethod: PaymentMethod
  receiveOptions: [BankTransferDetailsReceiveOption!]!
  user: User
}

type BankTransferDetailsReceiveOption {
  description: String
  fields: [BankTransferDetailsReceiveOptionField!]!
  title: String
  type: BankTransferDetailsReceiveOptionTypeEnum!
}

type BankTransferDetailsReceiveOptionField {
  descriptionBody: String
  descriptionTitle: String
  hidden: Boolean!
  key: String!
  label: String!
  value: String
}

enum BankTransferDetailsReceiveOptionTypeEnum {
  international
  local
}

type BillingPlan implements Node
  @hris(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Billing" }
    ]
  ) {
  allowAiFeatures: Boolean
  allowAtsJobIntegrations: Boolean
  allowBackgroundChecks: Boolean
  allowCareerPageIntegration: Boolean
  allowCustomSignatureRequests: Boolean
  allowFlexhireRecruiters: Boolean
  allowMultipleManagers: Boolean
  allowPaymentsDisabledContracts: Boolean
  contractsHireMinMarginUsd: Float
  contractsHireSourcedByClientMargin: Float
  contractsHireSourcedByFlexhireMargin: Float
  contractsInvitationMargin: Float
  customerSuccessRep: Boolean
  dailyContractorPayrollFeeUsd: Float
  dailyEorFeeUsd: Float
  dailyFlexhireRecruiterPerJobFeeUsd: Float
  dailyInviteContractFeeUsd: Float
  dailyJobFeeUsd: Float
  dailyManagerFeeUsd: Float
  dailyPaymentsDisabledContractFeeUsd: Float
  dailyPlanFeeUsd: Float
  dailyRecruitmentFeeUsdTier1: Float
  dailyRecruitmentFeeUsdTier2: Float
  dailyRecruitmentFeeUsdTier3: Float
  dailyRecruitmentFeeUsdTier4: Float
  dailyRecruitmentFeeUsdTier5: Float
  dailySourcedByClientHireContractFeeUsd: Float
  dailySourcedByFlexhireHireContractFeeUsd: Float
  description: String
  freePaymentsDisabledContractsLimit: Int
  hidden: Boolean
  highlighted: Boolean

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  maxCandidates: Int
  maxJobPostings: Int
  maxVideoInterviews: Int
  minimumManagers: Int
  name: String
  paymentMethodTypes: [PaymentMethodTypeLiteral!]
  premiumCustomerSupport: Boolean

  """
  internal DB ID of this record
  """
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")
  starter: Boolean
}

type BlogCategory implements Node
  @talent(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Blog" }
    ]
  ) {
  available: Boolean
  description: String
  flexhireOnly: Boolean
  heroImageUrl: String

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  name: String
  posts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BlogPostConnection

  """
  internal DB ID of this record
  """
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")
  slug: String
  subcategories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BlogSubcategoryConnection
}

"""
The connection type for BlogCategory.
"""
type BlogCategoryConnection {
  """
  A list of edges.
  """
  edges: [BlogCategoryEdge]

  """
  A list of nodes.
  """
  nodes: [BlogCategory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type BlogCategoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BlogCategory
}

type BlogPost implements Node
  @talent(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Blog" }
    ]
  ) {
  blogCategories: [BlogCategory!]
  blogSubcategories: [BlogSubcategory!]
  content: String
  createdAt: DateTime
  estimatedReadingTimeMinutes: Int
  excerpt: String

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!

  """
  internal DB ID of this record
  """
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")
  slug: String
  status: BlogPostStatusEnum
  title: String
  updatedAt: DateTime
  user: User
  video: Video
  viewsCount: Int
}

"""
The connection type for BlogPost.
"""
type BlogPostConnection {
  """
  A list of edges.
  """
  edges: [BlogPostEdge]

  """
  A list of nodes.
  """
  nodes: [BlogPost]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type BlogPostEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BlogPost
}

enum BlogPostStatusEnum
  @talent(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Blog" }
    ]
  ) {
  approved
  draft
  published
}

type BlogStats {
  totalPublished: Int
  totalViews: Int
}

type BlogSubcategory implements Node
  @talent(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Blog" }
    ]
  ) {
  available: Boolean
  blogCategory: BlogCategory
  description: String
  flexhireOnly: Boolean
  heroImageUrl: String

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  name: String
  posts: BlogPost

  """
  internal DB ID of this record
  """
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")
  slug: String
}

"""
The connection type for BlogSubcategory.
"""
type BlogSubcategoryConnection {
  """
  A list of edges.
  """
  edges: [BlogSubcategoryEdge]

  """
  A list of nodes.
  """
  nodes: [BlogSubcategory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type BlogSubcategoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BlogSubcategory
}

type Bonus implements Node
  @hris(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Payroll" }
    ]
  ) {
  contract: Contract
  currency: Currency
  description: String
  endDate: Date

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  itemType: String
  payrollItem: PayrollItem
  startDate: Date
  totalToPayClient: Money
  totalToPayFreelancer: Money
}

"""
The connection type for Bonus.
"""
type BonusConnection {
  """
  A list of edges.
  """
  edges: [BonusEdge]

  """
  A list of nodes.
  """
  nodes: [Bonus]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type BonusEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Bonus
}

type BonusPreview {
  clientBonus: Money
  memberBonus: Money
}

input BonusPreviewAttributes {
  clientBonus: MoneyInput
  memberBonus: MoneyInput
}

input BonusesFilters {
  amount: Int
  clientId: ID
  clientStatus: PayrollItemClientStatus
    @deprecated(reason: "use pipelineStatus instead")
  contractStatuses: [ContractStatus!]
  date: Date
  endDate: Date
  freelancerStatus: PayrollItemFreelancerStatus
    @deprecated(reason: "use pipelineStatus instead")
  invoiceNum: Int
  name: String
  pipelineStatus: PayrollItemPipelineStatus
  selectable: Boolean
  startDate: Date
  status: PayrollItemStatus
}

"""
Autogenerated input type of BulkCheckoutInvoices
"""
input BulkCheckoutInvoicesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  invoicesId: [ID!]!
  paymentMethodId: ID!
}

"""
Autogenerated return type of BulkCheckoutInvoices.
"""
type BulkCheckoutInvoicesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  the secret needed to confirm the Stripe payment, if applicable
  """
  clientSecret: String
  customerPayment: CustomerPayment
  errors: [Error!]
}

"""
Autogenerated input type of BulkTagQuestions
"""
input BulkTagQuestionsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  IDs of questions to tag
  """
  questionIds: [ID!]!

  """
  Names of tags to add
  """
  tagNames: [String!]!
}

"""
Autogenerated return type of BulkTagQuestions.
"""
type BulkTagQuestionsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  questions: [Question!]
}

enum CandidateRankingStatusEnum {
  none
  pending
  stale
  updated
}

type CandidateToNotify implements Node {
  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!

  """
  internal DB ID of this record
  """
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")
  status: String
}

input CandidateToNotifyAttributes {
  rawId: Int
}

"""
an uploaded candidate
"""
type CandidateUpload implements Node
  @ats(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Candidate" }
    ]
  ) {
  """
  candidate that was uploaded
  """
  candidate: User

  """
  associated firm that the uploader uploaded this for
  """
  firm: Firm

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!

  """
  user that uploaded this candidate
  """
  uploader: User
}

"""
An automation that configures a chat message to be automatically sent out
"""
type ChatAutomation implements Node
  @ats(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Chat" }
    ]
  ) {
  automationType: AutomationTypeEnum
  dismissed: Boolean
  enabled: Boolean!

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  job: Job
  jobAutomatedMessageSchedule: JobAutomatedMessageSchedule
  message(jobId: ID): String
  name: String!
  sendBy: SendByEnum
  template: String
  user(jobId: ID): User
}

type ChatBot implements Node {
  avatarUrl: String
  directChatThread: ChatThread
  firstName: String

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  name: String
  user: User
}

type ChatContact implements Node
  @talent(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Chat" }
    ]
  ) {
  chatBot: ChatBot
  contact: User
  description: String

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  user: User!
}

type ChatMessage implements Node
  @talent(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Chat" }
    ]
  ) {
  chatAutomation: ChatAutomation
  chatThread: ChatThread!
  contract: Contract
  createdAt: DateTime!
  deletedAt: DateTime
  editedAt: DateTime
  generatedByAi: Boolean

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  jobApplication: JobApplication
  jobApplicationEvaluation: JobApplicationEvaluation
  label: String

  """
  the original chat message, with optional md formatting
  """
  message: String!

  """
  the chat message, stripped of formatting
  """
  messagePlainText: String!

  """
  internal DB ID of this record
  """
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")
  sender: Recipient!
  typingAt: DateTime
  user: User @deprecated(reason: "use the sender field")
}

"""
The connection type for ChatMessage.
"""
type ChatMessageConnection {
  """
  A list of edges.
  """
  edges: [ChatMessageEdge]

  """
  A list of nodes.
  """
  nodes: [ChatMessage]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type ChatMessageEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ChatMessage
}

input ChatMessageFilters {
  excludeSelf: Boolean

  """
  if true, returns only messages from listable threads (threads that will appear in the main chat UI)
  """
  listableThread: Boolean

  """
  filter by chat threads with this purpose
  """
  threadPurpose: ChatThreadPurposeFilterEnum

  """
  if true, only returns messages unread by current user. Returns nothing if used while logged out
  """
  unread: Boolean
}

"""
Autogenerated return type of ChatMessageReceived.
"""
type ChatMessageReceivedPayload {
  chatMessage: ChatMessage
}

"""
Autogenerated return type of ChatMessageUpdated.
"""
type ChatMessageUpdatedPayload {
  chatMessage: ChatMessage
}

type ChatThread implements Node
  @talent(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Chat" }
    ]
  ) {
  avatarUrl: String
  chatBots: [ChatBot!]!
  chatMessages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: ChatMessageFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ChatMessageConnection
  createdAt: DateTime
  defaultTitle: String
  enableMeetingRoom: Boolean

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  inviteableAndCurrentUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: UsersFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!
  inviteableUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: UsersFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!
  joined: Boolean!
  lastActivityAt: DateTime
  listable: Boolean!
  meetingRoom: String
  muted: Boolean!
  purpose: ChatThreadPurposeEnum

  """
  internal DB ID of this record
  """
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")
  recipient: Recipient
  threadType: ChatThreadTypeEnum!
  title: String

  """
  list of users and bots that are currently typing into the thread
  """
  typingRecipients: [Recipient!]!
  users: [User!]!
}

"""
The connection type for ChatThread.
"""
type ChatThreadConnection {
  """
  A list of edges.
  """
  edges: [ChatThreadEdge]

  """
  A list of nodes.
  """
  nodes: [ChatThread]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type ChatThreadEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ChatThread
}

enum ChatThreadPurposeEnum
  @talent(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Chat" }
    ]
  ) {
  applicant_feedback
}

enum ChatThreadPurposeFilterEnum {
  applicant_feedback
  custom
}

enum ChatThreadTypeEnum
  @talent(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Chat" }
    ]
  ) {
  direct
  group
}

"""
Autogenerated return type of ChatThreadUpdated.
"""
type ChatThreadUpdatedPayload {
  chatThread: ChatThread
}

input ChatThreadsFilters {
  purpose: ChatThreadPurposeFilterEnum
  search: String

  """
  only includes chat threads with messages unread by the current user
  """
  unread: Boolean
}

"""
Autogenerated input type of CloseJob
"""
input CloseJobInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  jobId: ID!
}

"""
Autogenerated return type of CloseJob.
"""
type CloseJobPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  job: Job
}

type Company implements Node {
  custom: Boolean!

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  name: String!
}

"""
The connection type for Company.
"""
type CompanyConnection {
  """
  A list of edges.
  """
  edges: [CompanyEdge]

  """
  A list of nodes.
  """
  nodes: [Company]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type CompanyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Company
}

type Competitor implements Node {
  _1099: Boolean
  backgroundChecks: Boolean
  candidates: Boolean
  careerPage: Boolean
  category: String
  codeTests: Boolean
  crypto: Boolean
  customerSuccessManager: Boolean
  description: String
  expensesBonuses: Boolean
  flowAndCollection: Boolean
  globalPayroll: Boolean
  hireContractors: Boolean
  hireEor: Boolean

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  jobPostings: Boolean
  multicurrency: Boolean
  name: String
  onboarding: Boolean
  pricing: String
  questions: Boolean
  referrals: Boolean
  resumeParsing: Boolean
  screening: Boolean
  shortName: String
  signatures: Boolean
  sourcing: Boolean
  transparentPricing: Boolean
  videos: Boolean
  workReports: Boolean
}

"""
Autogenerated input type of CompleteReference
"""
input CompleteReferenceInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  comments: String
  completeReferenceToken: String!
  email: String
  name: String!
  otherRelation: String
  ratingProfessional: Int!
  referenceName: String
  relation: ReferenceRelationEnum!
  wouldRecommend: Boolean!
}

"""
Autogenerated return type of CompleteReference.
"""
type CompleteReferencePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  message: String
}

"""
Autogenerated input type of CompleteSignature
"""
input CompleteSignatureInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  signatureId: String!
}

"""
Autogenerated return type of CompleteSignature.
"""
type CompleteSignaturePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  signature: Signature
}

"""
Autogenerated input type of CompleteVideoUpload
"""
input CompleteVideoUploadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  videoId: ID!
}

"""
Autogenerated return type of CompleteVideoUpload.
"""
type CompleteVideoUploadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  video: Video
}

type Configuration {
  advertisingProviders: [String!]
  allowJobsWithNoRates: Boolean
  backgroundCheckPriceUsd: Float
  balancePaymentMethodAvailableCurrencies: [String!]
  creditCardFixedFee: Money
  creditCardPercentageFee: Float
  currenciesExemptFromConversionFee: [String!]
  currencyConversionPercentageFee: Float
  enableAutoBonuses: Boolean
  enableCompanyVideos: Boolean
  enableCustomContractTemplates: Boolean
  enableEorSetup: Boolean
  enableHiringManager: Boolean
  enableOfferDraft: Boolean
  enablePaymentDetails: Boolean
  enablePwaInstall: Boolean
  enableServiceWorker: Boolean
  enableServiceWorkerAutoSkipWaiting: Boolean
  enableServiceWorkerUpdateDetection: Boolean
  exposePayoutFeeMode: Boolean
  frontendBuildId: String
  invitationMinClientRateUsd: Float
  jobAutomatedMessagesEnabled: Boolean
  jobsMinClientRate: Money
  jobsMinClientRateUsd: Float @deprecated(reason: "being phased out, don't use")
  maxCandidates: Int
  maxTimelineEntries: Int
  minHourlyRate: Money
  minHourlyRateUsd: Float @deprecated(reason: "being phased out, don't use")
  oauthSignupProviders: [OauthProviderNameEnum!]
  paymentMethodTypes: [String!]
  payoutMethodTypes: [PayoutMethodTypeEnum!]
  profileFeedbackParticipants: [User!]
  profileFeedbackParticipantsIds: [Int!]
  sepaLimit: Float
  showBlogCategories: Boolean
  stripeConnectSupportedCountries: [Country!]
  supportedCurrencies: [Currency!]
    @deprecated(reason: "use top level currencies field")
  useVideoCdn: Boolean
  videoCdnUrl: String
  videoMaxDuration: Float
  videoMaxDurationCompany: Float
  videoMinDuration: Float
}

"""
Autogenerated input type of ConfirmEmail
"""
input ConfirmEmailInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  token: String!
}

"""
Autogenerated return type of ConfirmEmail.
"""
type ConfirmEmailPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  user: User
}

"""
An invite, offer, or active relationship between a Firm and a User
"""
type Contract implements Node
  @hris(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Team" }
    ]
  ) {
  """
  the currently active contract rate. Returns nil if the current contract rate has expired
  """
  activeContractRate: ContractRate
  additionalRecipientsData: [ContractAdditionalRecipientData!]
  allowAnyHireAccess: Boolean
  allowAnyManageAccess: Boolean
  allowExpensesAccess: Boolean
  allowHireInterviewsAccess: Boolean
  allowHireJobsAccess: Boolean
  allowHireOffersAccess: Boolean
  allowHireRatesAccess: Boolean
  allowHireRecruitmentAccess: Boolean
  allowManageBonusesAccess: Boolean
  allowManageExpensesAccess: Boolean
  allowManageInvitationsAccess: Boolean
  allowManageRatesAccess: Boolean
  allowManageTeamAccess: Boolean
  allowTextualAnswers: Boolean
  autoRequestBackgroundCheck: Boolean
  availabilityType: [String!]
  backgroundCheck: BackgroundCheck
  bonusClientRate: Money
  bonusPeriod: ContractBonusPeriod

  """
  preview the client and member rates of a bonus
  """
  bonusPreview(input: BonusPreviewAttributes!): BonusPreview
  canSendFullPayments: Boolean
  category: ContractCategoryEnum
  client: User
  clientAgreesTerms: Boolean
  clientRate: Money
  clientRejectionComments: String
  clientRejectionReason: String
  contractRate(
    """
    if passed, returns the active rate at the given time, otherwise returns the currently active rate
    """
    currentAt: DateTime
  ): ContractRate
  contractRateMinDate: Date
  contractRates(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: ContractRatesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ContractRateConnection
  contractType: ContractTypeEnum
  contractorAgreementSignature: Signature
  contractorStatementOfWorkSignature: Signature
  costAnalyticsRate: Money
  costAnalyticsRateCurrency: Currency
  costAnalyticsRateMode: RateMode
  createdAt: DateTime!
  currency: Currency

  """
  the currently set contract rate
  """
  currentContractRate: ContractRate
  dailyFee: Money
  defaultDistance: Float

  """
  true if current user can delete this contract
  """
  deletable: Boolean
  description: String
  disableAgreements: Boolean
  disableMinUsdMarginLimit: Boolean
  discountId: Int
  editToken: String

  """
  true if current user can edit this contract
  """
  editable: Boolean
  employeeType: EmployeeTypeEnum
  employerOfRecordPartner: EmployerOfRecordPartner
  employmentCountry: Country
  enableAgreements: Boolean
  enableCostAnalytics: Boolean
  enableTimesheets: Boolean
  endDate: Date
  eorAnnualLeave: ContractEORAnnualLeaveEnum
  eorBonusAmount: Int
  eorBonusAmountMode: ContractEORBonusAmountEnum
  eorBonusDescription: String
  eorBonusEnabled: Boolean
  eorBonusFrequency: ContractEORBonusFrequencyEnum
  eorBonusProgram: String
  eorDirectSupervisorDepartment: String
  eorDirectSupervisorEmail: String
  eorDirectSupervisorName: String
  eorDirectSupervisorPhone: String
  eorDirectSupervisorTitle: String
  eorProbationPeriod: Int
  eorWorkHours: ContractEORWorkHoursEnum
  estimatedNextInvoiceDate: DateTime
  estimatedNextInvoicePayoutDate: DateTime
  estimatedNextPayrollItemToBePaid: PayrollItem
  estimatedNextSalaryPayoutDate: DateTime
  feeMode: FeeModeEnum
  firm: Firm
  freelancer: User
  freelancerAgreesTerms: Boolean
  freelancerFeedback: String
  freelancerRate: Money
  freelancerTimezoneName: String
  hidden: Boolean

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  inNoticePeriod: Boolean
  inheritor: User
  interviewer: Boolean
  invitationType: InvitationTypeEnum
  invitedBy: User
  invoiceRecipient: User
  isCitizen: Boolean
  isFirmAdmin: Boolean
  isFreelancerOrClient: Boolean
  job: Job
  jobApplication: JobApplication
  jobTitle: String
  lastInteractionAt: DateTime
  margin: Float
  minClientRate: Float
  minMarginUsd: Float
  nationalId: String

  """
  true if contract has at least one signature that needs to be signed
  """
  needsSignatures: Boolean
  newEndDate: Date
  newFreelancerRate: Money
  newRateMode: RateMode
  newStartDate: Date
  nextSalaryGenerationDate: DateTime
  noticePeriodDays: Int
  notifyChanges: Boolean
  offerNote: String
  officeAddress: String
  officeAddressCity: String
  officeAddressPostalCode: String
  officeAddressRemote: Boolean
  officeAddressState: String
  officeCountry: Country
  onlyWorksInSpecifiedCountry: Boolean
  paidDaysOffCount: Int
  paidDaysOffTaken: Int
  paidTimeOffAllocated: Boolean
  paychecks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: PaychecksFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PaycheckConnection
  paymentMode: PaymentModeEnum
  paymentsEnabled: Boolean
  payrollItem(payrollItemId: ID!): PayrollItem
  payrollItems: [PayrollItem!]
  positionTypes: [String!]
  previousStatus: String
  purchaseOrderNumber: String
  rateMode: RateMode

  """
  internal DB ID of this record
  """
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")

  """
  user which brought this applicant to the platform via referral code, if any
  """
  referer: User
  requireApprovalForPayments: Boolean
  residentialAddress: String
  residentialAddressCity: String
  residentialAddressPostalCode: String
  salaryFrequency: SalaryFrequencyEnum
  selfManaged: Boolean
  signableDocumentTemplates: [SignableDocumentTemplate!]
  signableDocuments: [SignableDocument!]
  signatures: [Signature!]
  sourcedByClient: Boolean
  stage: ContractStageEnum
  startDate: Date
  stats: PayrollStats
  status: ContractStatus!
  tags: [Tag!]
  timesheets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: TimesheetsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimesheetConnection
  token: String
  transferEntitlements: Boolean
  transferEntitlementsDetails: String

  """
  the upcoming contract rate which is either waiting for a specific date to be applied, or on some agreement signatures
  """
  upcomingContractRate: ContractRate
  updatedAt: DateTime!
  visaNeeded: Boolean
  workerCountry: Country
  workerId: String
  workerIsTransfer: Boolean
  workerLeaveDetails: String
  workerPhone: String
  workerStaysInCountry: Boolean
  workerTransferSourceEntity: String
}

type ContractAdditionalRecipientData {
  email: String
  firstName: String
  freelancer: User
  job: Job
  jobTitle: String
  lastName: String
  requestBackgroundCheck: Boolean
}

enum ContractBonusPeriod {
  """
  grant a bonus every month
  """
  monthly

  """
  grant a bonus every year
  """
  yearly
}

enum ContractCategoryEnum {
  admin
  individual
  invite
  manager
}

"""
The connection type for Contract.
"""
type ContractConnection {
  """
  A list of edges.
  """
  edges: [ContractEdge]

  """
  A list of nodes.
  """
  nodes: [Contract]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

enum ContractEORAnnualLeaveEnum {
  minimum
  other
}

enum ContractEORBonusAmountEnum {
  """
  fixed amount
  """
  fixed

  """
  other
  """
  other

  """
  percentage
  """
  percentage
}

enum ContractEORBonusFrequencyEnum {
  monthly
  once
  quarterly
  yearly
}

enum ContractEORWorkHoursEnum {
  fixed
  flexible
  other
}

"""
An edge in a connection.
"""
type ContractEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Contract
}

type ContractPreview {
  clientRate: Money

  """
  the existing contract being updated, or null for new contracts
  """
  contract: Contract
  contractType: ContractTypeEnum
  currency: Currency
  dailyFee: Money
  discountId: Int
  employerOfRecordPartner: EmployerOfRecordPartner
  freelancerFirstName: String
  freelancerRate: Money
  invitationType: InvitationTypeEnum
  margin: Float
  minClientRate: Money
  minMarginUsd: Float
  paymentsEnabled: Boolean
  rateMode: RateMode
}

input ContractPreviewAttributes {
  availabilityType: [String!]
  clientId: ID
  clientRate: MoneyInput
  contractId: ID
  currency: String
  discountCode: String
  freelancerEmail: String
  freelancerId: ID
  freelancerRate: MoneyInput
  jobId: ID
  paymentMode: PaymentModeEnum
  rateMode: RateMode
}

type ContractRate implements Node {
  changesClientRate: Boolean
  changesFreelancerRate: Boolean
  clientRate: Money
  clientRateChangeSource: ContractRate
  clientRateEnding: ContractRate
  contract: Contract
  currency: Currency
  current: Boolean
  endDate: Date
  endsAt: DateTime
  freelancerRate: Money
  freelancerRateChangeSource: ContractRate
  freelancerRateEnding: ContractRate

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  margin: Int
  paymentMode: PaymentModeEnum
  rateMode: RateMode
  startedAt: DateTime
}

"""
The connection type for ContractRate.
"""
type ContractRateConnection {
  """
  A list of edges.
  """
  edges: [ContractRateEdge]

  """
  A list of nodes.
  """
  nodes: [ContractRate]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type ContractRateEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ContractRate
}

input ContractRatesFilters {
  changesClientRate: Boolean
  changesFreelancerRate: Boolean
  future: Boolean
  historical: Boolean
  order: SortOrder
  past: Boolean
  sort: ContractRatesOrderEnum
}

enum ContractRatesOrderEnum {
  started_at
}

"""
a screening request to an applicant of a job
"""
type ContractRequest implements Node
  @ats(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Screening" }
    ]
  ) {
  """
  Maximum duration (in seconds) allowed for answers in this screening request
  """
  answerMaxDuration: Int

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  jobApplication: JobApplication

  """
  the order that the questions should be asked in, if applicable
  """
  ord: Int
  project: Project
  projectSubmission: ProjectSubmission
  question: Question
  requestType: ContractRequestTypeEnum
  status: ContractRequestStatusEnum
}

enum ContractRequestStatusEnum {
  """
  the member has completed the request
  """
  completed

  """
  the request has been sent to the member
  """
  pending

  """
  the member has declined to complete the request
  """
  rejected

  """
  the member has accepted the request
  """
  started
}

enum ContractRequestTypeEnum {
  """
  provide an answer to a question
  """
  answer

  """
  provide a submission for a project
  """
  project_submission

  """
  provide a video introduction for your profile
  """
  video_introduction
}

enum ContractStageEnum {
  candidate
  contract
  interview
  job_application
  offer
}

"""
aggregate counts of contracts
"""
type ContractStats {
  interviewsActionableCount: Int!
  interviewsTotalCount: Int!
  offersActionableCount: Int!
  offersTotalCount: Int!
}

"""
the possible statuses of a contract
"""
enum ContractStatus
  @hris(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Team" }
    ]
  ) {
  """
  contract is active and ongoing
  """
  active

  """
  expired contract has been deleted
  """
  deleted

  """
  active/paused contract has ended
  """
  expired

  """
  an offer has been drafted via hire pipeline or by inviting an off-platform
  user, but has not been submitted to the member yet
  """
  offer_draft

  """
  an offer has been made via hire pipeline or by inviting an off-platform user
  """
  offer_made

  """
  an offer has been made via hire pipeline or by inviting an off-platform user,
  but needs human evaluation before it can be sent to the member
  """
  offer_processing

  """
  the member has turned down the offer
  """
  offer_rejected

  """
  the client revoked the offer after the offer was made to the member
  """
  offer_revoked

  """
  contract is active and ongoing, but timesheet submission and payments are paused
  """
  paused

  """
  during the hiring process, the member has been rejected by the client or an offer has been withdrawn
  """
  rejected
}

type ContractTimelineEntry {
  event: EventTypeEnum!
  record: Node
  timestamp: DateTime!
  user: User
}

enum ContractTypeEnum
  @hris(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Team" }
    ]
  ) {
  """
  freelancer that gets paid the full amount and handles their own taxes
  """
  contractor

  """
  registered employee with an Employer of Record
  """
  employee
}

"""
Autogenerated return type of ContractUpdated.
"""
type ContractUpdatedPayload {
  contract: Contract
}

input ContractsFilters {
  adminMode: Boolean
  adminsOnly: Boolean
  allowExpensesAccess: Boolean
  allowHireInterviewsAccess: Boolean
  allowHireJobsAccess: Boolean
  allowHireOffersAccess: Boolean
  allowHireRatesAccess: Boolean
  allowHireRecruitmentAccess: Boolean
  allowManageBonusesAccess: Boolean
  allowManageExpensesAccess: Boolean
  allowManageInvitationsAccess: Boolean
  allowManageRatesAccess: Boolean
  allowManageTeamAccess: Boolean
  approvalType: ApprovalTypeEnum
  availableOnly: Boolean
  bookmarked: Boolean
  bookmarkedByUserId: Int
  canWorkInTheUs: Boolean
  category: ContractCategoryEnum
  clientId: ID
  clientRawId: Int @deprecated(reason: "used only for legacy frontend code")
  company: String
  contractStatus: ContractStatus
  contractType: ContractTypeEnum
  countries: [CountryFilter!]
  directReport: Boolean
  enableTimesheets: Boolean
  excludeHidden: Boolean
  excludeSelf: Boolean
  experience: Int
  expiresSoon: Boolean
  feeMode: FeeModeEnum
  feedbackCountBelow: Int
  feedbackCountEqualOrAbove: Int
  firmId: ID
  freelancerId: ID
  freelancerRawIdOrSlug: String
    @deprecated(reason: "used only for legacy frontend code")
  freelancerSubtypes: [FreelancerSubtypeFilter!]
  hasAnswers: Boolean
  hasProjectSubmission: Boolean
  hasVideoIntroduction: Boolean
  indirectReport: Boolean
  interviewStatus: InterviewStatusEnum
  interviewer: Boolean
  invitationType: InvitationTypeEnum
  jobId: ID
  jobsIds: [Int!]
  locationTypeFilter: LocationFilter
  managedTeams: ManagedTeamsFilter
  maxClientRate: MoneyInput
  maxUniversityRank: Int
  membersOnly: Boolean
  missingAnswers: Boolean
  missingProjectSubmission: Boolean
  missingVideoIntroduction: Boolean
  name: String
  netFeedback: NetFeedbackEnum
  noCategory: Boolean
  order: SortOrder
  paymentMode: PaymentModeEnum
  paymentsEnabled: Boolean
  payoutMethodType: PayoutMethodTypeFilterEnum
  positionTypes: String
  rating: RatingFilterEnum
  showNotNotified: Boolean
  showNotified: Boolean
  skills: [SkillFilter!]
  skillsIds: [ID!]
  sortBy: ContractsSortEnum
  stage: ContractStageEnum
  startDateInPast: Boolean
  statuses: [ContractStatus!]
  tagsIds: [Int!]
  timezoneFilter: TimezoneFilter
  toCurrentUserFirm: Boolean
  university: String
  verifiedOnly: Boolean
  withJobScreening: Boolean
  withoutJobScreening: Boolean
}

enum ContractsSortEnum {
  ai_score
  feedback
  interaction
  rank
  recommended
}

type CostCalculation {
  annualSalary: Money
  country: Country!
  currency: Currency!
  eorAnnualFee: Money
  eorBonusSalaryMonths: Int
  eorDeposit: Money
  eorEmployerContributions: Float
  eorEmployerContributionsAnnual: Money
  eorEmployerContributionsMonthly: Money
  eorExpensesAnnual: Money
  eorExpensesInitial: Money
  eorExpensesMonthly: Money
  eorInsuranceFee: Money
  eorMonthlyFee: Money
  eorSetupFee: Money
  freelancerRate: Money!
  monthlySalary: Money
  rateMode: RateMode!
  totalAnnual: Money
  totalInitial: Money
  totalMonthly: Money
}

input CountriesFilters {
  codes: [String!]
  continent: String
  contractor: Boolean
  eor: Boolean

  """
  only include countries that should be put on the landing pages
  """
  landing: Boolean
  name: String
}

type Country implements Node {
  averageMonthlySalary: Money

  """
  ISO 3166-1 alpha-2 code, uppercase
  """
  code: String
  continent: String
  contractor: Boolean
  costCalculator(
    currency: String
    freelancerRate: MoneyInput
    rateMode: RateMode
  ): CostCalculation
  countryFreelancerTypes: [CountryFreelancerType!]
  countryHolidays: [Holiday!]
  countryTaxes: [CountryTax!]
  coverImgUrl: String
  currency: Currency
  defaultNoticePeriodDays: Int
  descriptionEorBenefits: String
  descriptionEorHolidays: String
  descriptionEorPayrollInfo: String
  descriptionEorSalaryData: String
  descriptionEorTaxes: String
  descriptionEorTaxesEmployee: String
  descriptionEorTermination: String
  descriptionEorVisa: String
  descriptionEorWorkingHours: String
  employerTaxesMax: Float
  employerTaxesMin: Float
  eor: Boolean
  eorBonusSalaryMonths: Int
  eorDeposit: Money
  eorEmployerContributions: Float
  eorExpensesInitial: Money
  eorExpensesMonthly: Money
  eorInsuranceFee: Money
  eorMonthlyFee: Money
  eorSetupFee: Money
  flagImgUrl: String

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  minimumMonthlyWage: Money
  name: String
  paymentMethods: [String!]
  payrollPeriod: [String!]
  publicHolidaysPerYear: Int
  publicHolidaysUrl: String
  slug: String
  statutoryTimeOff: Int
  workingHoursPerWeek: Int
}

"""
The connection type for Country.
"""
type CountryConnection {
  """
  A list of edges.
  """
  edges: [CountryEdge]

  """
  A list of nodes.
  """
  nodes: [Country]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type CountryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Country
}

input CountryFilter {
  code: String!
  name: String
}

type CountryFreelancerType implements Node {
  averageMonthlySalary: Money
  country: Country
  currency: Currency
  freelancerType: FreelancerType

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
}

type CountryTax implements Node {
  amount: Float!
  country: Country

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  name: String
}

"""
Autogenerated input type of CreateAnswer
"""
input CreateAnswerInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  questionId: ID!
  textualAnswer: String!
}

"""
Autogenerated return type of CreateAnswer.
"""
type CreateAnswerPayload {
  answer: Answer

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

"""
Autogenerated input type of CreateApiKey
"""
input CreateApiKeyInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateApiKey.
"""
type CreateApiKeyPayload {
  apiKey: ApiKey

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]

  """
  this is the only way you can read the actual key! Make sure not to lose it
  """
  key: String
}

"""
Autogenerated input type of CreateBackgroundCheck
"""
input CreateBackgroundCheckInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  the point of contact email for the person being checked
  """
  email: String!

  """
  the firm requesting the background check. Mostly used for billing purposes.
  """
  firmId: ID!

  """
  the first name of the person to check
  """
  firstName: String!

  """
  the first name of the person to check
  """
  lastName: String!
}

"""
Autogenerated return type of CreateBackgroundCheck.
"""
type CreateBackgroundCheckPayload {
  backgroundCheck: BackgroundCheck

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

"""
Autogenerated input type of CreateBlogPost
"""
input CreateBlogPostInput {
  blogCategoryIds: [ID!]
  blogSubcategoryIds: [ID!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  content: String!
  excerpt: String
  published: Boolean
  title: String!
  videoId: ID
  videoRawId: Int @deprecated(reason: "only used in legacy frontend code")
}

"""
Autogenerated return type of CreateBlogPost.
"""
type CreateBlogPostPayload {
  blogPost: BlogPost

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

"""
Autogenerated input type of CreateChatThread
"""
input CreateChatThreadInput {
  avatarUrl: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  purpose: ChatThreadPurposeEnum
  title: String
  userIds: [ID!]
  userRawIds: [Int!] @deprecated(reason: "only used in legacy frontend code")
}

"""
Autogenerated return type of CreateChatThread.
"""
type CreateChatThreadPayload {
  chatThread: ChatThread

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

"""
Autogenerated input type of CreateCustomSkill
"""
input CreateCustomSkillInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  freelancerTypeIds: [Int!]!
  name: String!
}

"""
Autogenerated return type of CreateCustomSkill.
"""
type CreateCustomSkillPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  skill: Skill
}

"""
Autogenerated input type of CreateExpense
"""
input CreateExpenseInput {
  amount: MoneyInput!
  clientId: ID

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  description: String!
  expenseDate: Date!
  projectCode: String
  receiptUrl: String!
}

"""
Autogenerated return type of CreateExpense.
"""
type CreateExpensePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  expense: Expense
}

"""
Autogenerated input type of CreateFirmIntegration
"""
input CreateFirmIntegrationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  the platform to connect
  """
  integrationName: String!

  """
  the public token from the Merge setup flow
  """
  mergePublicToken: String!

  """
  the email address of the external platform user on behalf of which Flexhire will act on the external platform
  """
  remoteUserEmail: String
}

"""
Autogenerated return type of CreateFirmIntegration.
"""
type CreateFirmIntegrationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  firm: Firm
}

"""
Autogenerated input type of CreateLink
"""
input CreateLinkInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  freelancerId: ID
  jobId: ID
}

"""
Autogenerated return type of CreateLink.
"""
type CreateLinkPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  link: Link
}

"""
Autogenerated input type of CreateOfferDraft
"""
input CreateOfferDraftInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  firmId: ID!
}

"""
Autogenerated return type of CreateOfferDraft.
"""
type CreateOfferDraftPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
}

"""
Autogenerated input type of CreatePaymentMethod
"""
input CreatePaymentMethodInput {
  accountId: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currency: String
  institutionName: String
  mask: String
  name: String
  paymentMethodType: PaymentMethodTypeLiteral!
  sessionId: String
  token: String
}

"""
Autogenerated return type of CreatePaymentMethod.
"""
type CreatePaymentMethodPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  paymentMethod: PaymentMethod
}

"""
Autogenerated input type of CreateProjectSubmission
"""
input CreateProjectSubmissionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  description: String
  projectId: ID
  projectRawId: Int
    @deprecated(reason: "only used to support some legacy frontend code")

  """
  pass this to create a custom project
  """
  projectTitle: String
  screenshotUrl: String
  starting: Boolean
  status: ProjectSubmissionStatusEnum
  url: String
}

"""
Autogenerated return type of CreateProjectSubmission.
"""
type CreateProjectSubmissionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  projectSubmission: ProjectSubmission
}

"""
Autogenerated input type of CreateQuestion
"""
input CreateQuestionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  description: String
  expectation: String
  firmId: ID
  freelancerSubtypeIds: [ID!]
  freelancerTypeIds: [ID!]
  level: QuestionLevelEnum
  maxDuration: Int
  skillIds: [ID!]
  tagNames: [String!]
  title: String!
}

"""
Autogenerated return type of CreateQuestion.
"""
type CreateQuestionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  question: Question
}

"""
Autogenerated input type of CreateResume
"""
input CreateResumeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  if set, copy parsed data to profile, defaults to true
  """
  copyToProfile: Boolean

  """
  original file name
  """
  filename: String

  """
  original mime type
  """
  mimetype: String
  url: String!
}

"""
Autogenerated return type of CreateResume.
"""
type CreateResumePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  resume: Resume
}

"""
Autogenerated input type of CreateSignableDocumentTemplate
"""
input CreateSignableDocumentTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  documentFilename: String!
  documentUrl: String!
  title: String!
}

"""
Autogenerated return type of CreateSignableDocumentTemplate.
"""
type CreateSignableDocumentTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  editUrl: String
  errors: [Error!]
  signableDocumentTemplate: SignableDocumentTemplate
}

"""
Autogenerated input type of CreateSignableDocuments
"""
input CreateSignableDocumentsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID
  documents: [SignableDocumentAttributes!]!
}

"""
Autogenerated return type of CreateSignableDocuments.
"""
type CreateSignableDocumentsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
  signableDocuments: [SignableDocument!]
}

"""
Autogenerated input type of CreateStripeSetupUrl
"""
input CreateStripeSetupUrlInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  payoutMethodId: ID!
}

"""
Autogenerated return type of CreateStripeSetupUrl.
"""
type CreateStripeSetupUrlPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  url: String
}

"""
Autogenerated input type of CreateTag
"""
input CreateTagInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  name: String!
  purpose: TagPurpose!
}

"""
Autogenerated return type of CreateTag.
"""
type CreateTagPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  tag: Tag
}

"""
Autogenerated input type of CreateTimeOffRequest
"""
input CreateTimeOffRequestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID!
  description: String
  endDate: Date
  startDate: Date!
  submit: Boolean
  title: String!
}

"""
Autogenerated return type of CreateTimeOffRequest.
"""
type CreateTimeOffRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  timeOffRequests: [TimeOffRequest!]!
}

"""
Autogenerated input type of CreateTimesheetEntry
"""
input CreateTimesheetEntryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID
  timesheetEntry: TimesheetEntryAttributes
  timesheetId: ID
}

"""
Autogenerated return type of CreateTimesheetEntry.
"""
type CreateTimesheetEntryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  timesheetEntry: TimesheetEntry
}

"""
Autogenerated input type of CreateTimesheet
"""
input CreateTimesheetInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID!
  endDate: Date
  projectCodes: [String!]
  startDate: Date
}

"""
Autogenerated return type of CreateTimesheet.
"""
type CreateTimesheetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  timesheet: Timesheet
}

"""
Autogenerated input type of CreateVideo
"""
input CreateVideoInput {
  """
  if set, indicates the blog post for which the video is saved as the video content piece
  """
  blogPostId: ID
  blogPostRawId: Int
    @deprecated(reason: "only used to support some legacy frontend code")

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  expected video file extension; infers mime-type
  """
  extension: String!

  """
  if set, indicates the firm for which the video is saved as the company page video
  """
  firmId: ID
  firmRawId: Int
    @deprecated(reason: "only used to support some legacy frontend code")

  """
  if false, the video will not be displayed on the public profile
  """
  public: Boolean

  """
  if set, indicates the question for which the video is saved as an answer
  """
  questionId: ID
  questionRawId: Int
    @deprecated(reason: "only used to support some legacy frontend code")

  """
  if set, indicates the video type without knowing its associated model
  """
  videoType: VideoTypeEnum
}

"""
Autogenerated return type of CreateVideo.
"""
type CreateVideoPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  uploadUrl: String
  video: Video
}

"""
Autogenerated input type of CreateWebhook
"""
input CreateWebhookInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  defaults to true. If false we will not send events to this webhook.
  """
  enabled: Boolean

  """
  HTTP POST requests with JSON bodies will be sent to this URL. The fields on
  the body are 'event_name', 'timestamp' (unix integer format) and 'records'
  (array of string IDs of related records)
  """
  url: String!
}

"""
Autogenerated return type of CreateWebhook.
"""
type CreateWebhookPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]

  """
  the webhook just created
  """
  webhook: Webhook
}

type Currency implements Node {
  allowContracts: Boolean
  allowInvoices: Boolean
  code: String
  conversionFee: Boolean
  iconUrl: String

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  symbol: String
}

type CustomerPayment implements Node {
  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  invoices: [Invoice!]
  paymentMethod: PaymentMethod
  status: CustomerPaymentStatusEnum!
  user: User
}

enum CustomerPaymentStatusEnum {
  failed
  paid
  pending
  processing
}

"""
represents a date of the following format: YYYY-MM-DD
"""
scalar Date @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

"""
represents a timestamp of the ISO8601 format
"""
scalar DateTime @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

"""
Autogenerated input type of DeactivatePayoutMethod
"""
input DeactivatePayoutMethodInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  payoutMethodId: ID!
}

"""
Autogenerated return type of DeactivatePayoutMethod.
"""
type DeactivatePayoutMethodPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  payoutMethod: PayoutMethod
}

"""
a set of defaults for a job's automated messages
"""
type DefaultAutomatedMessage {
  delayDays: Int!
  flowName: JobAutomatedMessagingFlowNameEnum!
  followUpIndex: Int!
  message: String!
  sendBy: SendByEnum!
}

"""
Autogenerated input type of DeleteAnswer
"""
input DeleteAnswerInput {
  answerId: ID
  answerRawId: Int @deprecated(reason: "only used in legacy frontend code")

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteAnswer.
"""
type DeleteAnswerPayload {
  answer: Answer

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

"""
Autogenerated input type of DeleteApiKey
"""
input DeleteApiKeyInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DeleteApiKey.
"""
type DeleteApiKeyPayload {
  apiKey: ApiKey

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

"""
Autogenerated input type of DeleteBlogPost
"""
input DeleteBlogPostInput {
  blogPostId: ID
  blogPostRawId: Int @deprecated(reason: "only used in legacy frontend code")

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteBlogPost.
"""
type DeleteBlogPostPayload {
  blogPost: BlogPost

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

"""
Autogenerated input type of DeleteChatMessage
"""
input DeleteChatMessageInput {
  chatMessageId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteChatMessage.
"""
type DeleteChatMessagePayload {
  chatMessage: ChatMessage

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

"""
Autogenerated input type of DeleteContract
"""
input DeleteContractInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID
  contractRawId: Int
    @deprecated(reason: "only used to support some legacy frontend code")
}

"""
Autogenerated return type of DeleteContract.
"""
type DeleteContractPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
}

"""
Autogenerated input type of DeleteFirmIntegration
"""
input DeleteFirmIntegrationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  firmIntegrationId: ID!
}

"""
Autogenerated return type of DeleteFirmIntegration.
"""
type DeleteFirmIntegrationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  firm: Firm
}

"""
Autogenerated input type of DeleteJobApplication
"""
input DeleteJobApplicationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  jobApplicationId: ID
}

"""
Autogenerated return type of DeleteJobApplication.
"""
type DeleteJobApplicationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  jobApplication: JobApplication
}

"""
Autogenerated input type of DeleteJob
"""
input DeleteJobInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  jobId: ID!
}

"""
Autogenerated return type of DeleteJob.
"""
type DeleteJobPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  job: Job
}

"""
Autogenerated input type of DeletePaymentMethod
"""
input DeletePaymentMethodInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DeletePaymentMethod.
"""
type DeletePaymentMethodPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]

  """
  the payment method just deleted
  """
  paymentMethod: PaymentMethod
}

"""
Autogenerated input type of DeleteProjectSubmission
"""
input DeleteProjectSubmissionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  projectSubmissionId: ID
  projectSubmissionRawId: Int
    @deprecated(reason: "only used to support some legacy frontend code")
}

"""
Autogenerated return type of DeleteProjectSubmission.
"""
type DeleteProjectSubmissionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  projectSubmission: ProjectSubmission
}

"""
Autogenerated input type of DeleteQuestion
"""
input DeleteQuestionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  questionId: ID!
}

"""
Autogenerated return type of DeleteQuestion.
"""
type DeleteQuestionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  question: Question
}

"""
Autogenerated input type of DeleteReference
"""
input DeleteReferenceInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  referenceId: ID
  referenceRawId: Int @deprecated(reason: "only used in legacy frontend code")
}

"""
Autogenerated return type of DeleteReference.
"""
type DeleteReferencePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  reference: Reference
}

"""
Autogenerated input type of DeleteSignableDocumentTemplate
"""
input DeleteSignableDocumentTemplateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  signableDocumentTemplateId: ID
}

"""
Autogenerated return type of DeleteSignableDocumentTemplate.
"""
type DeleteSignableDocumentTemplatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  signableDocumentTemplate: SignableDocumentTemplate
}

"""
Autogenerated input type of DeleteTag
"""
input DeleteTagInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  tagId: ID!
}

"""
Autogenerated return type of DeleteTag.
"""
type DeleteTagPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  tag: Tag
}

"""
Autogenerated input type of DeleteTimeOffRequest
"""
input DeleteTimeOffRequestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  timeOffRequestId: ID!
}

"""
Autogenerated return type of DeleteTimeOffRequest.
"""
type DeleteTimeOffRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  timeOffRequest: TimeOffRequest
}

"""
Autogenerated input type of DeleteTimesheetEntry
"""
input DeleteTimesheetEntryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  timesheetEntryId: ID
}

"""
Autogenerated return type of DeleteTimesheetEntry.
"""
type DeleteTimesheetEntryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  timesheetEntry: TimesheetEntry
}

"""
Autogenerated input type of DeleteTimesheet
"""
input DeleteTimesheetInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  timesheetId: ID
}

"""
Autogenerated return type of DeleteTimesheet.
"""
type DeleteTimesheetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  timesheet: Timesheet
}

"""
Autogenerated input type of DeleteUser
"""
input DeleteUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  required when deleting own account
  """
  password: String

  """
  omit this to delete your own account
  """
  userId: ID
}

"""
Autogenerated return type of DeleteUser.
"""
type DeleteUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  user: User
}

"""
Autogenerated input type of DeleteVideo
"""
input DeleteVideoInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  videoId: ID
  videoRawId: Int @deprecated(reason: "only used in legacy frontend code")
}

"""
Autogenerated return type of DeleteVideo.
"""
type DeleteVideoPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  video: Video
}

"""
Autogenerated input type of DeleteWebhook
"""
input DeleteWebhookInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  webhookId: ID!
}

"""
Autogenerated return type of DeleteWebhook.
"""
type DeleteWebhookPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]

  """
  the webhook just deleted
  """
  webhook: Webhook
}

"""
Autogenerated input type of DisableJobOpportunities
"""
input DisableJobOpportunitiesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  token to identify the Link
  """
  token: String
}

"""
Autogenerated return type of DisableJobOpportunities.
"""
type DisableJobOpportunitiesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  openToOpportunities: Boolean
}

"""
a subscription to a category of emails. Can be used to customize email preferences
"""
type EmailSubscription implements Node {
  """
  whether the subscription is active (meaning emails are sent)
  """
  active: Boolean

  """
  if false, the subscription is not applicable for this user and the emails won't be sent
  """
  enabled: Boolean

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!

  """
  identifies which subscription it is
  """
  subscriptionName: SubscriptionName
  user: User

  """
  whether the user has enabled this subscription. If false, the emails won't be sent.
  """
  userEnabled: Boolean
}

enum EmployeeTypeEnum {
  """
  flexhire is the employer of record for this employee
  """
  employed_by_flexhire

  """
  flexhire is using a partner as employer of record for this employee
  """
  employed_by_partner
}

"""
Flexhire Associate/Partner company that handles EOR contracts for Flexhire
"""
type EmployerOfRecordPartner implements Node {
  currency: Currency

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  name: String
}

"""
an error that occurred while processing the request
"""
type Error
  @api(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Utility" }
    ]
  ) {
  message: String!
}

"""
Autogenerated input type of EvaluateAnswer
"""
input EvaluateAnswerInput {
  """
  the answer being rated
  """
  answerId: ID

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  free text notes that will be displayed together with the rating, optional
  """
  notes: String

  """
  a number from 0 to 1 representing the percentage rating of the video by the current user
  """
  score: Float!

  """
  the video being rated
  """
  videoId: ID
}

"""
Autogenerated return type of EvaluateAnswer.
"""
type EvaluateAnswerPayload {
  answerEvaluation: AnswerEvaluation

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

"""
Autogenerated input type of EvaluateJobApplicationWithAI
"""
input EvaluateJobApplicationWithAIInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  jobApplicationId: ID!
}

"""
Autogenerated return type of EvaluateJobApplicationWithAI.
"""
type EvaluateJobApplicationWithAIPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  jobApplicationEvaluation: JobApplicationEvaluation
}

enum EventTypeEnum {
  accepted_screening
  completed_screening
  contract_paused
  customer_payment_initiated
  feedback_given
  interview
  interview_accepted
  interview_rejected
  interview_requested
  interview_rescheduled
  invoice_gone_overdue
  job_application_draft
  job_application_sent
  job_viewed
  offer_accepted
  offer_made
  offer_rejected
  payroll_item_approved
  payroll_item_submitted
  profile_submitted
  project_submission_completed
  project_submission_started
  rejected_by_client
  rejected_screening
  screening_requested
  signed_up
  webhook_created
  webhook_updated
}

type Expense implements Node {
  amount: Money
  contract: Contract
  currency: Currency
  description: String
  expenseDate: Date
  expenseType: ExpenseTypeEnum

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  itemNum: Int @deprecated(reason: "Use payroll_item.item_num instead")
  payrollItem: PayrollItem
  projectCode: String

  """
  internal DB ID of this record
  """
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")
  receiptUrl: String
  timesheet: Timesheet
}

"""
The connection type for Expense.
"""
type ExpenseConnection {
  """
  A list of edges.
  """
  edges: [ExpenseEdge]

  """
  A list of nodes.
  """
  nodes: [Expense]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type ExpenseEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Expense
}

enum ExpenseTypeEnum {
  capex
  opex
}

input ExpensesFilters {
  actionable: Boolean
  clientId: ID
  clientStatus: PayrollItemClientStatus
    @deprecated(reason: "use pipelineStatus instead")
  contractStatuses: [ContractStatus!]
  endDate: Date
  freelancerStatus: PayrollItemFreelancerStatus
    @deprecated(reason: "use pipelineStatus instead")
  invoiceNum: Int
  name: String
  pipelineStatus: PayrollItemPipelineStatus
  selectable: Boolean
  startDate: Date
  status: PayrollItemStatus
}

"""
Autogenerated input type of ExpireContract
"""
input ExpireContractInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID!

  """
  if this contract is for a manager on the firm, specify who will inherit the managed assets. Defaults to the current user
  """
  inheritorId: ID
}

"""
Autogenerated return type of ExpireContract.
"""
type ExpireContractPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
}

"""
Autogenerated input type of ExportWorkReportCsv
"""
input ExportWorkReportCsvInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  timesheetId: ID!
  timezoneName: String
}

"""
Autogenerated return type of ExportWorkReportCsv.
"""
type ExportWorkReportCsvPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  csvFile: String
  errors: [Error!]
  timesheet: Timesheet
}

"""
Autogenerated input type of ExportWorkReportsCsv
"""
input ExportWorkReportsCsvInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  payrollItemIds: [ID!]!
  timezoneName: String
}

"""
Autogenerated return type of ExportWorkReportsCsv.
"""
type ExportWorkReportsCsvPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  csvFile: String
  errors: [Error!]
  timesheets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimesheetConnection!
}

enum FeeModeEnum {
  customer_pays_fee
  recipient_pays_fee
}

"""
Autogenerated input type of FetchStripeLoginUrl
"""
input FetchStripeLoginUrlInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  payoutMethodId: ID!
}

"""
Autogenerated return type of FetchStripeLoginUrl.
"""
type FetchStripeLoginUrlPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  loginUrl: String
}

"""
a company signed up with Flexhire
"""
type Firm implements Node
  @hris(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Team" }
    ]
  ) {
  activeIntegrationNames: [String!]
  activeMembersCount: Int
  additionalInvoiceText: String

  """
  true if current user is an admin for this firm
  """
  administersFirm: Boolean
  allowDisplayApplicantSource: Boolean
  allowInvoiceAutoCharge: Boolean
  allowJobsWithNoRates: Boolean
  allowNoPaymentMethod: Boolean
  applicantSources: [String!]
  applications(filters: JobApplicationsFilters): ApplicationsResults
  backgroundChecks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: BackgroundChecksFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BackgroundCheckConnection
  backgroundTheme: BackgroundThemeEnum
  bankTransferDetails(currency: String): BankTransferDetails
  billingPlan: BillingPlan
  billingPlanStartedAt: DateTime
  bonuses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: BonusesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BonusConnection
  candidateRankingStatus: CandidateRankingStatusEnum
  candidates(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: JobApplicationsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): JobApplicationConnection

  """
  the active contract the current user has with this firm
  """
  contract: Contract
  contractStats: ContractStats
  contracts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: ContractsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ContractConnection
  currency: Currency
  customerSuccessRep: User
  dayforceConfigured: Boolean
  dayforceJobBoardId: String
  dayforceWorkspace: String
  description: String
  emailList(
    contractIds: [ID!]
    contractRawIds: [Int!]
      @deprecated(reason: "only used in legacy frontend code")
  ): [String!]
  emailsForInvoices: [String!]
  enableNewEvaluationExperience: Boolean
  expenses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: ExpensesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ExpenseConnection
  firmIntegrations: [FirmIntegration!]
  freelancerSubtypes: [FreelancerSubtype!]
  greenhouseConfigured: Boolean
  hireSourcedByClientMargin: Float
    @deprecated(reason: "use firm.billingPlan values")
  hireSourcedByFlexhireMargin: Float
    @deprecated(reason: "use firm.billingPlan values")

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  instantBackgroundCheckPayment: Boolean
  internalRecruiter: User
  interviews(filters: JobApplicationsFilters): ApplicationsResults
  inviteMargin: Float @deprecated(reason: "use firm.billingPlan values")
  invoice(
    rawId: Int @deprecated(reason: "only used in legacy frontend code")
  ): Invoice @deprecated(reason: "only used in legacy frontend code")
  invoicePaymentPreview(
    filters: InvoiceBulkPaymentFilters

    """
    omit this to use the company's default payment method for the preview
    """
    paymentMethodId: ID
  ): InvoicePaymentPreview
  invoiceSalariesInAdvance: Boolean
  invoiceSchedule: InvoiceSchedule
  invoices(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: InvoicesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): InvoiceConnection
  invoicesSummary(filters: InvoicesFilters): InvoicesSummary
  job(
    id: ID
    slug: String @deprecated(reason: "only used in legacy frontend code")
  ): Job
  jobApplications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: JobApplicationsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): JobApplicationConnection
  jobs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: JobsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): JobConnection
  jobsForIntegration(
    filters: JobForIntegrationFilters
  ): JobForIntegrationResults
  lastAutoInvoiceGenerationAt: DateTime
  legacyBilling: Boolean
  linkedinCompanyId: String
  logoUrl: String
  managerForNonPayrollFees: User
  manualTransferPaymentMethod: PaymentMethod
  maxCandidates: Int
  member(jobSlug: String, profileSlugOrEmail: String): Member
  minSalaryDaysToInvoice: Int
  name: String
  nextAutoInvoiceDate: DateTime
  numConsensusAccept: Int
  numConsensusReject: Int
  paymentMethod: PaymentMethod
  paymentMethodTypes: [PaymentMethodTypeLiteral!]
  paymentMethods(
    cardsOnly: Boolean
    exceptCards: Boolean
    status: PaymentMethodStatusEnum
  ): [PaymentMethod!]
  paymentNetTermsForNonPayroll: Int
  paymentNetTermsForPayroll: Int
  payoutMode: PayoutMode
  payrollItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: PayrollItemsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PayrollItemConnection
  purchaseOrderNumberForNonPayrollFees: String
  quorum: Int

  """
  internal DB ID of this record
  """
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")
  salaries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: SalariesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SalaryConnection
  salary(salaryId: ID): Salary
  salaryFrequency: SalaryFrequencyEnum
  screening(filters: JobApplicationsFilters): ApplicationsResults

  """
  true if current user has this firm in their firms list
  """
  self: Boolean
  showTeamTimeOffRequests: Boolean
  signableDocumentTemplates: [SignableDocumentTemplate!]
  signableDocuments: [SignableDocument!]
  skills(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    search: String
  ): SkillConnection
  slackConfigured: Boolean
  slackInstallationUrl: String
  slug: String
  tags: [Tag!]
  tasks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: TasksFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TaskConnection
  testJobIntegrationApiKey(
    apiKey: String!
    integrationName: JobIntegrationNameForImportEnum!
  ): ApiKeyTestResult
  timeOffRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: TimeOffRequestsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimeOffRequestConnection
  timesheets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: TimesheetsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimesheetConnection
  timezoneName: String
  unifyInvoicesInPreferredCurrency: Boolean
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    search: String
  ): UserConnection
  video: Video
  webhooks: [Webhook!]
  website: String
  workdayUserEmail: String
}

"""
The connection type for Firm.
"""
type FirmConnection {
  """
  A list of edges.
  """
  edges: [FirmEdge]

  """
  A list of nodes.
  """
  nodes: [Firm]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type FirmEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Firm
}

"""
a connection between this Firm and an external HRIS or ATS platform
"""
type FirmIntegration implements Node
  @ats(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Integration" }
    ]
  ) {
  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!

  """
  the external platform that is connected
  """
  integrationName: String!

  """
  the email address of the external platform user on behalf of which Flexhire will act on the external platform
  """
  remoteUserEmail: String
}

"""
Autogenerated return type of FirmUpdated.
"""
type FirmUpdatedPayload {
  firm: Firm
}

"""
Autogenerated input type of ForgotPassword
"""
input ForgotPasswordInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
}

"""
Autogenerated return type of ForgotPassword.
"""
type ForgotPasswordPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  message: String
}

type FreelancerSubtype implements Node {
  featuredFreelancers: [User!]
  featuredQuestions: [Question!]
  freelancerType: FreelancerType
  iconUrl: String

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  name: String!

  """
  internal DB ID of this record
  """
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")
  screeningQuestions: [Question!]
  slug: String!
}

input FreelancerSubtypeAttributes {
  groupIndex: Int
  rawId: Int
}

"""
The connection type for FreelancerSubtype.
"""
type FreelancerSubtypeConnection {
  """
  A list of edges.
  """
  edges: [FreelancerSubtypeEdge]

  """
  A list of nodes.
  """
  nodes: [FreelancerSubtype]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type FreelancerSubtypeEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: FreelancerSubtype
}

input FreelancerSubtypeFilter {
  groupIndex: Int
  id: Int!
  name: String
}

type FreelancerType implements Node {
  featuredFreelancers(skillSlug: String): [User!]
  featuredQuestions: [Question!]
  freelancerSubtypes: [FreelancerSubtype!]
  iconUrl: String

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  name: String!
  profilesRequireSkills: Boolean

  """
  internal DB ID of this record
  """
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")
  screeningQuestions: [Question!]
  skills: [Skill!]
  slug: String!
}

"""
The connection type for FreelancerType.
"""
type FreelancerTypeConnection {
  """
  A list of edges.
  """
  edges: [FreelancerTypeEdge]

  """
  A list of nodes.
  """
  nodes: [FreelancerType]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type FreelancerTypeEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: FreelancerType
}

"""
Autogenerated return type of FrontendVersionDeployed.
"""
type FrontendVersionDeployedPayload {
  buildId: String
}

"""
Autogenerated input type of GetMergeLinkToken
"""
input GetMergeLinkTokenInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  integrationName: String!
}

"""
Autogenerated return type of GetMergeLinkToken.
"""
type GetMergeLinkTokenPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  linkToken: String
}

"""
Autogenerated input type of GetSignatureDocumentUrl
"""
input GetSignatureDocumentUrlInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  signatureId: ID!
}

"""
Autogenerated return type of GetSignatureDocumentUrl.
"""
type GetSignatureDocumentUrlPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  documentUrl: String
  errors: [Error!]
}

"""
Autogenerated input type of GrantBonus
"""
input GrantBonusInput {
  autoApprove: Boolean
  clientAmount: MoneyInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID!
  description: String
  endDate: Date
  startDate: Date
}

"""
Autogenerated return type of GrantBonus.
"""
type GrantBonusPayload {
  bonus: Bonus

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

type Holiday implements Node {
  date: Date

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  name: String
}

"""
Autogenerated input type of ImportJobs
"""
input ImportJobsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  If specific job IDs are passed, only those jobs will be imported. Pass an
  empty list to instead import all the jobs in the background.
  """
  externalJobIds: [String!]!
  firmId: ID!
  integrationName: JobIntegrationNameForImportEnum!
}

"""
Autogenerated return type of ImportJobs.
"""
type ImportJobsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  firm: Firm
  jobIntegrations: [JobIntegration!]
}

type Institute implements Node {
  continent: String
  country: Country

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  name: String
  nationalRank: Int
  rankingYear: Int

  """
  internal DB ID of this record
  """
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")
  worldRank: Int
  worldRankRange: String
}

"""
The connection type for Institute.
"""
type InstituteConnection {
  """
  A list of edges.
  """
  edges: [InstituteEdge]

  """
  A list of nodes.
  """
  nodes: [Institute]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type InstituteEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Institute
}

"""
Autogenerated input type of InteractWithChatAutomation
"""
input InteractWithChatAutomationInput {
  automationId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  dismiss: Boolean!
}

"""
Autogenerated return type of InteractWithChatAutomation.
"""
type InteractWithChatAutomationPayload {
  automation: ChatAutomation

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

"""
a virtual interview with a job applicant
"""
type Interview implements Node
  @ats(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Interview" }
    ]
  ) {
  acceptedAt: DateTime

  """
  all the people in the hiring panel of the interview, including the person running the interview
  """
  allInterviewers: [User!]!
  calendlyUrl: String

  """
  the person running the interview
  """
  client: User
  date: DateTime

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  interviewDate1: DateTime
  interviewDate2: DateTime
  interviewDate3: DateTime
  interviewDate4: DateTime
  interviewSchedulingMethod: String
  interviewTimezone: String

  """
  the job application for the applicant being interviewed
  """
  jobApplication: JobApplication
  postInterviewRemindersSentAt: DateTime
  status: InterviewStatusEnum

  """
  additional people in the hiring panel of thje interview
  """
  users: [User!]
}

"""
The connection type for Interview.
"""
type InterviewConnection {
  """
  A list of edges.
  """
  edges: [InterviewEdge]

  """
  A list of nodes.
  """
  nodes: [Interview]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type InterviewEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Interview
}

enum InterviewStatusEnum {
  accepted
  rejected
  requested
}

input InvitationRecipientAttributes {
  contractId: ID
  freelancerData: InvitationRecipientData
  freelancerId: ID
  jobId: ID
  jobTitle: String
  requestBackgroundCheck: Boolean
}

input InvitationRecipientData {
  email: String!
  firstName: String!
  lastName: String!
}

enum InvitationTypeEnum {
  """
  this contract was a hire that was executed via Flexhire
  """
  hire

  """
  this contract was a pre-existing hire that was then entered in Flexhire
  """
  invitation
}

"""
Autogenerated input type of InviteFriend
"""
input InviteFriendInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String
}

"""
Autogenerated return type of InviteFriend.
"""
type InviteFriendPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  sent: Boolean!
}

"""
an invoice from Flexhire to a Firm
"""
type Invoice implements Node
  @hris(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Billing" }
    ]
  ) {
  """
  when the payment is expected to be completed by the customer
  """
  assumedClientPaymentCompletionAt: DateTime
  assumedPayoutCompletionAt: DateTime

  """
  payout to individuals is expected to be initiated at this time
  """
  assumedPayoutInitiationAt: DateTime
  bankTransferDetails: BankTransferDetails
  capitalExpenditureSubtotal: Money
  client: User

  """
  true if the client has paid and payment has proccessed
  """
  clientPaid: Boolean

  """
  timestamp of client payment completion
  """
  clientPaidAt: DateTime

  """
  when the payment was initiated by the customer
  """
  clientPaymentStartedAt: DateTime

  """
  overall status of the invoice in the customer payment and payroll pipelines
  """
  clientStatus: InvoiceClientStatus
  clientStatusHumanized: String
  createdAt: DateTime

  """
  url to download the CSV version
  """
  csvUrl: String
  currency: Currency
  customerPayment: CustomerPayment
  customerPayments: [CustomerPayment!]

  """
  deadline for when client payment must be initiated
  """
  dueDate: Date
  emailedAt: DateTime

  """
  end of associated billing period
  """
  endDate: Date
  expensesAmount: Money
  firm: Firm
  freelancersPaidOutAt: DateTime
  hasPayroll: Boolean

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!

  """
  date of issue
  """
  invoiceDate: DateTime
  invoiceItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): InvoiceItemConnection
  invoiceItemsExchangeRates: [InvoiceExchangeRate!]
  invoiceItemsSubtotal: Money

  """
  invoice number
  """
  invoiceNum: Int
  isPaymentProcessing: Boolean
  lastEmailedAt: DateTime
  operatingExpenditureSubtotal: Money
  overdue: Boolean
  paychecks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: PaychecksFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PaycheckConnection

  """
  preview the payment for this invoice
  """
  paymentPreview(
    """
    set this to true to only consider manual transfer type methods for the preview
    """
    manualTransfer: Boolean

    """
    omit this to use the company's default payment method for the preview
    """
    paymentMethodId: ID
  ): InvoicePaymentPreview
  paymentProcessingFeeIncluded: Boolean

  """
  payout to individuals is expected to be initiated before this date, when
  payouts are configured to not wait for client payment
  """
  payoutDueDate: Date
  payrollItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: PayrollItemsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PayrollItemConnection

  """
  url to download the PDF version
  """
  pdfUrl: String

  """
  internal DB ID of this record
  """
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")

  """
  start of associated billing period
  """
  startDate: Date

  """
  status of the invoice
  """
  status: InvoiceStatus!

  """
  unique string token to identify this invoice
  """
  token: String
  totalToPayClient: Money
  unassignedExpenditureSubtotal: Money
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    paidOut: Boolean
  ): UserConnection
}

input InvoiceBulkPaymentFilters {
  bulkPaymentType: InvoiceBulkPaymentTypeEnum
  invoicesIds: [ID!]
}

enum InvoiceBulkPaymentTypeEnum {
  """
  return data combined for due and overdue invoices
  """
  all

  """
  return data for all due invoices
  """
  due

  """
  return data for all overdue/late invoices
  """
  overdue
}

enum InvoiceClientStatus {
  """
  (only if the invoice has payroll) payment is being distributed to all members
  """
  distributing_payment

  """
  the invoice is still being built and is not complete
  """
  draft

  """
  the invoice was due in the past but the customer payment has not been initiated yet
  """
  overdue

  """
  the customer payment has completed
  """
  paid

  """
  (only if the invoice has payroll) the payroll has been paid out to all members
  """
  paid_out

  """
  the customer payment has been initiated but has not completed yet
  """
  payment_processing

  """
  the invoice has been issued and emailed
  """
  requested

  """
  the invoice has been voided
  """
  void
}

"""
The connection type for Invoice.
"""
type InvoiceConnection {
  """
  A list of edges.
  """
  edges: [InvoiceEdge]

  """
  A list of nodes.
  """
  nodes: [Invoice]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type InvoiceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Invoice
}

"""
Exposes the exchange rate value between two currencies
"""
type InvoiceExchangeRate {
  formatted: String
  fromCurrency: Currency
  toCurrency: Currency
  value: Float
}

type InvoiceItem implements Node {
  _unassignedExpenditureSubtotal: Money
  amountExchanged: Boolean
  amountPerUnit: Money
  associatedPeriodHumanized(
    """
    optionally provide a custom separator
    """
    separator: String
  ): String
  capitalExpenditureSubtotal: Money
  contract: Contract
  currency: Currency
  description: String
  endDate: Date

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  invoice: Invoice
  itemType: InvoiceItemItemType
  itemTypeHumanized: String
  managerName: String
  numUnits: Int
  operatingExpenditureSubtotal: Money
  payrollItem: PayrollItem
  projectCodesHumanized: String

  """
  internal DB ID of this record
  """
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")
  startDate: Date
  subjectName: String
  totalAmount: Money
}

"""
The connection type for InvoiceItem.
"""
type InvoiceItemConnection {
  """
  A list of edges.
  """
  edges: [InvoiceItemEdge]

  """
  A list of nodes.
  """
  nodes: [InvoiceItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type InvoiceItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: InvoiceItem
}

enum InvoiceItemItemType {
  """
  client request and we waiting for payment
  """
  background_check

  """
  refunding excess payments by the customer
  """
  credit_note

  """
  manually created invoice items
  """
  custom

  """
  fee for an EOR contract
  """
  employer_of_record_fee

  """
  legacy type for open jobs for landis
  """
  job_fee

  """
  fee for a third party integration
  """
  job_integration_activation_fee

  """
  legacy type for managers fee for landis
  """
  manager_fee

  """
  fee fom the third party payment system, mostly for exchange.
  """
  payment_processing_fee

  """
  for the fee of receiving a wire transfer payment
  """
  payment_receipt_fee

  """
  for the fee to distribute a payment to a employee or contractor
  """
  payout_fee

  """
  for billing a payroll item
  """
  payroll

  """
  for invoicing the client when a referral has to be paid and the client has added a referral prize to the job
  """
  referral_boost

  """
  fees for usage history
  """
  tracking_log
}

"""
previews a payment of a set of invoices with a given payment method
"""
type InvoicePaymentPreview {
  amountToSendToPay: Money
  amountToSendToPayAll: Money
  balanceAfterPayment: Money
  bankTransferDetails: BankTransferDetails
  canPay: Boolean
  chargeCardFees: Boolean
  chargeFees: Boolean
  creditCardFixedFee: Money
  creditCardPercentageFee: Float
  currency: Currency
  currencyCompatible: Boolean
  currencyConversionPercentageFee: Float
  exemptFromConversionFees: Boolean
  feeInvoiceItem: InvoiceItem
  insufficientFunds: Boolean
  invoices: [Invoice!]
  manualTransferPaymentMethod: PaymentMethod
  maximumLimit: Money
  overMaximumLimit: Boolean
  partialAmountPaidViaBalance: Money
  paymentMethod: PaymentMethod
  totalAmountWithFee: Money
  totalAmountWithoutFee: Money
  totalFees: Money
  totalToChargeClient: Money
  totalToPayClient: Money
}

"""
Autogenerated input type of InvoicePayrollItems
"""
input InvoicePayrollItemsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  the recipient of the created invoice(s)
  """
  invoiceRecipientId: ID

  """
  the items to put in the invoice
  """
  payrollItemIds: [ID!]!
}

"""
Autogenerated return type of InvoicePayrollItems.
"""
type InvoicePayrollItemsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  invoiceItems: [InvoiceItem!]
  invoices: [Invoice!]
  payrollItems: [PayrollItem!]
}

enum InvoiceSchedule {
  """
  every 1st or 15th day of month
  """
  bimonthly

  """
  every other week
  """
  biweekly

  """
  once per month
  """
  monthly

  """
  once per week
  """
  weekly
}

enum InvoiceStatus {
  """
  the invoice has been issued
  """
  active

  """
  the invoice is still being built and is not complete
  """
  draft

  """
  the invoice has been voided
  """
  void
}

"""
Autogenerated return type of InvoiceUpdated.
"""
type InvoiceUpdatedPayload {
  invoice: Invoice
}

input InvoicesFilters {
  actionable: Boolean
  clientPaymentDueInPast: Boolean
  clientRawId: Int @deprecated(reason: "only used in legacy frontend code")
  freelancerId: ID
  fromDueDate: Date
  invoiceNum: Int
  order: SortOrder
  paymentProcessing: Boolean
  sort: String
  status: InvoiceClientStatus
  toDueDate: Date
  total: Float
  unpaidByClient: Boolean
  userId: ID
}

type InvoicesSummary {
  currency: Currency!
  overdueBalance: Money!
  overdueCount: Int!
  unpaidBalance: Money!
  unpaidCount: Int!
}

"""
Represents untyped JSON
"""
scalar JSON

"""
position/job at a company
"""
type Job implements Node
  @ats(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Job" }
    ]
  ) {
  activeJobIntegrationsNames: [String!]
  aiRecommendedQuestions: [String!]

  """
  whether the AI recruiter is currently active for this job. Depends on enableAiRecruiter and allowAiFeatures
  """
  aiRecruiterEnabled: Boolean
  allInterviewers: [User!]

  """
  whether AI features are allowed to be enabled for this job (depends on firm billing plan)
  """
  allowAiFeatures: Boolean
  allowTextualAnswers: Boolean!
  applications(filters: JobApplicationsFilters): ApplicationsResults
  autoRecommendedQuestions: [Question!]
  autoRenew: Boolean
  autoSendTakeHomeTest: Boolean
  automatedMessageSchedules: [AutomatedMessageSchedule!]
  automaticallyNotifyCandidates: Boolean
  availabilityType: String
  candidateRankingStatus: CandidateRankingStatusEnum
  candidates(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: JobApplicationsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): JobApplicationConnection
  candidatesToNotify: [CandidateToNotify!]

  """
  for non-remote jobs
  """
  city: String
  clientRate: Money
  clientRateCents: Int

  """
  contract between the current user and the job, if any
  """
  contract: Contract
  contracts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: ContractsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ContractConnection

  """
  for non-remote jobs, name of the country
  """
  country: String
  createdAt: DateTime
  currency: Currency
  defaultAutomatedMessages(
    flowName: JobAutomatedMessagingFlowNameEnum!
  ): [DefaultAutomatedMessage!]

  """
  default user to send automated messages from
  """
  defaultChatAutomationUser: User
  defaultDistance: Float
  description: String
  descriptionExperience: String
  descriptionResponsibilities: String

  """
  setting to enable AI decide whether to enable the AI recruiter for this job specifically
  """
  enableAiRecruiter: Boolean
  enableAutomatedMessaging: Boolean
  expiresAt: DateTime
  firm: Firm
  freelancerRate: Money
  freelancerRateCents: Int
  freelancerSubtypes: [FreelancerSubtype!]!
    @deprecated(reason: "use job.jobSubtypes")
  freelancerType: FreelancerType

  """
  for non-remote jobs
  """
  fullAddress: String
  hireStats(filters: JobHireStatsFilters): JobHireStats
  hiringManager: User
  hiringManagerType: String

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  importProgress: Int
  importProgressPercentage: Float
  importSteps: [JobImportStep!]
  incognito: Boolean
  internalIdentifier: String
  internalRecruiter: User
  interviews(filters: JobApplicationsFilters): ApplicationsResults

  """
  job application between the current user and the job, if any
  """
  jobApplication: JobApplication
  jobApplications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: JobApplicationsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): JobApplicationConnection
  jobAutomatedMessageSchedules: [JobAutomatedMessageSchedule!]
  jobCountries: [Country!]!
  jobIntegrations: [JobIntegration!]
  jobQuestions: [JobQuestion!]
  jobSkills: [JobSkill!]!
  jobSocialIntegrations: [String!]
  jobSubtypes: [JobSubtype!]!

  """
  special message to send to candidates when they view the job
  """
  jobViewAutomatedMessage: ChatAutomation
  level: JobLevelEnum
  locationLatitude: Float
  locationLongitude: Float
  locationType: JobLocationTypeEnum
  margin: Float
  markup: Float
  minClientRate: Money
  minClientRateCents: Int
  minFreelancerRate: Money
  minFreelancerRateCents: Int
  minMarginUsd: Float
  officePolicy: OfficePolicyEnum
  positionTypes: [Position!]!
  project: Project
  projectLengthInMonths: Int
  questionLevel: QuestionLevelEnum
  questions: [Question!]
  rateMode: RateMode

  """
  internal DB ID of this record
  """
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")
  recommendedQuestions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    exclude: [ID!]

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): QuestionConnection
  recruiters: [User!]
  referralBounty: Money

  """
  referral to share this job to others
  """
  referralFromSelf: Referral

  """
  for non-remote jobs
  """
  region: String
  requestVideoIntroduction: Boolean!
  requiredExperienceYears: Int
  resumeRequiredToApply: Boolean!
  sampleRecommendedQuestion(exclude: [ID!]): Question
  screening(filters: JobApplicationsFilters): ApplicationsResults
  screeningMode: ScreeningModeEnum
  screeningRequestMessageTemplate: String
  slug: String
  status: JobStatus
  tasks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: TasksFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TaskConnection
  timezoneIdentifier: String
  timezoneRange: Int
  timezoneUtcOffset: Int
  title: String!
  updatedAt: DateTime
  user: User
  users: [User!]
}

"""
Represents a candidate/prospect or potential applicant or actual applicant in the hiring pipeline of a job
"""
type JobApplication implements Node
  @ats(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Applicant" }
    ]
  ) {
  """
  AI evaluation for this job application
  """
  aiEvaluation: JobApplicationEvaluation

  """
  AI score of the applicant, from 0 to 1
  """
  aiScore: Float
  answers: [Video!]
  applicantSource: String

  """
  average rating of this applicant's answers by colleagues or AI. The value is between 0 and 1.
  """
  averageRating: Float
  bookmarked: Boolean
  client: User
  clientRate: Money
  contract: Contract
  contractIntroductionSentAt: DateTime
  contractRequests: [ContractRequest!]
  createdAt: DateTime!
  currency: Currency
  description: String
  editToken: String
  eventTimeline: [ContractTimelineEntry!]
  feedbackChatThread: ChatThread
  filteredOutReasons(
    """
    pass null or empty to disable the check and return an empty array
    """
    filters: JobApplicationsFilters
  ): [JobApplicationFilteredOutReasonEnum!]
  firm: Firm
  freelancer: User
  freelancerContactEmail: String
  freelancerFeedback: String
  freelancerRate: Money
  hidden: Boolean
  hiringChatThread: ChatThread

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  interviewAccepted: Boolean
  interviewMessagePreview: String
  interviewRejected: Boolean
  interviewRequested: Boolean
  interviewStage: Boolean
  isUploadedResume: Boolean
  job: Job
  jobApplicationEvaluations(
    """
    if true, only the feedbacks of the current user will be returned
    """
    self: Boolean
  ): [JobApplicationEvaluation!]
  jobApplicationNotifiedToAdminsAt: DateTime
  jobApplicationReminderSentAt: DateTime
  jobApplicationSentAt: DateTime
  jobApplicationSentByFreelancerAt: DateTime
  jobOpportunitySentAt: DateTime
  lastInteractionAt: DateTime
  latestInterview: Interview
  managedOffPlatform: Boolean
  negativeFeedbackCount: Int
  notifyChanges: Boolean
  paymentMode: PaymentModeEnum
  paymentsEnabled: Boolean
  positionTypes: [String!]
  positiveFeedbackCount: Int
  previousStatus: JobApplicationStatus
  profileCompatibleWithJob: Boolean
  profileJobIncompatibilityReasons: [String!]
  profileWillUpdateOnApply: Boolean
  projectLengthInMonths: Int
  projectSubmission: ProjectSubmission
  rateMode: RateMode

  """
  internal DB ID of this record
  """
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")

  """
  platform from which the applicant came from when applying to the job. Most
  common values are linkedin, iframe (for iframe integration)
  """
  ref: String

  """
  user which brought this applicant to the platform via referral code, if any
  """
  referer: User

  """
  url from which the applicant came from when applying to the job
  """
  refererUrl: String
  referralOpportunitySentAt: DateTime
  rejectedAt: DateTime
  reviewedByMe: Boolean
  screeningRequestMessagePreview: String
  stage: ContractStageEnum
  status: JobApplicationStatus!
  textualAnswers(
    """
    defaults to false. If true, includes text answers for which a video answer also exists
    """
    includeAnsweredWithVideo: Boolean
  ): [Answer!]

  """
  AI evaluation for this job application that is currently being processed
  """
  upcomingAiEvaluation: JobApplicationEvaluation
  updatedAt: DateTime!
}

"""
The connection type for JobApplication.
"""
type JobApplicationConnection {
  """
  A list of edges.
  """
  edges: [JobApplicationEdge]

  """
  A list of nodes.
  """
  nodes: [JobApplication]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type JobApplicationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: JobApplication
}

"""
Internal feedback/rating given by a member of the hiring panel of a job to a job application
"""
type JobApplicationEvaluation implements Node
  @ats(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Screening" }
    ]
  ) {
  """
  answer evaluations for this job application
  """
  answerEvaluations: [AnswerEvaluation!]

  """
  summary chat message (only for AI)
  """
  chatMessage: ChatMessage
  createdAt: DateTime

  """
  true if the feedback was generated by AI, false otherwise
  """
  generatedByAi: Boolean!

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!

  """
  the job application that this feedback is about
  """
  jobApplication: JobApplication

  """
  the profile evaluation for this job application (only for AI)
  """
  profileEvaluation: ProfileEvaluation

  """
  true if the feedback is positive (thumbs up), false otherwise (thumbs down)
  """
  ratingPositive: Boolean

  """
  the 0.1 to 1.0 score of the evaluation (only for AI)
  """
  score: Float!
  updatedAt: DateTime

  """
  the user that left this feedback
  """
  user: User
}

enum JobApplicationFilteredOutReasonEnum {
  adminMode
  adminsOnly
  allowExpensesAccess
  allowHireInterviewsAccess
  allowHireJobsAccess
  allowHireOffersAccess
  allowHireRatesAccess
  allowHireRecruitmentAccess
  allowManageBonusesAccess
  allowManageExpensesAccess
  allowManageInvitationsAccess
  allowManageRatesAccess
  allowManageTeamAccess
  applicantSource
  approvalType
  availableOnly
  bookmarked
  bookmarkedByUserId
  canWorkInTheUs
  category
  clientId
  clientRawId
  company
  contractStatus
  contractType
  countries
  evaluated
  excludeHidden
  experience
  expiresSoon
  feeMode
  feedbackCountBelow
  feedbackCountEqualOrAbove
  firmId
  freelancerId
  freelancerRawIdOrSlug
  freelancerSubtypes
  hasAnswers
  hasProjectSubmission
  hasVideoIntroduction
  interviewStatus
  invitationType
  jobApplicationStatus
  jobId
  jobsIds
  locationTypeFilter
  managedTeams
  maxClientRate
  maxUniversityRank
  membersOnly
  missingAnswers
  missingProjectSubmission
  missingVideoIntroduction
  name
  netFeedback
  noCategory
  order
  paymentMode
  payoutMethodType
  positionTypes
  rating
  showNotNotified
  showNotified
  skills
  skillsIds
  sortBy
  stage
  startDateInPast
  status
  statuses
  tagsIds
  timezoneFilter
  toCurrentUserFirm
  university
  verifiedOnly
  withJobScreening
  withoutJobScreening
}

enum JobApplicationStatus {
  """
  expired contract has been deleted
  """
  deleted

  """
  member has declined invitation to apply
  """
  freelancer_not_interested

  """
  The user has been hired
  """
  hired

  """
  The user has been invited to an interview
  """
  interview

  """
  member has started applying to the job
  """
  job_application_draft

  """
  member has been invited by the client to apply to the job
  """
  job_application_invited

  """
  member has sent the job application
  """
  job_application_sent

  """
  member has visited the job page
  """
  job_viewed

  """
  The user has been offered a job
  """
  offer

  """
  potential referrer or applicant for the job
  """
  potential

  """
  during the hiring process, the member has been rejected by the client or an offer has been withdrawn
  """
  rejected

  """
  The user has completed all requests
  """
  screening_completed

  """
  The user has declined to complete requests
  """
  screening_rejected

  """
  The user has pending requests
  """
  screening_requested

  """
  The user has completed some but not all requests
  """
  screening_started
}

input JobApplicationsFilters {
  adminMode: Boolean
  adminsOnly: Boolean
  allowExpensesAccess: Boolean
  allowHireInterviewsAccess: Boolean
  allowHireJobsAccess: Boolean
  allowHireOffersAccess: Boolean
  allowHireRatesAccess: Boolean
  allowHireRecruitmentAccess: Boolean
  allowManageBonusesAccess: Boolean
  allowManageExpensesAccess: Boolean
  allowManageInvitationsAccess: Boolean
  allowManageRatesAccess: Boolean
  allowManageTeamAccess: Boolean
  applicantSource: String
  approvalType: ApprovalTypeEnum
  availableOnly: Boolean
  bookmarked: Boolean
  bookmarkedByUserId: Int
  canWorkInTheUs: Boolean
  category: ContractCategoryEnum
  clientId: ID
  clientRawId: Int @deprecated(reason: "used only for legacy frontend code")
  company: String
  contractStatus: ContractStatus
  contractType: ContractTypeEnum
  countries: [CountryFilter!]

  """
  if true, only returns applicants evaluated by the current user. If false, only
  returns applicants not evaluated by the current user.
  """
  evaluated: Boolean
  excludeHidden: Boolean
  experience: Int
  expiresSoon: Boolean
  feeMode: FeeModeEnum
  feedbackCountBelow: Int
  feedbackCountEqualOrAbove: Int
  firmId: ID
  freelancerId: ID
  freelancerRawIdOrSlug: String
    @deprecated(reason: "used only for legacy frontend code")
  freelancerSubtypes: [FreelancerSubtypeFilter!]
  hasAnswers: Boolean
  hasProjectSubmission: Boolean
  hasVideoIntroduction: Boolean
  interviewStatus: InterviewStatusEnum
  invitationType: InvitationTypeEnum
  jobApplicationStatus: JobApplicationStatus
  jobId: ID
  jobsIds: [Int!]
  locationTypeFilter: LocationFilter
  managedTeams: ManagedTeamsFilter
  maxClientRate: MoneyInput
  maxUniversityRank: Int
  membersOnly: Boolean
  missingAnswers: Boolean
  missingProjectSubmission: Boolean
  missingVideoIntroduction: Boolean
  name: String
  netFeedback: NetFeedbackEnum
  noCategory: Boolean
  order: SortOrder
  paymentMode: PaymentModeEnum
  payoutMethodType: PayoutMethodTypeFilterEnum
  positionTypes: String
  rating: RatingFilterEnum
  showNotNotified: Boolean
  showNotified: Boolean
  skills: [SkillFilter!]
  skillsIds: [ID!]
  sortBy: ContractsSortEnum
  stage: ContractStageEnum
  startDateInPast: Boolean
  status: JobApplicationStatus
  statuses: [JobApplicationStatus!]
  tagsIds: [Int!]
  timezoneFilter: TimezoneFilter
  toCurrentUserFirm: Boolean
  university: String
  verifiedOnly: Boolean
  withJobScreening: Boolean
  withoutJobScreening: Boolean
}

"""
an automated message template to send to a candidate or applicant as part of a flow/sequence/schedule
"""
type JobAutomatedMessageSchedule implements Node {
  """
  the actual automated message to send
  """
  chatAutomation: ChatAutomation

  """
  how long to wait before sending the message since the previous message in the flow, in days
  """
  delayDays: Int!

  """
  how long to wait before sending the message since the previous message in the flow, in minutes
  """
  delayMinutes: Int!

  """
  the name of the flow this message is part of
  """
  flowName: JobAutomatedMessagingFlowNameEnum!

  """
  the index of the message in the flow. If set to 0, this is the first message
  in the flow, if set to 1 it's the follow up to the first message, etc.
  """
  followUpIndex: Int!

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  job: Job!
}

enum JobAutomatedMessagingFlowNameEnum {
  """
  targets candidates that haven't shown interest in applying yet
  """
  apply

  """
  targets candidates that have clicked apply to start the job application, but have not submitted it
  """
  complete

  """
  targets applicants that have received screening requests but have not completed them
  """
  complete_screening

  """
  targets applicants that have completed screening and are now in the interview phase
  """
  interview

  """
  targets applicants that have received screening requests but have not started them
  """
  screening
}

"""
The connection type for Job.
"""
type JobConnection {
  """
  A list of edges.
  """
  edges: [JobEdge]

  """
  A list of nodes.
  """
  nodes: [Job]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type JobEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Job
}

"""
a Job loaded from an external ATS system for the purpose of importing it into Flexhire
"""
type JobForIntegration
  @ats(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Integration" }
    ]
  ) {
  exists: Boolean!

  """
  external ID of the job, coming from the external integration. Not to be
  confused with the Node ID (this type is not a Node)
  """
  id: String!
  title: String!
}

"""
The connection type for JobForIntegration.
"""
type JobForIntegrationConnection {
  """
  A list of edges.
  """
  edges: [JobForIntegrationEdge]

  """
  A list of nodes.
  """
  nodes: [JobForIntegration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type JobForIntegrationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: JobForIntegration
}

input JobForIntegrationFilters {
  """
  name of the integration to list suitable jobs from
  """
  integrationName: JobIntegrationNameForImportEnum
  search: String
}

"""
the result of loading Jobs from an extenral ATS system for the purpose of importing them into Flexhire
"""
type JobForIntegrationResults
  @ats(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Integration" }
    ]
  ) {
  error: Error
  results(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): JobForIntegrationConnection
}

type JobHireStats {
  appliedCount: Int
  clickedCount: Int
  hiredCount: Int
  interviewedCount: Int
  offeredCount: Int
  screenedCount: Int
  viewedCount: Int
}

input JobHireStatsFilters {
  fromDate: Date
  source: String
  toDate: Date
}

type JobImportStep {
  active: Boolean!
  completed: Boolean!
  title: String!
}

type JobIntegration implements Node
  @ats(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Integration" }
    ]
  ) {
  active: Boolean
  enabledByUser: Boolean

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  integrationName: String
  job: Job
  jobIntegrationProvider: JobIntegrationProvider
  platformName: String
  postingStatus: String
  publicationExpires: DateTime
  publishedJobUrl: String

  """
  internal DB ID of this record
  """
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")
}

enum JobIntegrationNameForImportEnum {
  dayforce
  greenhouse
  workable
  workday
}

"""
a service or platform that Flexhire can integrate job postings with
"""
type JobIntegrationProvider
  @ats(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Integration" }
    ]
  ) {
  """
  the one-time fee in USD to pay for each job for activating the integration
  """
  activationFeeUsd: Float
  advertising: Boolean!

  """
  the monthly fee in USD to pay for each job while the integration is active
  """
  monthlyFeeUsd: Float

  """
  the name of the external service or platform
  """
  name: String!

  """
  a list of actions that this integration supports
  """
  supportedActions: [String!]!
}

enum JobLevelEnum {
  c_level
  director
  head_of_department
  junior
  lead
  mid
  principal
  senior
  senior_director
  senior_vp
  vp
}

enum JobLocationTypeEnum {
  anywhere
  full_address
  job_timezone
  specific_countries
}

type JobQuestion implements Node
  @ats(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Screening" }
    ]
  ) {
  enabled: Boolean

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  job: Job
  maxDuration: Int
  ord: Int
  question: Question

  """
  internal DB ID of this record
  """
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")
  requiredToApply: Boolean
  source: QuestionSourceEnum
}

enum JobRoleEnum {
  """
  decision maker and internal point of contact for the job
  """
  owner

  """
  responsible for communication with applicants
  """
  recruiter

  """
  involved in reviewing applicants and leaving feedback
  """
  reviewer
}

type JobSkill implements Node {
  groupIndex: Int

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  name: String @deprecated(reason: "use skill.name instead")

  """
  internal DB ID of this record
  """
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")
  rawSkillId: Int @deprecated(reason: "use skill.rawId instead")
  required: Boolean
  requiredYears: Int
  skill: Skill

  """
  the current user's matching UserSkill, if any
  """
  userSkill: UserSkill
}

input JobSkillAttributes {
  groupIndex: Int
  id: ID
  name: String
  required: Boolean
  requiredYears: Int
  skillId: ID
}

enum JobStatus {
  """
  closed to hiring, logically deleted. Can be reopened
  """
  closed

  """
  logically deleted, invisible
  """
  deleted

  """
  new job that has not been opened yet
  """
  draft

  """
  new job that is being imported right now
  """
  importing

  """
  opened for hiring
  """
  opened

  """
  used to pre-fill new jobs
  """
  template
}

type JobSubtype implements Node {
  freelancerSubtype: FreelancerSubtype
  groupIndex: Int

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!

  """
  internal DB ID of this record
  """
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")
}

enum JobType {
  """
  for freelance jobs, usually paid hourly
  """
  freelance

  """
  for permanent jobs, usually paid with a fixed salary
  """
  permanent
}

"""
Autogenerated return type of JobUpdated.
"""
type JobUpdatedPayload {
  job: Job
}

input JobUserAttributes {
  id: ID!
  role: JobRoleEnum
}

"""
used when opening job links. Some job links are referral links
"""
union JobView = Job | Referral

input JobsFilters {
  """
  filter by firm using the firm's slug
  """
  firmSlug: String
  freelancerTypeId: ID
  internalIdentifier: String

  """
  filter by jobs where the current user is an interviewer or manager
  """
  interviewer: Boolean
  jobStatus: JobStatus
  order: SortOrder
  platformName: String
  search: String
  slug: String
  sortBy: JobsSortEnum
  status: JobStatus
  title: String
  user: JobUserAttributes
}

enum JobsSortEnum {
  """
  sort by age
  """
  age

  """
  sort by relevance
  """
  relevance

  """
  sort by name
  """
  title
}

"""
Autogenerated input type of JoinChatThread
"""
input JoinChatThreadInput {
  chatThreadId: ID

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of JoinChatThread.
"""
type JoinChatThreadPayload {
  chatThread: ChatThread

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

"""
Autogenerated input type of LeaveChatThread
"""
input LeaveChatThreadInput {
  chatThreadId: ID

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of LeaveChatThread.
"""
type LeaveChatThreadPayload {
  chatThread: ChatThread

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

"""
a magic link which can be used for deep linking to resources or various forms of auto-login
"""
type Link implements Node
  @api(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Utility" }
    ]
  ) {
  """
  if true, this link will automatically log the user in when opened
  """
  autoLogin: Boolean!

  """
  the chat thread this link is associated with, used for direct reply links
  """
  chatThread: ChatThread

  """
  the chat thread this link is associated with, used for direct reply links
  """
  chatUser: User

  """
  the email subscription this link is associated with, used for unsubscribe links
  """
  emailSubscription: EmailSubscription
  firm: Firm

  """
  the member this link is associated with, used for candidate links shared from the ATS
  """
  freelancer: User

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!

  """
  the job this link is associated with, used for links shared from the ATS
  """
  job: Job

  """
  the job application this link is associated with, used for links shared from the ATS
  """
  jobApplication: JobApplication

  """
  the type of link this is. This will affect what happens when the link is opened.
  """
  linkType: LinkTypeEnum

  """
  the token used to identify this link, part of the end-user URLs
  """
  token: String!
  unsubscribeFromAllEmails: Boolean!

  """
  the user this link is associated with, mainly for auto login purposes
  """
  user: User
}

enum LinkTypeEnum {
  candidate
  chat_thread
  chat_user
  disable_job_opportunities
  job_screening
  job_screening_external
  login
  unsubscribe
}

input LocationFilter {
  distanceMiles: Float
  distanceOriginLatitude: Float
  distanceOriginLongitude: Float
}

"""
Autogenerated input type of Login
"""
input LoginInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  jobSlug: String
  password: String!
  recaptchaToken: String
  referer: String
  refererUrl: String
  remember: Boolean
}

"""
Autogenerated return type of Login.
"""
type LoginPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  user: User
}

"""
Autogenerated input type of Logout
"""
input LogoutInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of Logout.
"""
type LogoutPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  configuration: Configuration
  errors: [Error!]
  user: User
}

"""
Autogenerated input type of MakeOffer
"""
input MakeOfferInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The contract to make an offer for
  """
  contractId: ID!

  """
  The message to send to the invitee; will also be saved for later use
  """
  invitationMessage: String
}

"""
Autogenerated return type of MakeOffer.
"""
type MakeOfferPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contracts: [Contract!]
  errors: [Error!]
}

input ManagedTeamsFilter {
  hasManagedTeam: Boolean
  managedTeamSizes: [String!]
}

"""
Autogenerated input type of MarkChatThreadRead
"""
input MarkChatThreadReadInput {
  chatThreadId: ID
  chatThreadRawId: Int @deprecated(reason: "only used in legacy frontend code")

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of MarkChatThreadRead.
"""
type MarkChatThreadReadPayload {
  chatThread: ChatThread

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: User
  errors: [Error!]
}

"""
Autogenerated input type of Masq
"""
input MasqInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userId: ID
  userRawId: Int @deprecated(reason: "only used by legacy frontend code")
}

"""
Autogenerated return type of Masq.
"""
type MasqPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  user: User
}

type Member {
  contract: Contract
  freelancer: User!
  job: Job
  jobApplication: JobApplication
}

enum MemberStatusEnum {
  """
  expired contract has been deleted
  """
  deleted

  """
  member has declined invitation to apply
  """
  freelancer_not_interested

  """
  The user has been hired
  """
  hired

  """
  The user has been invited to an interview
  """
  interview

  """
  member has started applying to the job
  """
  job_application_draft

  """
  member has been invited by the client to apply to the job
  """
  job_application_invited

  """
  member has sent the job application
  """
  job_application_sent

  """
  member has visited the job page
  """
  job_viewed

  """
  The user has been offered a job
  """
  offer

  """
  potential referrer or applicant for the job
  """
  potential

  """
  during the hiring process, the member has been rejected by the client or an offer has been withdrawn
  """
  rejected

  """
  The user has completed all requests
  """
  screening_completed
  screening_incomplete

  """
  The user has declined to complete requests
  """
  screening_rejected

  """
  The user has pending requests
  """
  screening_requested

  """
  The user has completed some but not all requests
  """
  screening_started
}

input MembersFilters {
  actionableOnly: Boolean
  hasVideoIntro: Boolean
  hiddenOnly: Boolean
  jobApplicationStatuses: [MemberStatusEnum!]
  jobId: ID
  name: String
  status: UserStatus
  statuses: [UserStatus!]
}

"""
represents a Money object with an amount and currency
"""
type Money
  @api(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Utility" }
    ]
  ) {
  """
  The amount of money in the given currency as an integer, expressed as 'cents'
  meaning the smallest whole unit of the currency.
  """
  cents: Int!

  """
  The currency code associated to this Money object
  """
  currency: Currency!

  """
  returns an equivalent money object in another currency, using the current exchange rate
  """
  exchangedTo(
    """
    the currency code to exchange this amount to
    """
    currency: String
  ): Money

  """
  The amount of money in the given currency formatted as a string
  """
  formatted(
    """
    if true, omits the cents from the formatted string regardless of the amount. This will return a rounded value.
    """
    noCents: Boolean

    """
    if true, omits the cents from the formatted string if the amount is a whole number
    """
    noCentsIfWhole: Boolean

    """
    if true, evaluates the field to null if the amount is zero
    """
    nullifyIfZero: Boolean
  ): String

  """
  The amount of money in the given currency as a floating point number
  """
  value: Float!
}

"""
a Money Input object
"""
input MoneyInput {
  currencyCode: String!
  value: Float!
}

type Mutation {
  """
  as a member, accept interview or offer
  """
  acceptContract(
    """
    Parameters for AcceptContract
    """
    input: AcceptContractInput!
  ): AcceptContractPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Team" }
      ]
    )

  """
  accepts job_application requests
  """
  acceptContractRequests(
    """
    Parameters for AcceptContractRequests
    """
    input: AcceptContractRequestsInput!
  ): AcceptContractRequestsPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Screening" }
      ]
    )

  """
  as a member, accept interview
  """
  acceptInterviewRequest(
    """
    Parameters for AcceptInterviewRequest
    """
    input: AcceptInterviewRequestInput!
  ): AcceptInterviewRequestPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Interview" }
      ]
    )

  """
  Add the given questions to an existing job
  """
  addQuestionsToJob(
    """
    Parameters for AddQuestionsToJob
    """
    input: AddQuestionsToJobInput!
  ): AddQuestionsToJobPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Screening" }
      ]
    )

  """
  create a pending job application or submit a job application
  """
  applyToJob(
    """
    Parameters for ApplyToJob
    """
    input: ApplyToJobInput!
  ): ApplyToJobPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Applicant" }
      ]
    )

  """
  approve payroll items by their IDs
  """
  approvePayrollItem(
    """
    Parameters for ApprovePayrollItem
    """
    input: ApprovePayrollItemInput!
  ): ApprovePayrollItemPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Payroll" }
      ]
    )
  approveTimeOffRequest(
    """
    Parameters for ApproveTimeOffRequest
    """
    input: ApproveTimeOffRequestInput!
  ): ApproveTimeOffRequestPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Payroll" }
      ]
    )

  """
  login via an auto-login link
  """
  autoLoginWithLink(
    """
    Parameters for AutoLoginWithLink
    """
    input: AutoLoginWithLinkInput!
  ): AutoLoginWithLinkPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Auth" }
      ]
    )
  bulkCheckoutInvoices(
    """
    Parameters for BulkCheckoutInvoices
    """
    input: BulkCheckoutInvoicesInput!
  ): BulkCheckoutInvoicesPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Billing" }
      ]
    )

  """
  Bulk add tags to questions
  """
  bulkTagQuestions(
    """
    Parameters for BulkTagQuestions
    """
    input: BulkTagQuestionsInput!
  ): BulkTagQuestionsPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Screening" }
      ]
    )

  """
  close an open job
  """
  closeJob(
    """
    Parameters for CloseJob
    """
    input: CloseJobInput!
  ): CloseJobPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Job" }
      ]
    )
  completeReference(
    """
    Parameters for CompleteReference
    """
    input: CompleteReferenceInput!
  ): CompleteReferencePayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Profile" }
      ]
    )
  completeSignature(
    """
    Parameters for CompleteSignature
    """
    input: CompleteSignatureInput!
  ): CompleteSignaturePayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Team" }
      ]
    )

  """
  signal S3 upload completion of a video
  """
  completeVideoUpload(
    """
    Parameters for CompleteVideoUpload
    """
    input: CompleteVideoUploadInput!
  ): CompleteVideoUploadPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Profile" }
      ]
    )
  confirmEmail(
    """
    Parameters for ConfirmEmail
    """
    input: ConfirmEmailInput!
  ): ConfirmEmailPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Auth" }
      ]
    )
  createAnswer(
    """
    Parameters for CreateAnswer
    """
    input: CreateAnswerInput!
  ): CreateAnswerPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Screening" }
      ]
    )

  """
  creates a new API key for the current user
  """
  createApiKey(
    """
    Parameters for CreateApiKey
    """
    input: CreateApiKeyInput!
  ): CreateApiKeyPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Integration" }
      ]
    )

  """
  submits a background check request for a specific person
  """
  createBackgroundCheck(
    """
    Parameters for CreateBackgroundCheck
    """
    input: CreateBackgroundCheckInput!
  ): CreateBackgroundCheckPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Team" }
      ]
    )
  createBlogPost(
    """
    Parameters for CreateBlogPost
    """
    input: CreateBlogPostInput!
  ): CreateBlogPostPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Blog" }
      ]
    )
  createChatThread(
    """
    Parameters for CreateChatThread
    """
    input: CreateChatThreadInput!
  ): CreateChatThreadPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Chat" }
      ]
    )
  createCustomSkill(
    """
    Parameters for CreateCustomSkill
    """
    input: CreateCustomSkillInput!
  ): CreateCustomSkillPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Job" }
      ]
    )
  createExpense(
    """
    Parameters for CreateExpense
    """
    input: CreateExpenseInput!
  ): CreateExpensePayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Payroll" }
      ]
    )

  """
  connect an external HRIS or ATS platform to a Flexhire firm
  """
  createFirmIntegration(
    """
    Parameters for CreateFirmIntegration
    """
    input: CreateFirmIntegrationInput!
  ): CreateFirmIntegrationPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Integration" }
      ]
    )
  createLink(
    """
    Parameters for CreateLink
    """
    input: CreateLinkInput!
  ): CreateLinkPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Integration" }
      ]
    )

  """
  creates a draft offer (contract); use UpdateContract to make changes to the offer, and use MakeOffer to send the offer
  """
  createOfferDraft(
    """
    Parameters for CreateOfferDraft
    """
    input: CreateOfferDraftInput!
  ): CreateOfferDraftPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Team" }
      ]
    )
  createPaymentMethod(
    """
    Parameters for CreatePaymentMethod
    """
    input: CreatePaymentMethodInput!
  ): CreatePaymentMethodPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Billing" }
      ]
    )

  """
  as a member, submit or update a code test
  """
  createProjectSubmission(
    """
    Parameters for CreateProjectSubmission
    """
    input: CreateProjectSubmissionInput!
  ): CreateProjectSubmissionPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Screening" }
      ]
    )
  createQuestion(
    """
    Parameters for CreateQuestion
    """
    input: CreateQuestionInput!
  ): CreateQuestionPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Screening" }
      ]
    )

  """
  as a member, attach a resume to your profile
  """
  createResume(
    """
    Parameters for CreateResume
    """
    input: CreateResumeInput!
  ): CreateResumePayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Profile" }
      ]
    )
  createSignableDocumentTemplate(
    """
    Parameters for CreateSignableDocumentTemplate
    """
    input: CreateSignableDocumentTemplateInput!
  ): CreateSignableDocumentTemplatePayload
  createSignableDocuments(
    """
    Parameters for CreateSignableDocuments
    """
    input: CreateSignableDocumentsInput!
  ): CreateSignableDocumentsPayload

  """
  generate and fetch stripe setup url; single use
  """
  createStripeSetupUrl(
    """
    Parameters for CreateStripeSetupUrl
    """
    input: CreateStripeSetupUrlInput!
  ): CreateStripeSetupUrlPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Payment" }
      ]
    )

  """
  create a tag for later use to categorize teams or screening questions
  """
  createTag(
    """
    Parameters for CreateTag
    """
    input: CreateTagInput!
  ): CreateTagPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Screening" }
      ]
    )
  createTimeOffRequest(
    """
    Parameters for CreateTimeOffRequest
    """
    input: CreateTimeOffRequestInput!
  ): CreateTimeOffRequestPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Payroll" }
      ]
    )
  createTimesheet(
    """
    Parameters for CreateTimesheet
    """
    input: CreateTimesheetInput!
  ): CreateTimesheetPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Payroll" }
      ]
    )
  createTimesheetEntry(
    """
    Parameters for CreateTimesheetEntry
    """
    input: CreateTimesheetEntryInput!
  ): CreateTimesheetEntryPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Payroll" }
      ]
    )

  """
  create a pending video
  """
  createVideo(
    """
    Parameters for CreateVideo
    """
    input: CreateVideoInput!
  ): CreateVideoPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Profile" }
      ]
    )

  """
  creates a new webhook to send events related to the current user's firm originating from Flexhire to an external service
  """
  createWebhook(
    """
    Parameters for CreateWebhook
    """
    input: CreateWebhookInput!
  ): CreateWebhookPayload
    @api(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Integration" }
      ]
    )

  """
  deactivates a payout method
  """
  deactivatePayoutMethod(
    """
    Parameters for DeactivatePayoutMethod
    """
    input: DeactivatePayoutMethodInput!
  ): DeactivatePayoutMethodPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Payment" }
      ]
    )
  deleteAnswer(
    """
    Parameters for DeleteAnswer
    """
    input: DeleteAnswerInput!
  ): DeleteAnswerPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Screening" }
      ]
    )

  """
  deletes an API key for the current user
  """
  deleteApiKey(
    """
    Parameters for DeleteApiKey
    """
    input: DeleteApiKeyInput!
  ): DeleteApiKeyPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Integration" }
      ]
    )
  deleteBlogPost(
    """
    Parameters for DeleteBlogPost
    """
    input: DeleteBlogPostInput!
  ): DeleteBlogPostPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Blog" }
      ]
    )
  deleteChatMessage(
    """
    Parameters for DeleteChatMessage
    """
    input: DeleteChatMessageInput!
  ): DeleteChatMessagePayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Chat" }
      ]
    )

  """
  rejects invitation or marks an expired contract as deleted
  """
  deleteContract(
    """
    Parameters for DeleteContract
    """
    input: DeleteContractInput!
  ): DeleteContractPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Team" }
      ]
    )
  deleteFirmIntegration(
    """
    Parameters for DeleteFirmIntegration
    """
    input: DeleteFirmIntegrationInput!
  ): DeleteFirmIntegrationPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Integration" }
      ]
    )

  """
  delete a closed or draft job
  """
  deleteJob(
    """
    Parameters for DeleteJob
    """
    input: DeleteJobInput!
  ): DeleteJobPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Job" }
      ]
    )

  """
  marks an expired or rejected job application as deleted
  """
  deleteJobApplication(
    """
    Parameters for DeleteJobApplication
    """
    input: DeleteJobApplicationInput!
  ): DeleteJobApplicationPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Applicant" }
      ]
    )

  """
  deletes an existing payment method for the current user's firm
  """
  deletePaymentMethod(
    """
    Parameters for DeletePaymentMethod
    """
    input: DeletePaymentMethodInput!
  ): DeletePaymentMethodPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Billing" }
      ]
    )

  """
  as a member, delete a code test submission
  """
  deleteProjectSubmission(
    """
    Parameters for DeleteProjectSubmission
    """
    input: DeleteProjectSubmissionInput!
  ): DeleteProjectSubmissionPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Screening" }
      ]
    )
  deleteQuestion(
    """
    Parameters for DeleteQuestion
    """
    input: DeleteQuestionInput!
  ): DeleteQuestionPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Screening" }
      ]
    )
  deleteReference(
    """
    Parameters for DeleteReference
    """
    input: DeleteReferenceInput!
  ): DeleteReferencePayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Profile" }
      ]
    )
  deleteSignableDocumentTemplate(
    """
    Parameters for DeleteSignableDocumentTemplate
    """
    input: DeleteSignableDocumentTemplateInput!
  ): DeleteSignableDocumentTemplatePayload

  """
  Delete an existing tag
  """
  deleteTag(
    """
    Parameters for DeleteTag
    """
    input: DeleteTagInput!
  ): DeleteTagPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Screening" }
      ]
    )
  deleteTimeOffRequest(
    """
    Parameters for DeleteTimeOffRequest
    """
    input: DeleteTimeOffRequestInput!
  ): DeleteTimeOffRequestPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Payroll" }
      ]
    )
  deleteTimesheet(
    """
    Parameters for DeleteTimesheet
    """
    input: DeleteTimesheetInput!
  ): DeleteTimesheetPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Payroll" }
      ]
    )
  deleteTimesheetEntry(
    """
    Parameters for DeleteTimesheetEntry
    """
    input: DeleteTimesheetEntryInput!
  ): DeleteTimesheetEntryPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Payroll" }
      ]
    )

  """
  deletes an account
  """
  deleteUser(
    """
    Parameters for DeleteUser
    """
    input: DeleteUserInput!
  ): DeleteUserPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Auth" }
      ]
    )

  """
  delete a video
  """
  deleteVideo(
    """
    Parameters for DeleteVideo
    """
    input: DeleteVideoInput!
  ): DeleteVideoPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Profile" }
      ]
    )

  """
  deletes an existing webhook
  """
  deleteWebhook(
    """
    Parameters for DeleteWebhook
    """
    input: DeleteWebhookInput!
  ): DeleteWebhookPayload
    @api(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Integration" }
      ]
    )

  """
  disable flag open_to_opportunities present in user profile from a Link
  """
  disableJobOpportunities(
    """
    Parameters for DisableJobOpportunities
    """
    input: DisableJobOpportunitiesInput!
  ): DisableJobOpportunitiesPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Candidate" }
      ]
    )

  """
  Evaluate a video or answer submitted by an applicant to a job. The rating and
  notes will be displayed on the evaluation UI to the current user's colleagues
  """
  evaluateAnswer(
    """
    Parameters for EvaluateAnswer
    """
    input: EvaluateAnswerInput!
  ): EvaluateAnswerPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Screening" }
      ]
    )

  """
  trigger AI evaluation for a job application
  """
  evaluateJobApplicationWithAi(
    """
    Parameters for EvaluateJobApplicationWithAI
    """
    input: EvaluateJobApplicationWithAIInput!
  ): EvaluateJobApplicationWithAIPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Screening" }
      ]
    )

  """
  terminate an active or paused contract
  """
  expireContract(
    """
    Parameters for ExpireContract
    """
    input: ExpireContractInput!
  ): ExpireContractPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Team" }
      ]
    )

  """
  exports a single work report into a CSV file
  """
  exportWorkReportCsv(
    """
    Parameters for ExportWorkReportCsv
    """
    input: ExportWorkReportCsvInput!
  ): ExportWorkReportCsvPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Payroll" }
      ]
    )

  """
  exports multiple work reports into a CSV file
  """
  exportWorkReportsCsv(
    """
    Parameters for ExportWorkReportsCsv
    """
    input: ExportWorkReportsCsvInput!
  ): ExportWorkReportsCsvPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Payroll" }
      ]
    )

  """
  generate and fetch stripe express dashboard login url
  """
  fetchStripeLoginUrl(
    """
    Parameters for FetchStripeLoginUrl
    """
    input: FetchStripeLoginUrlInput!
  ): FetchStripeLoginUrlPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Payment" }
      ]
    )
  forgotPassword(
    """
    Parameters for ForgotPassword
    """
    input: ForgotPasswordInput!
  ): ForgotPasswordPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Auth" }
      ]
    )
  getMergeLinkToken(
    """
    Parameters for GetMergeLinkToken
    """
    input: GetMergeLinkTokenInput!
  ): GetMergeLinkTokenPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Integration" }
      ]
    )
  getSignatureDocumentUrl(
    """
    Parameters for GetSignatureDocumentUrl
    """
    input: GetSignatureDocumentUrlInput!
  ): GetSignatureDocumentUrlPayload

  """
  grants a one-time bonus for a contract
  """
  grantBonus(
    """
    Parameters for GrantBonus
    """
    input: GrantBonusInput!
  ): GrantBonusPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Payroll" }
      ]
    )
  importJobs(
    """
    Parameters for ImportJobs
    """
    input: ImportJobsInput!
  ): ImportJobsPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Integration" }
      ]
    )

  """
  Sets whether the current user has dismissed a chat automation. If dismissed,
  the automation will not be shown to the user again.
  """
  interactWithChatAutomation(
    """
    Parameters for InteractWithChatAutomation
    """
    input: InteractWithChatAutomationInput!
  ): InteractWithChatAutomationPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Applicant" }
      ]
    )
  inviteFriend(
    """
    Parameters for InviteFriend
    """
    input: InviteFriendInput!
  ): InviteFriendPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Profile" }
      ]
    )

  """
  invoice the specified payroll items now, instead of waiting until the auto-schedule does it
  """
  invoicePayrollItems(
    """
    Parameters for InvoicePayrollItems
    """
    input: InvoicePayrollItemsInput!
  ): InvoicePayrollItemsPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Billing" }
      ]
    )

  """
  join a chat thread that you can see but you don't participate in
  """
  joinChatThread(
    """
    Parameters for JoinChatThread
    """
    input: JoinChatThreadInput!
  ): JoinChatThreadPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Chat" }
      ]
    )

  """
  leave a group chat thread that you participate in
  """
  leaveChatThread(
    """
    Parameters for LeaveChatThread
    """
    input: LeaveChatThreadInput!
  ): LeaveChatThreadPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Chat" }
      ]
    )
  login(
    """
    Parameters for Login
    """
    input: LoginInput!
  ): LoginPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Auth" }
      ]
    )
  logout(
    """
    Parameters for Logout
    """
    input: LogoutInput!
  ): LogoutPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Auth" }
      ]
    )

  """
  make an offer to an existing flexhire user or invite an off-platform person
  """
  makeOffer(
    """
    Parameters for MakeOffer
    """
    input: MakeOfferInput!
  ): MakeOfferPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Team" }
      ]
    )
  markChatThreadRead(
    """
    Parameters for MarkChatThreadRead
    """
    input: MarkChatThreadReadInput!
  ): MarkChatThreadReadPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Chat" }
      ]
    )

  """
  become another user
  """
  masq(
    """
    Parameters for Masq
    """
    input: MasqInput!
  ): MasqPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Auth" }
      ]
    )

  """
  Set a chat thread as muted so notifications are not sent for new messages
  """
  muteChatThread(
    """
    Parameters for MuteChatThread
    """
    input: MuteChatThreadInput!
  ): MuteChatThreadPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Chat" }
      ]
    )
  oauthLogin(
    """
    Parameters for OauthLogin
    """
    input: OauthLoginInput!
  ): OauthLoginPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Auth" }
      ]
    )
  oauthLoginAccessToken(
    """
    Parameters for OauthLoginAccessToken
    """
    input: OauthLoginAccessTokenInput!
  ): OauthLoginAccessTokenPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Auth" }
      ]
    )

  """
  pause an active contract
  """
  pauseContract(
    """
    Parameters for PauseContract
    """
    input: PauseContractInput!
  ): PauseContractPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Team" }
      ]
    )

  """
  preview a signature request for a invite/offer
  """
  previewSignatureRequest(
    """
    Parameters for PreviewSignatureRequest
    """
    input: PreviewSignatureRequestInput!
  ): PreviewSignatureRequestPayload

  """
  query a submitted payroll item
  """
  queryPayrollItem(
    """
    Parameters for QueryPayrollItem
    """
    input: QueryPayrollItemInput!
  ): QueryPayrollItemPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Payroll" }
      ]
    )

  """
  Call this after confirming a Stripe payment intent on the client side to
  trigger a refresh of the payment status on the backend and also get updated
  payment information.
  """
  refreshPaymentStatus(
    """
    Parameters for RefreshPaymentStatus
    """
    input: RefreshPaymentStatusInput!
  ): RefreshPaymentStatusPayload
  refreshPayoutMethodRequirements(
    """
    Parameters for RefreshPayoutMethodRequirements
    """
    input: RefreshPayoutMethodRequirementsInput!
  ): RefreshPayoutMethodRequirementsPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Payment" }
      ]
    )
  registerFrontendVersion(
    """
    Parameters for RegisterFrontendVersion
    """
    input: RegisterFrontendVersionInput!
  ): RegisterFrontendVersionPayload

  """
  rejects a contract as a member
  """
  rejectContract(
    """
    Parameters for RejectContract
    """
    input: RejectContractInput!
  ): RejectContractPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Team" }
      ]
    )

  """
  rejects contract requests
  """
  rejectContractRequests(
    """
    Parameters for RejectContractRequests
    """
    input: RejectContractRequestsInput!
  ): RejectContractRequestsPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Screening" }
      ]
    )

  """
  rejects a freelancer on the hire pipeline, marking them as not suited to be hired for the job
  """
  rejectFreelancer(
    """
    Parameters for RejectFreelancer
    """
    input: RejectFreelancerInput!
  ): RejectFreelancerPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Applicant" }
      ]
    )

  """
  rejects an interview request as a member
  """
  rejectInterviewRequest(
    """
    Parameters for RejectInterviewRequest
    """
    input: RejectInterviewRequestInput!
  ): RejectInterviewRequestPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Interview" }
      ]
    )
  rejectPayrollItem(
    """
    Parameters for RejectPayrollItem
    """
    input: RejectPayrollItemInput!
  ): RejectPayrollItemPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Payroll" }
      ]
    )
  rejectTimeOffRequest(
    """
    Parameters for RejectTimeOffRequest
    """
    input: RejectTimeOffRequestInput!
  ): RejectTimeOffRequestPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Payroll" }
      ]
    )
  removeSignableDocument(
    """
    Parameters for RemoveSignableDocument
    """
    input: RemoveSignableDocumentInput!
  ): RemoveSignableDocumentPayload
    @deprecated(reason: "experimental. Not working yet")

  """
  request an interview to an applicant
  """
  requestInterview(
    """
    Parameters for RequestInterview
    """
    input: RequestInterviewInput!
  ): RequestInterviewPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Interview" }
      ]
    )
  requestReference(
    """
    Parameters for RequestReference
    """
    input: RequestReferenceInput!
  ): RequestReferencePayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Profile" }
      ]
    )

  """
  resends the invitation email for the given invitation contract
  """
  resendInvitationEmail(
    """
    Parameters for ResendInvitationEmail
    """
    input: ResendInvitationEmailInput!
  ): ResendInvitationEmailPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Team" }
      ]
    )
  resendReferenceRequest(
    """
    Parameters for ResendReferenceRequest
    """
    input: ResendReferenceRequestInput!
  ): ResendReferenceRequestPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Profile" }
      ]
    )
  resetPassword(
    """
    Parameters for ResetPassword
    """
    input: ResetPasswordInput!
  ): ResetPasswordPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Auth" }
      ]
    )

  """
  resumes a paused contract
  """
  resumeContract(
    """
    Parameters for ResumeContract
    """
    input: ResumeContractInput!
  ): ResumeContractPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Team" }
      ]
    )

  """
  revokes an offer, moving the contract to offer_revoked status
  """
  revokeOffer(
    """
    Parameters for RevokeOffer
    """
    input: RevokeOfferInput!
  ): RevokeOfferPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Team" }
      ]
    )

  """
  send a chat message. If sent without an account, the user is logged into a 'guest' type account automatically
  """
  sendChatMessage(
    """
    Parameters for SendChatMessage
    """
    input: SendChatMessageInput!
  ): SendChatMessagePayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Chat" }
      ]
    )
  sendConfirmationEmail(
    """
    Parameters for SendConfirmationEmail
    """
    input: SendConfirmationEmailInput!
  ): SendConfirmationEmailPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Auth" }
      ]
    )

  """
  adds feedback for the client's team on a potential hire
  """
  sendContractRating(
    """
    Parameters for SendContractRating
    """
    input: SendContractRatingInput!
  ): SendContractRatingPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Screening" }
      ]
    )

  """
  send questions or a code test to a potential hire
  """
  sendContractRequests(
    """
    Parameters for SendContractRequests
    """
    input: SendContractRequestsInput!
  ): SendContractRequestsPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Screening" }
      ]
    )
  sendJobOpportunity(
    """
    Parameters for SendJobOpportunity
    """
    input: SendJobOpportunityInput!
  ): SendJobOpportunityPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Candidate" }
      ]
    )

  """
  as a member, set up a crypto wallet address to get paid
  """
  setupCryptoWallet(
    """
    Parameters for SetupCryptoWallet
    """
    input: SetupCryptoWalletInput!
  ): SetupCryptoWalletPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Payment" }
      ]
    )
  setupPaymentMethod(
    """
    Parameters for SetupPaymentMethod
    """
    input: SetupPaymentMethodInput!
  ): SetupPaymentMethodPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Billing" }
      ]
    )

  """
  as a member, set up a payoneer account to get paid
  """
  setupPayoneer(
    """
    Parameters for SetupPayoneer
    """
    input: SetupPayoneerInput!
  ): SetupPayoneerPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Payment" }
      ]
    )

  """
  as a member, set up a stripe connect account to get paid
  """
  setupStripeConnectedAccount(
    """
    Parameters for SetupStripeConnectedAccount
    """
    input: SetupStripeConnectedAccountInput!
  ): SetupStripeConnectedAccountPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Payment" }
      ]
    )

  """
  as a member, set up a Wise recipient to get paid
  """
  setupWise(
    """
    Parameters for SetupWise
    """
    input: SetupWiseInput!
  ): SetupWisePayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Payment" }
      ]
    )
  signup(
    """
    Parameters for Signup
    """
    input: SignupInput!
  ): SignupPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Auth" }
      ]
    )

  """
  skip a suggested candidate for a job, to replace his slot with another candidate
  """
  skipCandidate(
    """
    Parameters for SkipCandidate
    """
    input: SkipCandidateInput!
  ): SkipCandidatePayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Candidate" }
      ]
    )
  slackAccessToken(
    """
    Parameters for SlackAccessToken
    """
    input: SlackAccessTokenInput!
  ): SlackAccessTokenPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Integration" }
      ]
    )
  submitApplication(
    """
    Parameters for SubmitApplication
    """
    input: SubmitApplicationInput!
  ): SubmitApplicationPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Profile" }
      ]
    )
  submitPayoutMethodRequirements(
    """
    Parameters for SubmitPayoutMethodRequirements
    """
    input: SubmitPayoutMethodRequirementsInput!
  ): SubmitPayoutMethodRequirementsPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Payment" }
      ]
    )
  submitPayrollItem(
    """
    Parameters for SubmitPayrollItem
    """
    input: SubmitPayrollItemInput!
  ): SubmitPayrollItemPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Payroll" }
      ]
    )
  submitProfile(
    """
    Parameters for SubmitProfile
    """
    input: SubmitProfileInput!
  ): SubmitProfilePayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Profile" }
      ]
    )
  submitVerification(
    """
    Parameters for SubmitVerification
    """
    input: SubmitVerificationInput!
  ): SubmitVerificationPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Profile" }
      ]
    )

  """
  toggle bookmarked status for members on the hire pipeline
  """
  toggleBookmarkFreelancer(
    """
    Parameters for ToggleBookmarkFreelancer
    """
    input: ToggleBookmarkFreelancerInput!
  ): ToggleBookmarkFreelancerPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Candidate" }
      ]
    )
  trackBlogPostView(
    """
    Parameters for TrackBlogPostView
    """
    input: TrackBlogPostViewInput!
  ): TrackBlogPostViewPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Blog" }
      ]
    )
  twitterAccessToken(
    """
    Parameters for TwitterAccessToken
    """
    input: TwitterAccessTokenInput!
  ): TwitterAccessTokenPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Auth" }
      ]
    )
  twitterRequestToken(
    """
    Parameters for TwitterRequestToken
    """
    input: TwitterRequestTokenInput!
  ): TwitterRequestTokenPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Auth" }
      ]
    )

  """
  unapprove payroll item by its ID, before it is invoiced
  """
  unapprovePayrollItem(
    """
    Parameters for UnapprovePayrollItem
    """
    input: UnapprovePayrollItemInput!
  ): UnapprovePayrollItemPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Payroll" }
      ]
    )
  uninstallSlackIntegration(
    """
    Parameters for UninstallSlackIntegration
    """
    input: UninstallSlackIntegrationInput!
  ): UninstallSlackIntegrationPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Integration" }
      ]
    )

  """
  undo any masq operations for this session
  """
  unmasq(
    """
    Parameters for Unmasq
    """
    input: UnmasqInput!
  ): UnmasqPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Auth" }
      ]
    )

  """
  unsubscribe current user from email subscription
  """
  unsubscribe(
    """
    Parameters for Unsubscribe
    """
    input: UnsubscribeInput!
  ): UnsubscribePayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Auth" }
      ]
    )
  updateBlogPost(
    """
    Parameters for UpdateBlogPost
    """
    input: UpdateBlogPostInput!
  ): UpdateBlogPostPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Blog" }
      ]
    )

  """
  update existing bonus data
  """
  updateBonus(
    """
    Parameters for UpdateBonus
    """
    input: UpdateBonusInput!
  ): UpdateBonusPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Payroll" }
      ]
    )
  updateChatMessage(
    """
    Parameters for UpdateChatMessage
    """
    input: UpdateChatMessageInput!
  ): UpdateChatMessagePayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Chat" }
      ]
    )
  updateChatThread(
    """
    Parameters for UpdateChatThread
    """
    input: UpdateChatThreadInput!
  ): UpdateChatThreadPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Chat" }
      ]
    )

  """
  update a running contract
  """
  updateContract(
    """
    Parameters for UpdateContract
    """
    input: UpdateContractInput!
  ): UpdateContractPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Team" }
      ]
    )

  """
  update multiple contracts
  """
  updateContracts(
    """
    Parameters for UpdateContracts
    """
    input: UpdateContractsInput!
  ): UpdateContractsPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Team" }
      ]
    )
  updateEmailSubscription(
    """
    Parameters for UpdateEmailSubscription
    """
    input: UpdateEmailSubscriptionInput!
  ): UpdateEmailSubscriptionPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Profile" }
      ]
    )

  """
  update a firm
  """
  updateFirm(
    """
    Parameters for UpdateFirm
    """
    input: UpdateFirmInput!
  ): UpdateFirmPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Team" }
      ]
    )

  """
  update a job application
  """
  updateJobApplication(
    """
    Parameters for UpdateJobApplication
    """
    input: UpdateJobApplicationInput!
  ): UpdateJobApplicationPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Applicant" }
      ]
    )

  """
  update automated messaging configuration for a job
  """
  updateJobAutomatedMessaging(
    """
    Parameters for UpdateJobAutomatedMessaging
    """
    input: UpdateJobAutomatedMessagingInput!
  ): UpdateJobAutomatedMessagingPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Job" }
      ]
    )

  """
  update details of a job
  """
  updateJobDetails(
    """
    Parameters for UpdateJobDetails
    """
    input: UpdateJobDetailsInput!
  ): UpdateJobDetailsPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Job" }
      ]
    )

  """
  update screening configuration for a job
  """
  updateJobScreening(
    """
    Parameters for UpdateJobScreening
    """
    input: UpdateJobScreeningInput!
  ): UpdateJobScreeningPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Job" }
      ]
    )

  """
  update sourcing configuration for a job
  """
  updateJobSourcing(
    """
    Parameters for UpdateJobSourcing
    """
    input: UpdateJobSourcingInput!
  ): UpdateJobSourcingPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Job" }
      ]
    )

  """
  as a customer, update an existing payment method
  """
  updatePaymentMethod(
    """
    Parameters for UpdatePaymentMethod
    """
    input: UpdatePaymentMethodInput!
  ): UpdatePaymentMethodPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Billing" }
      ]
    )

  """
  as a member, update an existing payout method
  """
  updatePayoutMethod(
    """
    Parameters for UpdatePayoutMethod
    """
    input: UpdatePayoutMethodInput!
  ): UpdatePayoutMethodPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Payment" }
      ]
    )

  """
  as a member, submit or update a code test
  """
  updateProjectSubmission(
    """
    Parameters for UpdateProjectSubmission
    """
    input: UpdateProjectSubmissionInput!
  ): UpdateProjectSubmissionPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Screening" }
      ]
    )

  """
  Edit a screening question
  """
  updateQuestion(
    """
    Parameters for UpdateQuestion
    """
    input: UpdateQuestionInput!
  ): UpdateQuestionPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Screening" }
      ]
    )
  updateSalary(
    """
    Parameters for UpdateSalary
    """
    input: UpdateSalaryInput!
  ): UpdateSalaryPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Payroll" }
      ]
    )

  """
  Update an existing tag
  """
  updateTag(
    """
    Parameters for UpdateTag
    """
    input: UpdateTagInput!
  ): UpdateTagPayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Screening" }
      ]
    )
  updateTimeOffRequest(
    """
    Parameters for UpdateTimeOffRequest
    """
    input: UpdateTimeOffRequestInput!
  ): UpdateTimeOffRequestPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Payroll" }
      ]
    )
  updateTimesheet(
    """
    Parameters for UpdateTimesheet
    """
    input: UpdateTimesheetInput!
  ): UpdateTimesheetPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Payroll" }
      ]
    )
  updateTimesheetEntry(
    """
    Parameters for UpdateTimesheetEntry
    """
    input: UpdateTimesheetEntryInput!
  ): UpdateTimesheetEntryPayload
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Payroll" }
      ]
    )
  updateUnsubscribedFromAllEmails(
    """
    Parameters for UpdateUnsubscribedFromAllEmails
    """
    input: UpdateUnsubscribedFromAllEmailsInput!
  ): UpdateUnsubscribedFromAllEmailsPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Profile" }
      ]
    )

  """
  update a user
  """
  updateUser(
    """
    Parameters for UpdateUser
    """
    input: UpdateUserInput!
  ): UpdateUserPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Profile" }
      ]
    )

  """
  update settings of a video
  """
  updateVideo(
    """
    Parameters for UpdateVideo
    """
    input: UpdateVideoInput!
  ): UpdateVideoPayload
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Profile" }
      ]
    )
  updateWebhook(
    """
    Parameters for UpdateWebhook
    """
    input: UpdateWebhookInput!
  ): UpdateWebhookPayload
    @api(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Integration" }
      ]
    )
  uploadCandidateResume(
    """
    Parameters for UploadCandidateResume
    """
    input: UploadCandidateResumeInput!
  ): UploadCandidateResumePayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Candidate" }
      ]
    )

  """
  receive linkedin's HTML and cookies from Flexgrab extension
  """
  uploadLinkedinProfile(
    """
    Parameters for UploadLinkedinProfile
    """
    input: UploadLinkedinProfileInput!
  ): UploadLinkedinProfilePayload
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Candidate" }
      ]
    )
}

"""
Autogenerated input type of MuteChatThread
"""
input MuteChatThreadInput {
  chatThreadId: ID

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  muted: Boolean!
}

"""
Autogenerated return type of MuteChatThread.
"""
type MuteChatThreadPayload {
  chatThread: ChatThread

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

enum NetFeedbackEnum {
  negative
  neutral
  positive
}

"""
An object with an ID.
"""
interface Node {
  """
  ID of the object.
  """
  id: ID!
}

"""
Autogenerated input type of OauthLoginAccessToken
"""
input OauthLoginAccessTokenInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String
  provider: OauthProviderNameEnum!
}

"""
Autogenerated return type of OauthLoginAccessToken.
"""
type OauthLoginAccessTokenPayload {
  accessToken: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

"""
Autogenerated input type of OauthLogin
"""
input OauthLoginInput {
  accessToken: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  provider: OauthProviderNameEnum!
}

"""
Autogenerated return type of OauthLogin.
"""
type OauthLoginPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  user: User
}

enum OauthProviderNameEnum {
  github
  google
  linkedin
}

enum OfficePolicyEnum {
  hybrid
  in_office
  remote
}

"""
a key/value pair that acts as an option for a select field
"""
type Option {
  label: String!
  value: String!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type PaidTimeOffPreview {
  approvedDaysOff: Int
  nextPeriodDaysOff: Int
  requestDaysOff: Int
}

input PaidTimeOffPreviewAttributes {
  contractId: ID!
  endDate: Date!
  startDate: Date!
}

"""
a key/value pair
"""
input PairInput {
  key: String!
  value: String
}

"""
Autogenerated input type of PauseContract
"""
input PauseContractInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID!
}

"""
Autogenerated return type of PauseContract.
"""
type PauseContractPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
}

"""
an aggregated payment to a member within a Flexhire invoice
"""
type Paycheck implements Node {
  assumedClientPaymentCompletionAt: DateTime
  assumedClientPaymentInitiationAt: DateTime
  createdAt: DateTime
  expectedPayoutAmount: Money
  feeMode: FeeModeEnum

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  invoice: Invoice
  itemNum: Int
  paidOutAt: DateTime
  payrollItems: [PayrollItem!]
  status: PaycheckStatusEnum
  totalToPayFreelancer: Money
  user: User
}

"""
The connection type for Paycheck.
"""
type PaycheckConnection {
  """
  A list of edges.
  """
  edges: [PaycheckEdge]

  """
  A list of nodes.
  """
  nodes: [Paycheck]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type PaycheckEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Paycheck
}

enum PaycheckStatusEnum
  @hris(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Payroll" }
    ]
  ) {
  """
  the member could not be paid
  """
  failed

  """
  the member has been paid
  """
  paid

  """
  the payment is a prospect / forecast
  """
  pending

  """
  the payment has been prepared
  """
  ready
}

input PaychecksFilters {
  status: PaycheckStatusEnum!
}

type PaymentMethod implements Node {
  achAccountNumber: String
    @deprecated(reason: "use bankTransferDetails instead")
  achRoutingNumber: String
    @deprecated(reason: "use bankTransferDetails instead")
  amountAvailable: Money
  bankTransferDetails: BankTransferDetails
  bic: String @deprecated(reason: "use bankTransferDetails instead")
  canContinueSetup: Boolean
  cardholderName: String
  currency: Currency
  customerId: String
  default: Boolean!
  expMonth: Int
  expYear: Int
  firm: Firm
  iban: String @deprecated(reason: "use bankTransferDetails instead")

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  institutionName: String
  isManualTransfer: Boolean
  mask: String
  name: String
  paymentMethodType: PaymentMethodTypeLiteral
  paymentMethodTypeHumanized: String

  """
  internal DB ID of this record
  """
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")
  sessionId: String
  status: PaymentMethodStatusEnum
  swiftCode: String @deprecated(reason: "use bankTransferDetails instead")
  token: String
  user: User
}

enum PaymentMethodStatusEnum {
  active
  deleted
  pending
}

enum PaymentMethodTypeLiteral {
  ach_credit_transfer
  balance
  bank_transfer
  card
  plaid_link
  sepa_debit
  us_bank_account
}

enum PaymentModeEnum
  @hris(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Payroll" }
    ]
  ) {
  """
  work reports will have a rate and the salary is based on them
  """
  pay_work_reports

  """
  payroll is disabled (only use this for filtering)
  """
  payments_disabled

  """
  the salary is a fixed periodic amount
  """
  salary
}

type Payout implements Node
  @talent(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Payment" }
    ]
  ) {
  amount: Money
  amountPaidAfterFees: Money
  amountPaidBeforeFees: Money
  assumedCompletionAt: DateTime
  assumedInitiationAt: DateTime
  createdAt: DateTime
  cycleTimestamp: DateTime
  description: String
  exchangeRate: InvoiceExchangeRate
  externallySuccessfulAt: DateTime
  fee: Money
  feeMode: PayoutFeeModeEnum
  fundingAmount: Money
  fundsAvailableOn: DateTime

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  initiatedAt: DateTime
  itemNum: Int
  paycheck: Paycheck
  payoutMethod: PayoutMethod
  payrollItem: PayrollItem
  payrollItems: [PayrollItem!]
  pipelineStatus: PayoutPipelineStatusEnum
  status: PayoutStatusEnum
  userPaymentId: String
}

"""
The connection type for Payout.
"""
type PayoutConnection {
  """
  A list of edges.
  """
  edges: [PayoutEdge]

  """
  A list of nodes.
  """
  nodes: [Payout]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type PayoutEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Payout
}

enum PayoutFeeModeEnum {
  customer_pays_fee
  flexhire_pays_fee
  recipient_pays_fee
}

type PayoutMethod implements Node
  @talent(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Payment" }
    ]
  ) {
  accountId: String
  canSendFullAmounts: Boolean
  createdAt: Date!

  """
  some payout methods have a specific currency associated to them
  """
  currency: Currency

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  isDefault: Boolean
  nickname: String
  payoutMethodType: PayoutMethodTypeEnum!
  requirementGroups: [RequirementGroup!]
  requirementValues: JSON
  setupUrl: String
    @deprecated(reason: "generate the setup URL using a mutation instead")
  status: PayoutMethodStatusEnum!
  user: User!
}

enum PayoutMethodStatusEnum {
  active
  failed
  pending
}

enum PayoutMethodTypeEnum {
  crypto_wallet
  off_platform
  payoneer
  stripe_connect
  wise
}

enum PayoutMethodTypeFilterEnum {
  crypto_wallet
  none
  off_platform
  payoneer
  stripe_connect
  wise
}

enum PayoutMode {
  """
  automatic payouts happen on a fixed schedule regardless of client invoice payment
  """
  skip_waiting_for_invoice_payment

  """
  automatic payouts will happen after client invoice payment has completed
  """
  wait_for_invoice_payment
}

enum PayoutPipelineStatusEnum
  @talent(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Payment" }
    ]
  ) {
  blocked
  client_payment_processing
  failed
  invoiced
  pending
  processing
  successful
}

enum PayoutStatusEnum
  @talent(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Payment" }
    ]
  ) {
  blocked
  failed
  pending
  processing
  successful
}

input PayoutsFilters {
  contractStatuses: [ContractStatus!]
  endDate: Date
  excludeContractStatuses: [ContractStatus!]
  mainPayroll: Boolean
  pipelineStatus: PayoutPipelineStatusEnum
  startDate: Date
  status: PayoutStatusEnum
  statuses: [PayoutStatusEnum!]
  withPaycheck: Boolean
}

type PayoutsStats {
  count: Int!
  currency: Currency!
  totalPaid: Money!
  totalPending: Money!
}

"""
income/cost summary for time period
"""
type PayrollBreakdown {
  """
  entries by date with the total income/cost
  """
  breakdownItems: [PayrollBreakdownItem!]!

  """
  members involved in the breakdown
  """
  freelancers: [User!]!
}

enum PayrollBreakdownGroupByEnum {
  day
  month
  week
}

"""
summarized income/cost for time period
"""
type PayrollBreakdownItem {
  date: Date!
  total: Money!
}

type PayrollItem implements Node
  @hris(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Payroll" }
    ]
  ) {
  approvable: Boolean!
  approvedAt: DateTime
  approver: User
  assumedClientPaymentCompletionAt: DateTime
  assumedClientPaymentInitiationAt: DateTime
  assumedInvoiceDate: DateTime
  assumedInvoiceDueDate: DateTime
  assumedPayoutCompletionAt: DateTime
  assumedPayoutDueDate: DateTime
    @deprecated(reason: "use assumedPayoutCompletionAt instead")
  assumedPayoutInitiationAt: DateTime
  assumedPayoutUnblockAt: DateTime
  autoApprove: Boolean!
  autoApproved: Boolean!
  bonus: Bonus
  chatMessage: ChatMessage
  contract: Contract
  contractRates(filters: ContractRatesFilters): [ContractRate!]
  createdAt: DateTime
  currency: Currency
  deletable: Boolean
  emptyForFreelancer: Boolean
  endDate: Date
  expense: Expense
  firm: Firm

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  invoice: Invoice
  invoiceItem: InvoiceItem
  itemNum: Int
  itemType: PayrollItemType!
  itemTypeHumanized: String!
  manageable: Boolean
  manuallyInvoiceable: Boolean!
  paycheck: Paycheck
  payoutCycleTimestamp: DateTime
  payoutViaFlexhire: Boolean
  pipelineStatus: PayrollItemPipelineStatus

  """
  internal DB ID of this record
  """
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")
  salary: Salary
  shouldHaveInvoice: Boolean
  shouldHavePayout: Boolean
  startDate: Date
  status: PayrollItemStatus
  submittedAt: DateTime
  timesheet: Timesheet
  totalToPayClient: Money
  totalToPayFreelancer: Money
  unapprovable: Boolean!
}

enum PayrollItemClientStatus {
  """
  approved by the client
  """
  approved

  """
  queried by the client
  """
  client_query

  """
  invoiced to the customer
  """
  invoiced @deprecated(reason: "use pipelineStatus instead")

  """
  paid out to the freelancer
  """
  paid @deprecated(reason: "use pipelineStatus instead")

  """
  processing customer payment
  """
  payment_processing @deprecated(reason: "use pipelineStatus instead")

  """
  payout to the freelancer has failed
  """
  payout_failed @deprecated(reason: "use pipelineStatus instead")

  """
  not yet submitted
  """
  pending

  """
  submitted and waiting for manual approval
  """
  pending_approval @deprecated(reason: "use pipelineStatus instead")

  """
  rejected by the client
  """
  rejected

  """
  submitted, waiting for client approval or auto approval
  """
  submitted

  """
  submitted and waiting for auto approval
  """
  submitted_auto_approval @deprecated(reason: "use pipelineStatus instead")
}

"""
The connection type for PayrollItem.
"""
type PayrollItemConnection {
  """
  A list of edges.
  """
  edges: [PayrollItemEdge]

  """
  A list of nodes.
  """
  nodes: [PayrollItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type PayrollItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PayrollItem
}

enum PayrollItemFreelancerStatus {
  """
  approved by the client
  """
  approved

  """
  paid by the client, not paid to the freelancer yet
  """
  client_paid @deprecated(reason: "use pipelineStatus instead")

  """
  client has initiated payment, which has not completed yet
  """
  client_payment_processing @deprecated(reason: "use pipelineStatus instead")

  """
  queried by the client
  """
  client_query

  """
  the timesheet has been invoiced, but the client has not initiated payment yet
  """
  invoiced @deprecated(reason: "use pipelineStatus instead")

  """
  paid out to the freelancer
  """
  paid @deprecated(reason: "use pipelineStatus instead")

  """
  payout to the freelancer has failed
  """
  payout_failed @deprecated(reason: "use pipelineStatus instead")

  """
  not yet submitted
  """
  pending

  """
  rejected by the client
  """
  rejected

  """
  submitted, waiting for client approval or auto approval
  """
  submitted
}

enum PayrollItemPipelineStatus {
  """
  approved by the client
  """
  approved

  """
  processing payment from the customer to Flexhire
  """
  client_payment_processing

  """
  queried by the client
  """
  client_query

  """
  invoiced to the customer
  """
  invoiced

  """
  processing payment from Flexhire to the member
  """
  member_payment_processing

  """
  paid out to the member
  """
  paid_out

  """
  payout to the member has failed
  """
  payout_failed

  """
  not yet submitted
  """
  pending

  """
  rejected by the client
  """
  rejected

  """
  submitted, waiting for client approval or auto approval
  """
  submitted
}

enum PayrollItemStatus {
  """
  approved by the client
  """
  approved

  """
  queried by the client
  """
  client_query

  """
  not yet submitted
  """
  pending

  """
  rejected by the client
  """
  rejected

  """
  submitted, waiting for client approval or auto approval
  """
  submitted
}

enum PayrollItemType {
  """
  contains one bonus
  """
  bonus

  """
  contains one expense
  """
  expense

  """
  contains a periodic fixed salary
  """
  salary

  """
  contains one timesheet (work report)
  """
  timesheet
}

input PayrollItemsFilters {
  approvalType: ApprovalTypeEnum
  clientId: ID
  clientStatus: PayrollItemClientStatus
    @deprecated(reason: "use pipelineStatus instead")
  endDate: Date
  freelancerStatus: PayrollItemFreelancerStatus
    @deprecated(reason: "use pipelineStatus instead")
  invoiceNum: Int
  invoiceable: Boolean
  name: String
  pipelineStatus: PayrollItemPipelineStatus
  startDate: Date
  status: PayrollItemStatus
  type: PayrollItemType
}

type PayrollStats {
  currency: Currency!
  totalPaid: Money!
  totalPending: Money!
  totalTimePaidInMinutes: Float!
}

enum Position {
  """
  for freelance jobs, usually paid hourly
  """
  freelancer

  """
  for permanent jobs, usually paid with a fixed salary
  """
  permanent
}

"""
Autogenerated input type of PreviewSignatureRequest
"""
input PreviewSignatureRequestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID
  signatureType: SignatureTypeEnum!
}

"""
Autogenerated return type of PreviewSignatureRequest.
"""
type PreviewSignatureRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  signatureRequestBase64: String
}

type Profile implements Node {
  addressRecipient: String
  allowScreening: Boolean
  availability: ProfileAvailabilityEnum
  availabilityType: [ProfileAvailabilityTypeLiteral!]
  availableAt: DateTime
  canWorkInTheUs: Boolean
  city: String
  cityRecipient: String
  clientRate: Money
  country: Country
  countryRecipient: String
  createdAt: DateTime
  currency: Currency
  freelancerRate: Money
  freelancerSubtypes: [FreelancerSubtype!]
  freelancerType: FreelancerType
  fullAddress: String

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  jobTypes: [JobType!]!
  lastMessagedAt: DateTime
  locationBounds0: Float
  locationBounds1: Float
  locationBounds2: Float
  locationBounds3: Float
  locationBounds4: Float
  locationLatitude: Float
  locationLongitude: Float
  managedTeamSize: String
  openToOpportunities: Boolean
  rateMode: RateMode

  """
  internal DB ID of this record
  """
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")
  region: String
  screeningFeedback: String
  screeningRequiresProject: Boolean
  slug: String
  stateRecipient: String
  taxFirm: String
  taxId: String
  textIntroduction: String
  totalExperience: Int
  updatedAt: DateTime
  urlBlog: String
  urlDribbble: String
  urlGithub: String
  urlLinkedin: String
  usCitizen: Boolean
  visibility: ProfileVisibilityEnum
  zip: String
}

input ProfileAttributes {
  addressRecipient: String
  availability: ProfileAvailabilityEnum
  availabilityType: [String!]
  availableAt: Date
  canWorkInTheUs: Boolean
  cityRecipient: String
  countryRecipient: String
  currency: String
  freelancerRate: Float
  freelancerTypeId: Int
  jobTypes: [String!]
  locationBounds0: Float
  locationBounds1: Float
  locationBounds2: Float
  locationBounds3: Float
  locationLatitude: Float
  locationLongitude: Float
  managedTeamSize: String
  openToOpportunities: Boolean
  rateMode: RateMode
  slug: String
  stateRecipient: String
  taxFirm: String
  taxId: String
  textIntroduction: String
  totalExperience: Int
  urlBlog: String
  urlDribbble: String
  urlGithub: String
  urlLinkedin: String
  usCitizen: Boolean
  visibility: ProfileVisibilityEnum
  zip: String
}

enum ProfileAvailabilityEnum {
  available_now
  available_soon
  not_available
}

enum ProfileAvailabilityTypeLiteral {
  full_time
  part_time
}

"""
a profile evaluation generated by AI to assess how well the profile fits the job description
"""
type ProfileEvaluation implements Node
  @ats(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Screening" }
    ]
  ) {
  """
  a short summary of the evaluation generated by AI
  """
  conclusion: String

  """
  the evaluation generated by AI
  """
  evaluation: String

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  jobApplication: JobApplication

  """
  the job description summarized as text for the AI to ingest
  """
  jobDescription: String

  """
  the profile summarized as text for the AI to ingest
  """
  profileOverview: String

  """
  a numeric score for the evaluation generated by AI. Goes from 0.1 to 1.0
  """
  score: Float
}

enum ProfileVisibilityEnum {
  visibility_clients
  visibility_private
  visibility_public
}

"""
take home test for a job or custom project by a member
"""
type Project implements Node
  @ats(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Screening" }
    ]
  ) {
  custom: Boolean
  description: String

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!

  """
  internal DB ID of this record
  """
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")
  screening: Boolean
  status: String
  submission: ProjectSubmission
  timeLimitMinutes: Int
  title: String
}

input ProjectAttributes {
  description: String
  rawId: Int
  timeLimitMinutes: Int
  title: String
}

"""
The connection type for Project.
"""
type ProjectConnection {
  """
  A list of edges.
  """
  edges: [ProjectEdge]

  """
  A list of nodes.
  """
  nodes: [Project]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type ProjectEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Project
}

type ProjectSubmission implements Node {
  contractRequests: [ContractRequest!]
  description: String

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!

  """
  true if the user has submitted this after the deadline, false in all other cases
  """
  isLate: Boolean
  project: Project

  """
  internal DB ID of this record
  """
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")
  screenshotUrl: String
  startedAt: DateTime
  status: ProjectSubmissionStatusEnum
  submittedAt: DateTime

  """
  How much time in seconds was left of the time limit at the time of submission
  """
  timeRemainingAtSubmission: Float
  url: String
  user: User
}

enum ProjectSubmissionStatusEnum {
  private
  public
}

"""
Flexhire API - refer to https://flexhire.com/developer for more information
"""
type Query {
  """
  show all available billing plans
  """
  billingPlans: [BillingPlan!]
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Billing" }
      ]
    )

  """
  list all blog categories on the platform
  """
  blogCategories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BlogCategoryConnection
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Blog" }
      ]
    )

  """
  loads a blog category by slug
  """
  blogCategory(slug: String!): BlogCategory
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Blog" }
      ]
    )

  """
  loads a blog post by slug
  """
  blogPost(slug: String!): BlogPost
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Blog" }
      ]
    )

  """
  list all blog posts on the platform
  """
  blogPosts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    filters results by category slug
    """
    categorySlug: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    filters results by subcategory slug
    """
    subcategorySlug: String
  ): BlogPostConnection
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Blog" }
      ]
    )

  """
  list all blog subcategories on the platform
  """
  blogSubcategories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    pass this to get subcategories of specific categories by category IDs
    """
    categoryIds: [ID!]

    """
    pass this to get subcategories of a specific category by category slug
    """
    categorySlug: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    filters results by name
    """
    search: String
  ): BlogSubcategoryConnection
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Blog" }
      ]
    )

  """
  loads a blog subcategory by slug
  """
  blogSubcategory(slug: String!): BlogSubcategory
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Blog" }
      ]
    )

  """
  loads the chat automation with specific name and optionally associated job.
  Used to power 'peek' chat automations on public pages and specific job pages
  """
  chatAutomation(jobId: ID, name: String!): ChatAutomation
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Chat" }
      ]
    )
  chatThread(rawId: Int, userRawId: Int): ChatThread
    @deprecated(reason: "only used in legacy frontend code")
  companies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    name: String
  ): CompanyConnection
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Profile" }
      ]
    )
  competitor(shortName: String!): Competitor
  competitors: [Competitor!]

  """
  configuration values for the frontend. User specific
  """
  configuration: Configuration

  """
  load a contract: use either id, rawId, editToken, a combination of jobSlug and freelancerSlug, or freelancerEmail
  """
  contract(
    """
    for loading the contract by edit token
    """
    editToken: String

    """
    can be used as an alternative to others to load invitations not yet accepted
    """
    freelancerEmail: String

    """
    for loading the contract by id
    """
    id: ID

    """
    for loading the contract by id or edit token
    """
    idOrEditToken: String

    """
    for loading the contract by raw id
    """
    rawId: Int @deprecated(reason: "only used by legacy frontend code")
  ): Contract
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Team" }
      ]
    )

  """
  preview changes resulting from updating a contract for active/paused contracts
  and offer made contracts. Most useful for previewing rate changes
  """
  contractPreview(
    editToken: String
    input: ContractPreviewAttributes!
  ): ContractPreview
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Team" }
      ]
    )

  """
  all contracts visible by the current user will be included
  """
  contracts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ContractConnection!
  costBreakdown(
    """
    filter by manager
    """
    clientId: ID

    """
    filter by employee or contractor
    """
    freelancerId: ID
    groupBy: PayrollBreakdownGroupByEnum!
  ): PayrollBreakdown
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Team" }
      ]
    )
  countries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: CountriesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CountryConnection
  country(code: String, slug: String): Country
  currencies(
    """
    only include currencies that can be used for contracts
    """
    allowContracts: Boolean

    """
    only include currencies that can be used for invoice creation
    """
    allowInvoices: Boolean

    """
    only include currencies that can be used for the given payout method type
    """
    payoutMethodType: PayoutMethodTypeEnum
  ): [Currency!]

  """
  resolves to the currently logged in user
  """
  currentUser: User
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Auth" }
      ]
    )

  """
  get email subscriptions for a logged out user using an unsubscribe token
  """
  emailSubscriptions(token: String!): [EmailSubscription!]
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Profile" }
      ]
    )
  featuredFreelancers(
    """
    ISO 3166-1 alpha-2 code, uppercase
    """
    countryCode: String
  ): [User!]
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Candidate" }
      ]
    )
  featuredQuestionsCategories: [QuestionCategory!]
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Screening" }
      ]
    )

  """
  load a firm by slug
  """
  firm(slug: String): Firm
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Team" }
      ]
    )

  """
  all firms visible by the current user will be included
  """
  firms(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): FirmConnection!
  freelancerSubtype(rawIdOrSlug: String): FreelancerSubtype
    @deprecated(reason: "only used for legacy Frontend code")

  """
  shows all freelancer subtypes (specializations) on the platform
  """
  freelancerSubtypes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    freelancerTypeId: ID
    freelancerTypeIds: [ID!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    search: String
  ): FreelancerSubtypeConnection
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Job" }
      ]
    )
  freelancerType(
    id: ID
    rawId: Int @deprecated(reason: "only used for legacy Frontend code")
    rawIdOrSlug: String
      @deprecated(reason: "only used for legacy Frontend code")
  ): FreelancerType

  """
  shows all freelancer types (industries) on the platform
  """
  freelancerTypes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    search: String
  ): FreelancerTypeConnection
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Job" }
      ]
    )
  institutes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    name: String
  ): InstituteConnection
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Profile" }
      ]
    )

  """
  load an invoice by token
  """
  invoice(
    rawId: Int @deprecated(reason: "only used in legacy frontend code")

    """
    string that acts as unique identifier of the invoice for loading purposes
    """
    token: String
  ): Invoice
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Billing" }
      ]
    )

  """
  loads a job by firm slug and job slug
  """
  job(
    """
    firm's slug to load by
    """
    firmSlug: String!

    """
    job's own slug to load by
    """
    slug: String!
  ): Job
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Job" }
      ]
    )

  """
  load a job application use with id
  """
  jobApplication(
    """
    for loading the job application by id
    """
    id: ID

    """
    for loading the contract by raw id
    """
    rawId: Int @deprecated(reason: "only used by legacy frontend code")
  ): JobApplication
    @deprecated(reason: "use node() instead")
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Job" }
      ]
    )

  """
  list of possible integrations for jobs on Flexhire
  """
  jobIntegrationProviders: [JobIntegrationProvider!]

  """
  used to load jobs by referral link. The slug argument also accepts a referral token.
  """
  jobReferrer(
    ref: String
    referrer: String

    """
    load job by slug
    """
    slug: String
  ): JobView
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Job" }
      ]
    )

  """
  all jobs visible by the current user will be included. Meant to be used for
  cross-firm job search. Prefer using firm.jobs or user.allJobs or others.
  """
  jobs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: JobsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): JobConnection
  landingVideo: Video

  """
  load a Link's data using its token. Note that if the link has auto-login, you
  will need to use the autoLoginWithLink mutation to do it
  """
  link(token: String!): Link

  """
  list all members of the platform. Only used for backoffice processes and not meant for regular users
  """
  members(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: MembersFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
  messagePreview(jobId: ID, message: String!, userId: ID): String
  messagePreviewVariables(
    flowName: JobAutomatedMessagingFlowNameEnum
    followUpIndex: Int
    jobId: ID
    userId: ID
  ): [String!]

  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
    @api(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Utility" }
      ]
    )

  """
  Fetches a list of objects given a list of IDs.
  """
  nodes(
    """
    IDs of the objects.
    """
    ids: [ID!]!
  ): [Node!]
    @api(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Utility" }
      ]
    )

  """
  optionally load a node. if null is passed, null will be returned
  """
  optionalNode(id: ID): Node
    @api(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Utility" }
      ]
    )
  paidTimeOffPreview(input: PaidTimeOffPreviewAttributes!): PaidTimeOffPreview
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Payroll" }
      ]
    )

  """
  all code tests visible to the current user
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    if true, limit results to projects suitable for Flexhire pre-screening
    """
    screening: Boolean
  ): ProjectConnection

  """
  list of users that can be contacted in public chat without signing up for a Flexhire account
  """
  publicChatContacts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: UsersFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Chat" }
      ]
    )
  questionCategory(
    """
    slug for the category
    """
    slug: String!
  ): QuestionCategory
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Screening" }
      ]
    )
  questions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: QuestionsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): QuestionConnection
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Screening" }
      ]
    )
  reference(token: String!): Reference
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Profile" }
      ]
    )

  """
  Can be used to load a resource by slug or combination of slug and subslug or more
  """
  resource(
    ref: String
    referrer: String
    slug: String!
    subslug: String
    token: String
  ): Resource
    @api(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Utility" }
      ]
    )
  salaryPreview(input: SalaryPreviewAttributes!): SalaryPreview
    @hris(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Payroll" }
      ]
    )
  skill(slug: String): Skill
    @deprecated(reason: "only used in legacy frontend code")

  """
  all selectable/usable skills on the platform
  """
  skills(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    if true, only return featured skills
    """
    featured: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    freelancerTypeId: ID
    freelancerTypeIds: [ID!]
    freelancerTypeRawId: Int
      @deprecated(reason: "only used in legacy frontend code")

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    search: String
  ): SkillConnection
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Job" }
      ]
    )

  """
  all selectable/usable tags on the platform
  """
  tags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: TagsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TagConnection
    @ats(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Job" }
      ]
    )
  timesheet(rawId: Int): Timesheet
    @deprecated(reason: "only used by legacy frontend code")

  """
  check if a user is unsubscribed from all emails using an unsubscribe token
  """
  unsubscribedFromAllEmails(token: String!): Boolean
    @talent(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Profile" }
      ]
    )

  """
  Verify validity of a URL
  """
  urlValidity(url: String!): ValidationResult
    @api(
      options: [
        { key: "documented", value: "true" }
        { key: "subdomain", value: "Utility" }
      ]
    )

  """
  load user on the platform. Must be visible to the current user
  """
  user(
    """
    load contract creator by contract edit token (view contract draft invite)
    """
    editToken: String

    """
    load user by id
    """
    id: ID

    """
    load user by raw id
    """
    rawId: Int

    """
    load member by profile slug
    """
    slug: String
  ): User

  """
  admin only field to search across all users
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    search: String
  ): UserConnection
  video(
    id: ID
    rawId: Int @deprecated(reason: "only used by legacy frontend code")
  ): Video @deprecated(reason: "use node() instead")
}

"""
Autogenerated input type of QueryPayrollItem
"""
input QueryPayrollItemInput {
  clientComments: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  payrollItemId: ID!
}

"""
Autogenerated return type of QueryPayrollItem.
"""
type QueryPayrollItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  payrollItem: PayrollItem
}

"""
a question meant for job candidate/applicant evaluation. Can be asked during job
screening or autonomously answered by profiles in the talent network to boost their profile
"""
type Question implements Node
  @ats(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Screening" }
    ]
  ) {
  answersCount: Int

  """
  average rating given to video answers for this question by people on the current user's team
  """
  averageRating: Float
  defaultMaxDuration: Int
  deletable: Boolean
  description: String

  """
  what would be the ideal answer from the best applicant
  """
  expectation: String

  """
  the firm the question belongs to
  """
  firm: Firm
  freelancerSubtypes: [FreelancerSubtype!]
  freelancerTypes: [FreelancerType!]

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  jobApplications: [JobApplication!]
  jobsCount: Int
  level: QuestionLevelEnum

  """
  internal DB ID of this record
  """
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")
  skills: [Skill!]
  status: QuestionStatusEnum

  """
  the tags associated with the question
  """
  tags(
    """
    only return custom tags (tags added by the current user or their firm)
    """
    customOnly: Boolean
  ): [Tag!]

  """
  the textual answer submitted by the current user, if any
  """
  textualAnswer: Answer
  title: String!

  """
  the user who created the question
  """
  user: User

  """
  the video answer submitted by the current user, if any
  """
  videoAnswer: Answer
}

input QuestionAttributes {
  description: String
  expectation: String
  freelancerSubtypesIds: [ID!]
  freelancerTypesIds: [ID!]
  id: ID
  level: QuestionLevelEnum
  maxDuration: Int
  ord: Int
  rawId: Int
  skillsIds: [ID!]
  source: QuestionSourceEnum
  status: QuestionStatusEnum
  tags: [QuestionTagAttributes!]
  title: String
}

"""
a category for featured questions
"""
union QuestionCategory = FreelancerSubtype | FreelancerType | Skill | Tag

"""
The connection type for Question.
"""
type QuestionConnection {
  """
  A list of edges.
  """
  edges: [QuestionEdge]

  """
  A list of nodes.
  """
  nodes: [Question]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type QuestionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Question
}

enum QuestionLevelEnum {
  advanced
  basic
  intermediate
}

enum QuestionSourceEnum {
  ai_recommendation
  flexhire_recommendation
  user
}

enum QuestionStatusEnum {
  private
  public
  submitted
}

input QuestionTagAttributes {
  id: ID
  name: String!
}

input QuestionsFilters {
  """
  only return questions created by members of this firm
  """
  createdByFirmId: ID

  """
  exclude these questions from the results
  """
  exclude: [ID!]

  """
  if true, only return featured questions
  """
  featured: Boolean

  """
  only return questions created by members of this firm or in use by jobs from this firm
  """
  firmId: ID

  """
  filter results so questions need to be associated to at least one of these items to be returned
  """
  freelancerSubtypeIds: [ID!]

  """
  filter results so questions need to be associated to at least one of these items to be returned
  """
  freelancerTypeIds: [ID!]

  """
  only return questions in use by jobs from this firm
  """
  inUseByFirmId: ID

  """
  filter results to only show questions associated with these jobs
  """
  jobIds: [ID!]
  level: QuestionLevelEnum

  """
  this only affects the way results are ranked (ordered)
  """
  rankFreelancerSubtypeIds: [ID!]

  """
  this only affects the way results are ranked (ordered)
  """
  rankFreelancerTypeIds: [ID!]

  """
  this only affects the way results are ranked (ordered)
  """
  rankLevel: QuestionLevelEnum

  """
  this only affects the way results are ranked (ordered)
  """
  rankSkillIds: [ID!]

  """
  filter results so questions need to be associated to at least one of these items to be returned
  """
  skillIds: [ID!]

  """
  filter results so questions need to be associated to at least one of these items to be returned
  """
  tagIds: [ID!]

  """
  search by title
  """
  title: String

  """
  only return questions created by this user
  """
  userId: ID

  """
  only return questions created by these users
  """
  userIds: [ID!]
}

enum RateMode {
  day
  hour
  month
  week
  year
}

enum RatingFilterEnum {
  any_from_me
  negative_from_anyone
  negative_from_me
  none_from_anyone
  none_from_me
  positive_from_anyone
  positive_from_me
}

union Recipient = ChatBot | User

type Reference implements Node {
  comments: String
  createdAt: DateTime
  email: String

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  name: String
  otherRelation: String
  ratingExpert: Int
  ratingOverall: Int
  ratingProfessional: Int

  """
  internal DB ID of this record
  """
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")
  relation: ReferenceRelationEnum
  status: ReferenceStatusEnum
  updatedAt: DateTime
  user: User
}

enum ReferenceRelationEnum {
  classmate
  client
  coworker
  friend
  other
}

enum ReferenceStatusEnum {
  completed
  pending
}

type Referral implements Node {
  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  job: Job
  token: String
  type: String
}

"""
Autogenerated input type of RefreshPaymentStatus
"""
input RefreshPaymentStatusInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Stripe Payment Intent ID to refresh. You should have gotten this from the Stripe JS SDK when initiating the payment.
  """
  paymentIntentId: String!
}

"""
Autogenerated return type of RefreshPaymentStatus.
"""
type RefreshPaymentStatusPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The CustomerPayment object matching the given Stripe Payment Intent
  """
  customerPayment: CustomerPayment
  errors: [Error!]
}

"""
Autogenerated input type of RefreshPayoutMethodRequirements
"""
input RefreshPayoutMethodRequirementsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  payoutMethodId: ID!
  requirementValues: [PairInput!]!
  type: String!
}

"""
Autogenerated return type of RefreshPayoutMethodRequirements.
"""
type RefreshPayoutMethodRequirementsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  requirementGroups: [RequirementGroup!]
}

"""
Autogenerated input type of RegisterFrontendVersion
"""
input RegisterFrontendVersionInput {
  buildId: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  key: String!
}

"""
Autogenerated return type of RegisterFrontendVersion.
"""
type RegisterFrontendVersionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

"""
Autogenerated input type of RejectContract
"""
input RejectContractInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID
  freelancerFeedback: String
}

"""
Autogenerated return type of RejectContract.
"""
type RejectContractPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
}

"""
Autogenerated input type of RejectContractRequests
"""
input RejectContractRequestsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  freelancerFeedback: String
  jobApplicationId: ID
}

"""
Autogenerated return type of RejectContractRequests.
"""
type RejectContractRequestsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  jobApplication: JobApplication
}

"""
Autogenerated input type of RejectFreelancer
"""
input RejectFreelancerInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  reason for rejecting the freelancer; sent to freelancer if defined
  """
  clientRejectionMessage: String
  contractId: ID
  jobApplicationId: ID
}

"""
Autogenerated return type of RejectFreelancer.
"""
type RejectFreelancerPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
  jobApplication: JobApplication
}

"""
Autogenerated input type of RejectInterviewRequest
"""
input RejectInterviewRequestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  freelancerFeedback: String
  jobApplicationId: ID
  jobApplicationRawId: Int
    @deprecated(reason: "only used to support some legacy frontend code")
}

"""
Autogenerated return type of RejectInterviewRequest.
"""
type RejectInterviewRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  jobApplication: JobApplication
}

"""
Autogenerated input type of RejectPayrollItem
"""
input RejectPayrollItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  payrollItemIds: [ID!]!
}

"""
Autogenerated return type of RejectPayrollItem.
"""
type RejectPayrollItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  payrollItems: [PayrollItem!]!
}

"""
Autogenerated input type of RejectTimeOffRequest
"""
input RejectTimeOffRequestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  timeOffRequestId: ID
}

"""
Autogenerated return type of RejectTimeOffRequest.
"""
type RejectTimeOffRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  timeOffRequest: TimeOffRequest
}

"""
Autogenerated input type of RemoveSignableDocument
"""
input RemoveSignableDocumentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  signableDocumentId: ID!
}

"""
Autogenerated return type of RemoveSignableDocument.
"""
type RemoveSignableDocumentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: User
  errors: [Error!]
  signableDocument: SignableDocument
}

"""
Autogenerated input type of RequestInterview
"""
input RequestInterviewInput {
  calendlyUrl: String
  clientAgreesTerms: Boolean!
  clientId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  interviewDate1: DateTime
  interviewDate2: DateTime
  interviewDate3: DateTime
  interviewNote: String
  interviewSchedulingMethod: String!
  interviewers: [UserAttributes!]
  jobApplicationId: ID!
}

"""
Autogenerated return type of RequestInterview.
"""
type RequestInterviewPayload {
  client: User

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  jobApplication: JobApplication
}

"""
Autogenerated input type of RequestReference
"""
input RequestReferenceInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  message: String
  name: String!
}

"""
Autogenerated return type of RequestReference.
"""
type RequestReferencePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  reference: Reference
}

"""
a required field to fill in
"""
type Requirement {
  defaultValue: String
  example: String

  """
  unique key/identifier of this field
  """
  key: String!
  maxLength: Int
  minLength: Int
  name: String!
  options: [Option!]
  refreshOnChange: Boolean!
  required: Boolean!
  type: RequirementTypeEnum!
  validationAsync: String
  validationRegexp: String
}

"""
a section of required fields to fill in
"""
type RequirementGroup {
  description: String
  requirements: [Requirement!]!
  title: String!
  type: String!
}

enum RequirementTypeEnum {
  date
  radio
  select
  text
}

"""
Autogenerated input type of ResendInvitationEmail
"""
input ResendInvitationEmailInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID!
}

"""
Autogenerated return type of ResendInvitationEmail.
"""
type ResendInvitationEmailPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
}

"""
Autogenerated input type of ResendReferenceRequest
"""
input ResendReferenceRequestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  referenceId: ID!
}

"""
Autogenerated return type of ResendReferenceRequest.
"""
type ResendReferenceRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  reference: Reference
}

"""
Autogenerated input type of ResetPassword
"""
input ResetPasswordInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  handOff: Boolean
  password: String!
  passwordConfirmation: String!
  token: String!
}

"""
Autogenerated return type of ResetPassword.
"""
type ResetPasswordPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  user: User
}

"""
Represents objects loadable by slug. Used to power the loading of pages with a link like /$slug or /$slug/$subslug
"""
union Resource = Firm | Job | User

"""
the resume/CV for a user as a file. Generally imported into the ATS by a recruiter or uploaded by the user on signup
"""
type Resume implements Node
  @ats(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Candidate" }
    ]
  ) {
  """
  true if the resume is to be imported to the associated user's profile
  """
  copyToProfile: Boolean

  """
  the original name of the imported or uploaded file
  """
  filename: String

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  importTimedOut: Boolean @deprecated(reason: "use importTimeoutAt instead")
  importTimeoutAt: DateTime

  """
  the mime type of the file, stored with the purpose of knowing what kind of file it is and how to display it
  """
  mimetype: String
  status: ResumeStatusEnum

  """
  true if the import has been completed and the result is deemed positive
  """
  success: Boolean
  url: String
  user: User
}

"""
Autogenerated input type of ResumeContract
"""
input ResumeContractInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID!
}

"""
Autogenerated return type of ResumeContract.
"""
type ResumeContractPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
}

"""
Autogenerated return type of ResumeProcessingFinished.
"""
type ResumeProcessingFinishedPayload {
  resume: Resume
}

enum ResumeStatusEnum {
  """
  resume has been fully processed
  """
  processed

  """
  currently being processed
  """
  processing

  """
  resume was not readable by Flexhire
  """
  processing_failed

  """
  in queue for processing
  """
  processing_queued

  """
  just created and not in queue to process
  """
  unprocessed
}

"""
Autogenerated input type of RevokeOffer
"""
input RevokeOfferInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  reason for revoking the offer; sent to freelancer if defined
  """
  clientRejectionMessage: String
  contractId: ID!
}

"""
Autogenerated return type of RevokeOffer.
"""
type RevokeOfferPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
}

input SalariesFilters {
  actionable: Boolean
  amount: Int
  approvalType: ApprovalTypeEnum
  clientId: ID
  clientStatus: PayrollItemClientStatus
    @deprecated(reason: "use pipelineStatus instead")
  contractStatuses: [ContractStatus!]
  date: Date
  endDate: Date
  freelancerStatus: PayrollItemFreelancerStatus
    @deprecated(reason: "use pipelineStatus instead")
  invoiceNum: Int
  name: String
  pipelineStatus: PayrollItemPipelineStatus
  selectable: Boolean
  startDate: Date
  status: PayrollItemStatus
}

type Salary implements Node {
  contract: Contract
  currency: Currency
  customAmount: Boolean
  daysOff: [Date!]
  editDescription: String
  endDate: Date

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  payrollItem: PayrollItem
  startDate: Date
  totalToPayClient: Money
  totalToPayFreelancer: Money
  workedDays: [Date!]
  workingDays: [Date!]
}

"""
The connection type for Salary.
"""
type SalaryConnection {
  """
  A list of edges.
  """
  edges: [SalaryEdge]

  """
  A list of nodes.
  """
  nodes: [Salary]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type SalaryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Salary
}

enum SalaryFrequencyEnum {
  """
  Salaries will be generated in two cycles, from 1st until 15th day of the month, and from 16th until end of the month
  """
  bimonthly

  """
  Salaries generated every two weeks
  """
  biweekly

  """
  Salaries generated every month
  """
  monthly

  """
  Salaries generated every week
  """
  weekly
}

type SalaryPreview {
  daysOff: [Date!]
  totalToPayClient: Money
  totalToPayFreelancer: Money
}

input SalaryPreviewAttributes {
  customAmount: Boolean!
  daysOff: [Date!]!
  salaryId: ID!
  totalToPayClient: Float
  totalToPayFreelancer: Float
}

enum ScreeningModeEnum {
  auto_screening
  manual_screening
  no_screening
}

"""
Autogenerated return type of SeenOnline.
"""
type SeenOnlinePayload {
  user: User
}

enum SendByEnum {
  """
  send the message via the chat and also send the email with the personalized template right away
  """
  both

  """
  send the message via chat. If unread, the user will receive a regular unread messages notification via email
  """
  chat

  """
  send the message via email. The message will look like an email from the
  sender with the personalized template, but the message will not go through the chat system
  """
  email
}

"""
Autogenerated input type of SendChatMessage
"""
input SendChatMessageInput {
  chatAutomationId: ID
  chatBotId: ID
  chatThreadId: ID

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  jobId: ID
  message: String!
  purpose: ChatThreadPurposeEnum
  recipientId: ID
}

"""
Autogenerated return type of SendChatMessage.
"""
type SendChatMessagePayload {
  chatMessage: ChatMessage

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

"""
Autogenerated input type of SendConfirmationEmail
"""
input SendConfirmationEmailInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SendConfirmationEmail.
"""
type SendConfirmationEmailPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  user: User
}

"""
Autogenerated input type of SendContractRating
"""
input SendContractRatingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  jobApplicationId: ID!

  """
  Whether the rating is positive. Set to null to clear the rating.
  """
  ratingPositive: Boolean
}

"""
Autogenerated return type of SendContractRating.
"""
type SendContractRatingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  jobApplicationEvaluation: JobApplicationEvaluation
}

"""
Autogenerated input type of SendContractRequests
"""
input SendContractRequestsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  jobApplicationId: ID!
  messageTemplate: String
  projectDescription: String
  projectId: ID
  projectTimeLimitMinutes: Int
  projectTitle: String
  questions: [QuestionAttributes!]
  videoIntroduction: Boolean
}

"""
Autogenerated return type of SendContractRequests.
"""
type SendContractRequestsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  jobApplication: JobApplication
}

"""
Autogenerated input type of SendJobOpportunity
"""
input SendJobOpportunityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  freelancerRawIdOrSlug: String
    @deprecated(reason: "only used in legacy frontend code")
  jobId: ID
  userId: ID
}

"""
Autogenerated return type of SendJobOpportunity.
"""
type SendJobOpportunityPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  jobApplication: JobApplication
  user: User
}

"""
Autogenerated input type of SetupCryptoWallet
"""
input SetupCryptoWalletInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  walletAddress: String
}

"""
Autogenerated return type of SetupCryptoWallet.
"""
type SetupCryptoWalletPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  payoutMethod: PayoutMethod
}

"""
Autogenerated input type of SetupPaymentMethod
"""
input SetupPaymentMethodInput {
  callbackUrl: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  paymentMethodType: PaymentMethodTypeLiteral!
}

"""
Autogenerated return type of SetupPaymentMethod.
"""
type SetupPaymentMethodPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  paymentMethod: PaymentMethod
}

"""
Autogenerated input type of SetupPayoneer
"""
input SetupPayoneerInput {
  alreadyHaveAnAccount: Boolean

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SetupPayoneer.
"""
type SetupPayoneerPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: User
  errors: [Error!]
  message: String @deprecated(reason: "unused")
  payoutMethod: PayoutMethod
}

"""
Autogenerated input type of SetupStripeConnectedAccount
"""
input SetupStripeConnectedAccountInput {
  """
  run this mutation without this parameter to set up a new account. Then, call
  it again with this parameter to update the existing account once the Stripe
  setup flow is completed.
  """
  accountId: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SetupStripeConnectedAccount.
"""
type SetupStripeConnectedAccountPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: User
  errors: [Error!]
  payoutMethod: PayoutMethod
}

"""
Autogenerated input type of SetupWise
"""
input SetupWiseInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  optionally pass this to load parameters such as the currency from it
  """
  contractId: ID

  """
  optionally explicitly specify the currency that the funds will be sent in
  """
  currency: String
}

"""
Autogenerated return type of SetupWise.
"""
type SetupWisePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: User
  errors: [Error!]
  payoutMethod: PayoutMethod
}

type SignableDocument implements Node {
  contracts: [Contract!]

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  signatures: [Signature!]
  title: String!
  url: String!
  user: User
}

"""
a document file attached to a contract
"""
input SignableDocumentAttributes {
  title: String!
  url: String!
}

type SignableDocumentTemplate implements Node {
  createdAt: DateTime
  editUrl: String
  externalId: String
  firm: Firm

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  previewUrl: String
  title: String
  user: User
}

type Signature implements Node {
  contract: Contract
  contractRate: ContractRate
  createdAt: DateTime
  description: String
  embedSignUrl: String

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  name: String
  needsSigning: Boolean
  signableDocument: SignableDocument
  signatureRequestId: String
  signatureType: SignatureTypeEnum
  status: SignatureStatusEnum!
  updatedAt: DateTime
  user: User
}

enum SignatureStatusEnum {
  declined
  pending
  requested
  signed
}

enum SignatureTypeEnum {
  contractor_agreement
  contractor_statement_of_work
  custom
}

"""
Autogenerated input type of Signup
"""
input SignupInput {
  """
  token for a billing plan to select it for a firm, if one is created
  """
  billingPlanToken: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  if passed, a new firm with this name will be created and the user will be set as owner
  """
  companyName: String

  """
  token for an invite, if provided the email confirmation will be skipped
  """
  contractToken: String
  description: String
  email: String!
  firmSlug: String
  firstName: String!
  jobSlug: String
  lastName: String!
  logoUrl: String
  password: String!
  passwordConfirmation: String!
  phone: String
  recaptchaToken: String
  redirectUrl: String
  ref: String
  referer: String
  refererUrl: String
  remember: Boolean
  resumeUrl: String
  termsOfServiceApproved: Boolean
  website: String
}

"""
Autogenerated return type of Signup.
"""
type SignupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  user: User
}

type Skill implements Node {
  """
  true if the skill is user created and not made fully public yet
  """
  custom: Boolean

  """
  if this skill was user created, this is the user that created it
  """
  customUser: User
  featuredFreelancerTypes: [FreelancerType!]
  featuredFreelancers: [User!]
  featuredQuestions: [Question!]
  freelancerTypes: [FreelancerType!]

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  name: String!

  """
  internal DB ID of this record
  """
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")
  slug: String!
}

"""
The connection type for Skill.
"""
type SkillConnection {
  """
  A list of edges.
  """
  edges: [SkillEdge]

  """
  A list of nodes.
  """
  nodes: [Skill]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type SkillEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Skill
}

input SkillFilter {
  groupIndex: Int
  id: ID!
  name: String
  requiredYears: Int
}

"""
Autogenerated input type of SkipCandidate
"""
input SkipCandidateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  comments: String
  freelancerId: ID!
  jobId: ID!
  reason: String
  system: Boolean
}

"""
Autogenerated return type of SkipCandidate.
"""
type SkipCandidatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  jobApplication: JobApplication
}

"""
Autogenerated input type of SlackAccessToken
"""
input SlackAccessTokenInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  not needed if current user is already linked to slack
  """
  code: String!
}

"""
Autogenerated return type of SlackAccessToken.
"""
type SlackAccessTokenPayload {
  accessToken: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

enum SortOrder {
  """
  sort ascending (default)
  """
  asc

  """
  sort descending
  """
  desc
}

input SpectaQLOption {
  key: String!
  value: String!
}

"""
Autogenerated input type of SubmitApplication
"""
input SubmitApplicationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SubmitApplication.
"""
type SubmitApplicationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  user: User
}

"""
Autogenerated input type of SubmitPayoutMethodRequirements
"""
input SubmitPayoutMethodRequirementsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  payoutMethodId: ID!
  requirementValues: [PairInput!]!

  """
  the type of the requirement group being submitted
  """
  type: String!
}

"""
Autogenerated return type of SubmitPayoutMethodRequirements.
"""
type SubmitPayoutMethodRequirementsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  payoutMethod: PayoutMethod
}

"""
Autogenerated input type of SubmitPayrollItem
"""
input SubmitPayrollItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  payrollItemId: ID
}

"""
Autogenerated return type of SubmitPayrollItem.
"""
type SubmitPayrollItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  payrollItem: PayrollItem
}

"""
Autogenerated input type of SubmitProfile
"""
input SubmitProfileInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SubmitProfile.
"""
type SubmitProfilePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  user: User
}

"""
Autogenerated input type of SubmitVerification
"""
input SubmitVerificationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SubmitVerification.
"""
type SubmitVerificationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  user: User
}

type Subscription {
  chatMessageReceived(userId: ID): ChatMessageReceivedPayload!
  chatMessageUpdated(chatMessageId: ID): ChatMessageUpdatedPayload!
  chatThreadUpdated(chatThreadId: ID): ChatThreadUpdatedPayload!
  contractUpdated(contractId: ID!): ContractUpdatedPayload!
  firmUpdated(firmId: ID): FirmUpdatedPayload!
  frontendVersionDeployed: FrontendVersionDeployedPayload!
  invoiceUpdated(invoiceId: ID): InvoiceUpdatedPayload!
  jobUpdated(jobId: ID): JobUpdatedPayload!
  resumeProcessingFinished(
    userId: ID
    userRawId: Int @deprecated(reason: "only used in legacy frontend code")
  ): ResumeProcessingFinishedPayload!
  seenOnline(
    userId: ID
    userRawId: Int @deprecated(reason: "only used in legacy frontend code")
  ): SeenOnlinePayload!
  tasksUpdated(userId: ID): TasksUpdatedPayload!
  userUpdated(userId: ID): UserUpdatedPayload!
  videoUpdated(
    videoId: ID
    videoRawId: Int @deprecated(reason: "only used in legacy frontend code")
  ): VideoUpdatedPayload!
}

"""
identifies which type of email subscription it is and what kind of emails will be received if it's active
"""
enum SubscriptionName {
  """
  includes reminder emails about completing the profile
  """
  freelancer_incomplete

  """
  emails the user when a matching opened job is found
  """
  job_opportunity

  """
  emails the user when a job matching their industry and location is found, so they can refer people and win a prize
  """
  referral_opportunity

  """
  emails the user periodically if they have an active contract with timesheets, to remind them to submit them
  """
  timesheet_reminders
}

"""
A generic Tag that can be associated to different resources. Used to categorize people in a Team and to label some Questions
"""
type Tag implements Node
  @api(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Utility" }
    ]
  ) {
  editable: Boolean!

  """
  Questions that are tagged with this tag and also featured for it
  """
  featuredQuestions: [Question!]

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  name: String!
  purpose: TagPurpose!

  """
  internal DB ID of this record
  """
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")
  slug: String!
}

"""
The connection type for Tag.
"""
type TagConnection {
  """
  A list of edges.
  """
  edges: [TagEdge]

  """
  A list of nodes.
  """
  nodes: [Tag]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type TagEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Tag
}

input TagFilter {
  id: Int!
}

enum TagPurpose {
  """
  used to tag screening questions for hiring
  """
  question

  """
  used to categorize firm members into teams
  """
  team
}

"""
Filter options for tags
"""
input TagsFilters {
  """
  Filter tags used in questions
  """
  forQuestions: Boolean

  """
  only return tags in use by jobs from this firm
  """
  inUseByFirmId: ID

  """
  filter results to only show tags associated with these jobs
  """
  jobIds: [ID!]

  """
  Search tags by name
  """
  search: String

  """
  Filter user created tags
  """
  userCreated: Boolean
}

type Task implements Node
  @talent(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Profile" }
    ]
  ) {
  category: TaskCategoryEnum!
  contracts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ContractConnection!
  count: Int!
  firm: Firm

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  invoices(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ContractConnection!
  job: Job
  jobApplications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): JobApplicationConnection!
  payrollItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ContractConnection!
  taskType: TaskTypeEnum!
  title: String
  user: User!
}

enum TaskCategoryEnum {
  hire
  individual
  manage
  pay
}

"""
The connection type for Task.
"""
type TaskConnection {
  """
  A list of edges.
  """
  edges: [TaskEdge]

  """
  A list of nodes.
  """
  nodes: [Task]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type TaskEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Task
}

enum TaskTypeEnum
  @talent(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Profile" }
    ]
  ) {
  approve_expenses
  approve_salaries
  approve_time_off_requests
  approve_work_reports
  client_query_work_report
  discuss_applicants
  interview_applicants
  pay_due_invoices
  pay_overdue_invoices
  reject_applicants
  renew_contract
  review_applicants
  screen_applicants
  setup_payout_method
}

input TasksFilters {
  category: TaskCategoryEnum
  firmId: ID
  jobId: ID
  taskType: TaskTypeEnum
  userId: ID
}

"""
Autogenerated return type of TasksUpdated.
"""
type TasksUpdatedPayload {
  user: User
}

type TimeOffRequest implements Node {
  approvedAt: DateTime
  approvedBy: User
  contract: Contract
  createdAt: DateTime
  daysOffCount: Int
  description: String
  endDate: Date
  excludeFromPaidLeaveBalance: Boolean

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  paid: Boolean
  rejectedAt: DateTime
  rejectedBy: User
  startDate: Date
  status: String
  submittedAt: DateTime
  title: String
}

"""
The connection type for TimeOffRequest.
"""
type TimeOffRequestConnection {
  """
  A list of edges.
  """
  edges: [TimeOffRequestEdge]

  """
  A list of nodes.
  """
  nodes: [TimeOffRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type TimeOffRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: TimeOffRequest
}

"""
the possible statuses of a time off request
"""
enum TimeOffRequestStatuses
  @hris(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Team" }
    ]
  ) {
  """
  a time off request has been approved by a manager and may now affect salaries
  """
  approved

  """
  a time off request has been drafted by the employee or contractor but not submitted yet for approval
  """
  draft

  """
  a time off request has been rejected by a manager and is not going to impact salaries
  """
  rejected

  """
  a time off request has been submitted for approval by the employee or contractor and is now pending approval by a manager
  """
  submitted
}

input TimeOffRequestsFilters {
  actionable: Boolean
  endDate: Date
  startDate: Date
  statuses: [TimeOffRequestStatuses!]
  team: Boolean
}

type TimelineEntry implements Node
  @talent(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Profile" }
    ]
  ) {
  """
  company associated to work entries
  """
  company: Company

  """
  dateEnd set to null means the entry is active
  """
  dateEnd: Date
  dateStart: Date
  description: String
  entryType: TimelineEntryTypeEnum

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!

  """
  university or college associated to education entries
  """
  institute: Institute
  place: String

  """
  internal DB ID of this record
  """
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")

  """
  these are the skills that are associated with this entry
  """
  skills: [Skill!]
  title: String
  user: User
}

input TimelineEntryAttributes {
  companyId: ID
  dateEnd: Date
  dateStart: Date
  description: String
  entryType: TimelineEntryTypeEnum
  instituteId: ID
  place: String
  placeId: ID
  relayId: ID
  skillsRawIds: [Int!]
  title: String
}

enum TimelineEntryTypeEnum {
  education
  work
}

"""
a work report with entries that add up to a number of hours and (potentially) a
total amount for the client to pay and the member to receive
"""
type Timesheet implements Node
  @hris(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Payroll" }
    ]
  ) {
  canExportCsv: Boolean
  clientRatingFeedbackContinue: String
  clientRatingFeedbackStart: String
  clientRatingFeedbackStop: String
  clientRatingScore: Int
  contract: Contract
  createdAt: DateTime
  currency: Currency
  editable: Boolean
  endDate: Date
  expenses: [Expense!]

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  invoice: Invoice
  payrollItem: PayrollItem
  projectCodes: [String!]

  """
  internal DB ID of this record
  """
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")
  startDate: Date
  timeInMinutes: Float
  timesheetEntries: [TimesheetEntry!]
  totalCapitalExpenditure: Money
  totalExpenses: Money
  totalHours: Int
  totalMinutes: Int
  totalOperatingExpenditure: Money
  totalToPayClient: Money
  totalToPayFreelancer: Money
  totalUnassignedExpenditure: Money
}

"""
The connection type for Timesheet.
"""
type TimesheetConnection {
  """
  A list of edges.
  """
  edges: [TimesheetEdge]

  """
  A list of nodes.
  """
  nodes: [Timesheet]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type TimesheetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Timesheet
}

"""
a single entry in a timesheet
"""
type TimesheetEntry implements Node
  @hris(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Payroll" }
    ]
  ) {
  currency: Currency
  description: String
  endTime: DateTime
  expenseType: ExpenseTypeEnum
  hourlyClientRate: Money
  hourlyFreelancerRate: Money

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  projectCode: String

  """
  internal DB ID of this record
  """
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")
  startTime: DateTime
  timeInMinutes: Float
  timesheet: Timesheet
  totalHours: Int
  totalMinutes: Int
  totalToPayClient: Money
  totalToPayFreelancer: Money
}

input TimesheetEntryAttributes {
  description: String
  endTime: DateTime
  expenseType: ExpenseTypeEnum
  projectCode: String
  startTime: DateTime
}

input TimesheetsFilters {
  actionable: Boolean
  approvalType: ApprovalTypeEnum
  clientId: ID
  clientRawId: Int @deprecated(reason: "used only by legacy frontend code")
  contractStatuses: [ContractStatus!]
  fromDate: Date
  invoiceNum: Int
  invoiceable: Boolean
  name: String
  notInvoiced: Boolean
  order: SortOrder
  pipelineStatus: PayrollItemPipelineStatus
  selectable: Boolean
  sortBy: String
  status: PayrollItemStatus
  tags: [TagFilter!]
  toDate: Date
}

input TimezoneFilter {
  timezone: Int
  timezoneRange: Int
}

"""
Autogenerated input type of ToggleBookmarkFreelancer
"""
input ToggleBookmarkFreelancerInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  jobApplicationId: ID
}

"""
Autogenerated return type of ToggleBookmarkFreelancer.
"""
type ToggleBookmarkFreelancerPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  jobApplication: JobApplication
}

"""
Autogenerated input type of TrackBlogPostView
"""
input TrackBlogPostViewInput {
  blogPostId: ID

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of TrackBlogPostView.
"""
type TrackBlogPostViewPayload {
  blogPost: BlogPost

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

"""
Autogenerated input type of TwitterAccessToken
"""
input TwitterAccessTokenInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  oauthVerifier: String
  requestToken: String
}

"""
Autogenerated return type of TwitterAccessToken.
"""
type TwitterAccessTokenPayload {
  accessToken: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

"""
Autogenerated input type of TwitterRequestToken
"""
input TwitterRequestTokenInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of TwitterRequestToken.
"""
type TwitterRequestTokenPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  requestToken: String
}

"""
Autogenerated input type of UnapprovePayrollItem
"""
input UnapprovePayrollItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  payrollItemId: ID!
}

"""
Autogenerated return type of UnapprovePayrollItem.
"""
type UnapprovePayrollItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  payrollItem: PayrollItem
}

"""
Autogenerated input type of UninstallSlackIntegration
"""
input UninstallSlackIntegrationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UninstallSlackIntegration.
"""
type UninstallSlackIntegrationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  user: User
}

"""
Autogenerated input type of Unmasq
"""
input UnmasqInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of Unmasq.
"""
type UnmasqPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  user: User
}

"""
Autogenerated input type of Unsubscribe
"""
input UnsubscribeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  emailSubscriptionId: ID

  """
  unsubscribe token to identify the subscription
  """
  token: String
}

"""
Autogenerated return type of Unsubscribe.
"""
type UnsubscribePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  emailSubscription: EmailSubscription
  errors: [Error!]
  unsubscribedFromAllEmails: Boolean
}

"""
Autogenerated input type of UpdateBlogPost
"""
input UpdateBlogPostInput {
  blogCategoryIds: [ID!]
  blogPostId: ID
  blogPostRawId: Int @deprecated(reason: "only used in legacy frontend code")
  blogSubcategoryIds: [ID!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  content: String
  excerpt: String
  published: Boolean
  title: String

  """
  use null to remove the video attached to the blog post
  """
  videoId: ID

  """
  use 0 to remove the video attached to the blog post
  """
  videoRawId: Int @deprecated(reason: "only used in legacy frontend code")
}

"""
Autogenerated return type of UpdateBlogPost.
"""
type UpdateBlogPostPayload {
  blogPost: BlogPost

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

"""
Autogenerated input type of UpdateBonus
"""
input UpdateBonusInput {
  autoApprove: Boolean
  bonusId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  description: String
  endDate: Date
  startDate: Date
  totalToPayClient: MoneyInput!
}

"""
Autogenerated return type of UpdateBonus.
"""
type UpdateBonusPayload {
  bonus: Bonus

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

"""
Autogenerated input type of UpdateChatMessage
"""
input UpdateChatMessageInput {
  chatMessageId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  message: String
}

"""
Autogenerated return type of UpdateChatMessage.
"""
type UpdateChatMessagePayload {
  chatMessage: ChatMessage

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

"""
Autogenerated input type of UpdateChatThread
"""
input UpdateChatThreadInput {
  avatarUrl: String
  chatThreadId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  enableMeetingRoom: Boolean
  title: String
  userIds: [ID!]
}

"""
Autogenerated return type of UpdateChatThread.
"""
type UpdateChatThreadPayload {
  chatThread: ChatThread

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
}

"""
Autogenerated input type of UpdateContract
"""
input UpdateContractInput {
  additionalRecipientsData: [InvitationRecipientAttributes!]
  allowExpensesAccess: Boolean
  allowHireInterviewsAccess: Boolean
  allowHireJobsAccess: Boolean
  allowHireOffersAccess: Boolean
  allowHireRatesAccess: Boolean
  allowHireRecruitmentAccess: Boolean
  allowManageBonusesAccess: Boolean
  allowManageExpensesAccess: Boolean
  allowManageInvitationsAccess: Boolean
  allowManageRatesAccess: Boolean
  allowManageTeamAccess: Boolean
  autoRequestBackgroundCheck: Boolean
  bonusClientRate: MoneyInput
  bonusPeriod: ContractBonusPeriod
  client: UserAttributes

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  clientRate: MoneyInput

  """
  if a client_rate is specified, this field sets the date on which it should
  take effect; otherwise the client_rate is applied immediately, pending signature
  """
  clientRateStartedAt: DateTime
  contractId: ID
  contractType: ContractTypeEnum
  costAnalyticsRate: MoneyInput
  costAnalyticsRateCurrency: String
  costAnalyticsRateMode: RateMode
  currency: String
  description: String
  editToken: String
  employmentCountry: String
  enableCostAnalytics: Boolean
  enableTimesheets: Boolean
  endDate: Date
  eorAnnualLeave: ContractEORAnnualLeaveEnum
  eorBonusAmount: Int
  eorBonusAmountMode: ContractEORBonusAmountEnum
  eorBonusDescription: String
  eorBonusEnabled: Boolean
  eorBonusFrequency: ContractEORBonusFrequencyEnum
  eorBonusProgram: String
  eorDirectSupervisorDepartment: String
  eorDirectSupervisorEmail: String
  eorDirectSupervisorName: String
  eorDirectSupervisorPhone: String
  eorDirectSupervisorTitle: String
  eorProbationPeriod: Int
  eorWorkHours: ContractEORWorkHoursEnum
  feeMode: FeeModeEnum
  freelancerData: InvitationRecipientData
  freelancerId: ID
  hidden: Boolean
  inheritorId: ID
  invoiceRecipientId: ID
  isCitizen: Boolean
  isFirmAdmin: Boolean
  jobApplicationId: ID
  jobId: ID
  jobTitle: String
  nationalId: String
  officeAddress: String
  officeAddressCity: String
  officeAddressPostalCode: String
  officeAddressRemote: Boolean
  officeAddressState: String
  officeCountry: String
  onlyWorksInSpecifiedCountry: Boolean
  paidDaysOffCount: Int
  paidTimeOffAllocated: Boolean
  paymentMode: PaymentModeEnum
  purchaseOrderNumber: String
  rateMode: RateMode
  requireApprovalForPayments: Boolean
  residentialAddress: String
  residentialAddressCity: String
  residentialAddressPostalCode: String
  signableDocumentTemplates: [ID!]
  startDate: Date
  status: ContractStatus
  tags: [String!]
  transferEntitlements: Boolean
  transferEntitlementsDetails: String
  visaNeeded: Boolean
  workerCountry: String
  workerId: String
  workerIsTransfer: Boolean
  workerLeaveDetails: String
  workerPhone: String
  workerStaysInCountry: Boolean
  workerTransferSourceEntity: String
}

"""
Autogenerated return type of UpdateContract.
"""
type UpdateContractPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contract: Contract
  errors: [Error!]
}

"""
Autogenerated input type of UpdateContracts
"""
input UpdateContractsInput {
  clientId: ID

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractIds: [ID!]
  endDate: Date
  status: ContractStatus
}

"""
Autogenerated return type of UpdateContracts.
"""
type UpdateContractsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contracts: [Contract!]
  errors: [Error!]
  totalCount: Int
}

"""
Autogenerated input type of UpdateEmailSubscription
"""
input UpdateEmailSubscriptionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
  token: String

  """
  true if the user wishes to enable this subscription
  """
  userEnabled: Boolean
}

"""
Autogenerated return type of UpdateEmailSubscription.
"""
type UpdateEmailSubscriptionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  emailSubscription: EmailSubscription
  errors: [Error!]
}

"""
Autogenerated input type of UpdateFirm
"""
input UpdateFirmInput {
  additionalInvoiceText: String
  allowInvoiceAutoCharge: Boolean
  backgroundTheme: BackgroundThemeEnum
  billingPlanId: ID
  billingPlanRawId: Int
    @deprecated(reason: "only used for legacy frontend code")

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currency: String
  dayforceEndpointUrl: String
  dayforceJobBoardId: String
  dayforcePassword: String
  dayforceUsername: String
  dayforceWorkspace: String
  defaultPaymentMethodId: ID
  description: String
  emailsForInvoices: [String!]

  """
  omit this to update the current user's firm
  """
  firmId: ID
  greenhouseApiKey: String
  invoiceSalariesInAdvance: Boolean
  invoiceSchedule: String
  logoUrl: String
  managerForNonPayrollFees: ID
  mergeAccountToken: String
  minSalaryDaysToInvoice: Int
  name: String
  nextAutoInvoiceDate: DateTime
  numConsensusAccept: Int
  numConsensusReject: Int
  purchaseOrderNumberForNonPayrollFees: String
  quorum: Int
  showTeamTimeOffRequests: Boolean
  timezoneName: String
  unifyInvoicesInPreferredCurrency: Boolean
  website: String
}

"""
Autogenerated return type of UpdateFirm.
"""
type UpdateFirmPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  firm: Firm
}

"""
Autogenerated input type of UpdateJobApplication
"""
input UpdateJobApplicationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  hidden: Boolean
  jobApplicationId: ID!
}

"""
Autogenerated return type of UpdateJobApplication.
"""
type UpdateJobApplicationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  jobApplication: JobApplication
}

"""
Autogenerated input type of UpdateJobAutomatedMessaging
"""
input UpdateJobAutomatedMessagingInput {
  automatedMessages: [AutomatedMessagingAttributes!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  enableAutomatedMessaging: Boolean
  hiringManagerId: ID
  jobId: ID!
  jobViewAutomatedMessage: String
  jobViewAutomatedMessageEnabled: Boolean
}

"""
Autogenerated return type of UpdateJobAutomatedMessaging.
"""
type UpdateJobAutomatedMessagingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  job: Job
}

"""
Autogenerated input type of UpdateJobDetails
"""
input UpdateJobDetailsInput {
  autoRenew: Boolean
  availabilityType: String
  city: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  clientRate: MoneyInput
  clientRateCents: Int

  """
  name of the country
  """
  country: String
  currency: String
  defaultDistance: Float
  description: String
  descriptionExperience: String
  descriptionResponsibilities: String
  freelancerSubtypes: [FreelancerSubtypeAttributes!]
  freelancerTypeId: ID
  fullAddress: String
  hiringManagerId: ID
  incognito: Boolean

  """
  ISO 3166-1 alpha-2 codes, uppercase
  """
  jobCountries: [String!]
  jobId: ID
  jobSkills: [JobSkillAttributes!]
  level: JobLevelEnum
  locationLatitude: Float
  locationLongitude: Float
  locationType: JobLocationTypeEnum
  minClientRate: MoneyInput
  minClientRateCents: Int
  officePolicy: OfficePolicyEnum
  positionTypes: [Position!]
  projectLengthInMonths: Int
  rateMode: RateMode
  referralBounty: MoneyInput
  referralBountyCents: Int
  region: String
  requiredExperienceYears: Int
  status: JobStatus
  timezoneIdentifier: String
  timezoneRange: Int
  title: String
  userId: ID
  users: [UserAttributes!]
}

"""
Autogenerated return type of UpdateJobDetails.
"""
type UpdateJobDetailsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  job: Job
}

"""
Autogenerated input type of UpdateJobScreening
"""
input UpdateJobScreeningInput {
  aiProfileEvaluationGuidelines: String
  allowTextualAnswers: Boolean
  autoSendTakeHomeTest: Boolean

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  enableAiRecruiter: Boolean
  jobId: ID!
  project: ProjectAttributes
  questions: [QuestionAttributes!]
  requestVideoIntroduction: Boolean
  screeningMode: ScreeningModeEnum
  screeningRequestMessageTemplate: String
}

"""
Autogenerated return type of UpdateJobScreening.
"""
type UpdateJobScreeningPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  job: Job
}

"""
Autogenerated input type of UpdateJobSourcing
"""
input UpdateJobSourcingInput {
  activeJobIntegrationsNames: [String!]
  automaticallyNotifyCandidates: Boolean
  candidatesToNotify: [CandidateToNotifyAttributes!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  hiringManagerId: Int
  jobId: ID!
  jobSocialIntegrations: [String!]
  linkedinCompanyId: String
  referralBounty: MoneyInput
  userId: Int
}

"""
Autogenerated return type of UpdateJobSourcing.
"""
type UpdateJobSourcingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  job: Job
}

"""
Autogenerated input type of UpdatePaymentMethod
"""
input UpdatePaymentMethodInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  expMonth: Int
  expYear: Int
  paymentMethodId: ID!
}

"""
Autogenerated return type of UpdatePaymentMethod.
"""
type UpdatePaymentMethodPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  paymentMethod: PaymentMethod
}

"""
Autogenerated input type of UpdatePayoutMethod
"""
input UpdatePayoutMethodInput {
  accountId: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  nickname: String
  payoutMethodId: ID!
}

"""
Autogenerated return type of UpdatePayoutMethod.
"""
type UpdatePayoutMethodPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  payoutMethod: PayoutMethod
}

"""
Autogenerated input type of UpdateProjectSubmission
"""
input UpdateProjectSubmissionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  description: String
  projectSubmissionId: ID
  projectSubmissionRawId: Int
    @deprecated(reason: "only used to support some legacy frontend code")
  screenshotUrl: String
  status: ProjectSubmissionStatusEnum
  url: String
}

"""
Autogenerated return type of UpdateProjectSubmission.
"""
type UpdateProjectSubmissionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  projectSubmission: ProjectSubmission
}

"""
Autogenerated input type of UpdateQuestion
"""
input UpdateQuestionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The expectation for the question, meaning what would the ideal applicant say
  in their answer. Only editable for questions created by your company
  """
  expectation: String
  firmId: ID!

  """
  The specializations for the question. Only editable for questions created by your company
  """
  freelancerSubtypeIds: [ID!]

  """
  The industries for the question. Only editable for questions created by your company
  """
  freelancerTypeIds: [ID!]

  """
  The level of the question. Only editable for questions created by your company
  """
  level: QuestionLevelEnum
  questionId: ID!

  """
  The skills for the question. Only editable for questions created by your company
  """
  skillIds: [ID!]

  """
  Custom tags for the question. Any custom tag not in the given list will be removed
  """
  tagNames: [String!]

  """
  The title of the question. Only editable for questions created by your company
  """
  title: String
}

"""
Autogenerated return type of UpdateQuestion.
"""
type UpdateQuestionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  question: Question
}

"""
Autogenerated input type of UpdateSalary
"""
input UpdateSalaryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  customAmount: Boolean
  daysOff: [Date!]
  editDescription: String
  salaryId: ID!
  totalToPayClient: MoneyInput
}

"""
Autogenerated return type of UpdateSalary.
"""
type UpdateSalaryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  salary: Salary
}

"""
Autogenerated input type of UpdateTag
"""
input UpdateTagInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The new name for the tag
  """
  name: String!
  tagId: ID!
}

"""
Autogenerated return type of UpdateTag.
"""
type UpdateTagPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  tag: Tag
}

"""
Autogenerated input type of UpdateTimeOffRequest
"""
input UpdateTimeOffRequestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contractId: ID!
  description: String
  endDate: DateTime
  startDate: DateTime!
  submit: Boolean
  timeOffRequestId: ID!
  title: String!
}

"""
Autogenerated return type of UpdateTimeOffRequest.
"""
type UpdateTimeOffRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  timeOffRequests: [TimeOffRequest!]!
}

"""
Autogenerated input type of UpdateTimesheetEntry
"""
input UpdateTimesheetEntryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  timesheetEntryId: ID
  timesheetUpdatedEntry: TimesheetEntryAttributes
}

"""
Autogenerated return type of UpdateTimesheetEntry.
"""
type UpdateTimesheetEntryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  timesheetEntry: TimesheetEntry
}

"""
Autogenerated input type of UpdateTimesheet
"""
input UpdateTimesheetInput {
  clientId: ID

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  endDate: Date
  projectCodes: [String!]
  startDate: Date
  submit: Boolean
  timesheetId: ID
}

"""
Autogenerated return type of UpdateTimesheet.
"""
type UpdateTimesheetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  timesheet: Timesheet
}

"""
Autogenerated input type of UpdateUnsubscribedFromAllEmails
"""
input UpdateUnsubscribedFromAllEmailsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  if the user is logged out, the mutation can be performed using an unsubscribe token
  """
  token: String
  unsubscribeFromAllEmails: Boolean!
}

"""
Autogenerated return type of UpdateUnsubscribedFromAllEmails.
"""
type UpdateUnsubscribedFromAllEmailsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  unsubscribedFromAllEmails: Boolean
}

"""
Autogenerated input type of UpdateUser
"""
input UpdateUserInput {
  accept: Boolean
  additionalInvoiceText: String

  """
  used only for the frontend to autosave profile changes
  """
  autosave: Boolean
  avatarUrl: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentPassword: String
  defaultPayoutMethodId: ID
  displayDialogAfterSavingDraftTimesheet: Boolean
  email: String
  firstName: String
  freelancerSubtypeRawIds: [Int!]
  hidden: Boolean
  lastName: String
  password: String
  passwordConfirmation: String
  payrollItemRejectionMessageDismissed: Boolean
  phone: String
  profile: ProfileAttributes
  purchaseOrderNumber: String
  reject: Boolean
  sendTimesheetReminders: Boolean
  skills: [UserSkillAttributes!]
  status: String

  """
  True if hire pipeline emails should be grouped where applicable
  """
  summaryEmailsEnabled: Boolean
  teamInvitationMessage: String
  timelineEntries: [TimelineEntryAttributes!]
  timezoneName: String
  timezoneOffset: Float
  unsubscribedFromAllEmails: Boolean

  """
  omit this to update the current user
  """
  userId: ID
}

"""
Autogenerated return type of UpdateUser.
"""
type UpdateUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  user: User
}

"""
Autogenerated input type of UpdateVideo
"""
input UpdateVideoInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  if false, the video will not be displayed on the public profile
  """
  public: Boolean
  videoId: ID
  videoRawId: Int @deprecated(reason: "only used in legacy frontend code")
}

"""
Autogenerated return type of UpdateVideo.
"""
type UpdateVideoPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  video: Video
}

"""
Autogenerated input type of UpdateWebhook
"""
input UpdateWebhookInput {
  """
  if both this and authenticationHeaderValue are present, the header will be sent for all webhooks
  """
  authenticationHeaderName: String

  """
  this value is write-only. It can only be read in this mutation's result, if the mutation is changing it
  """
  authenticationHeaderValue: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  if false, events will not be sent to this Webhook
  """
  enabled: Boolean
  id: ID!

  """
  HTTP POST requests with JSON bodies will be sent to this URL. The fields on
  the body are 'event_name', 'timestamp' (unix integer format) and 'records'
  (array of string IDs of related records)
  """
  url: String
}

"""
Autogenerated return type of UpdateWebhook.
"""
type UpdateWebhookPayload {
  """
  use this field if you need to validate that the authentication header value was set correctly
  """
  authenticationHeaderValue: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]

  """
  the webhook just edited
  """
  webhook: Webhook
}

"""
Autogenerated input type of UploadCandidateResume
"""
input UploadCandidateResumeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  firstName: String!
  lastName: String!
  resumeUrl: String!
}

"""
Autogenerated return type of UploadCandidateResume.
"""
type UploadCandidateResumePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  user: User
}

"""
Autogenerated input type of UploadLinkedinProfile
"""
input UploadLinkedinProfileInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Profile cookies string
  """
  cookies: String!

  """
  E-mail address associated with the profile that can be manually associated with the grabbed profile
  """
  emailProvided: String

  """
  When set to true, the user authorizes email search from external providers
  """
  enableEmailSearch: Boolean!

  """
  Profile HTML encoded with GZIP, converted to Base64
  """
  html: String!

  """
  Linkedin profile URL
  """
  url: String!
}

"""
Autogenerated return type of UploadLinkedinProfile.
"""
type UploadLinkedinProfilePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  existingUser: Boolean
  user: User
}

"""
a person on Flexhire. Can be signed up to Flexhire or used to hold information
about a person who is not signed up to Flexhire, in which case the user is a 'guest'
"""
type User implements Node
  @talent(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Auth" }
    ]
  ) {
  """
  extra text that will be added on invoices to this user
  """
  additionalInvoiceText: String
  allApplications(filters: JobApplicationsFilters): ApplicationsResults
  allBonuses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: BonusesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BonusConnection
  allCandidates(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: JobApplicationsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): JobApplicationConnection

  """
  all chat messages from all threads that the user is in
  """
  allChatMessages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: ChatMessageFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ChatMessageConnection
  allContractStats(filters: ContractsFilters): ContractStats

  """
  will behave like firm.contracts for client accounts, and behave like the normal contracts field otherwise
  """
  allContracts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: ContractsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ContractConnection @deprecated(reason: "only used in legacy frontend code")
  allExpenses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: ExpensesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ExpenseConnection
  allInvoices(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: InvoicesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): InvoiceConnection
  allInvoicesSummary(filters: InvoicesFilters): InvoicesSummary

  """
  will behave like firm.job_applications for client accounts, and behave like the normal job applications field otherwise
  """
  allJobApplications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: JobApplicationsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): JobApplicationConnection
  allJobs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: JobsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): JobConnection
  allPaymentMethods(cardsOnly: Boolean, exceptCards: Boolean): [PaymentMethod!]
  allPayrollItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: PayrollItemsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PayrollItemConnection
  allSalaries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: SalariesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SalaryConnection
  allScreening(filters: JobApplicationsFilters): ApplicationsResults
  allSourcingCandidates(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    prompt: String!
  ): UserConnection

  """
  all the time off requests made by users in the same firm
  """
  allTimeOffRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: TimeOffRequestsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimeOffRequestConnection
  allTimesheets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: TimesheetsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimesheetConnection

  """
  answer evaluations authored by this user
  """
  answerEvaluations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AnswerEvaluationConnection

  """
  answer evaluations for this applicant's answers
  """
  answerEvaluationsOnOwnAnswers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AnswerEvaluationConnection

  """
  colleagues who have evaluated this applicant's answers or videos
  """
  answerEvaluators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection

  """
  video answers submitted by this user
  """
  answers(
    """
    filter by job raw id
    """
    jobId: Int
  ): [Video!]

  """
  will be true if this user can manage and use API keys
  """
  apiAccess: Boolean
  apiKeys: [ApiKey!]
  applications(filters: JobApplicationsFilters): ApplicationsResults
  appliedAt: DateTime

  """
  URL to the user's avatar, which acts as their profile picture and icon throughout Flexhire
  """
  avatarUrl: String

  """
  average rating of this user's answers by the current user's colleagues or AI. The value is between 0 and 1.
  """
  averageRating: Float
  backgroundCheck: BackgroundCheck
  backgroundCheckCompleted: Boolean
    @deprecated(reason: "read the backgroundCheck field instead")
  blockPlatformAccessDueToUnpaidInvoices: Boolean
  blockPlatformAccessDueToUnpaidInvoicesDate: Date
  blogPosts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BlogPostConnection
  blogStats: BlogStats
  bonusesStats(filters: BonusesFilters): PayrollStats
  calendlyUrl: String
  canMakeOffer: Boolean
  canNotify: Boolean
  canRequestInterview: Boolean
  canSetupPayoutMethod: Boolean
  canViewTaxes: Boolean

  """
  contains uploader firm data if user/candidate was created from resume upload
  """
  candidateUpload: CandidateUpload
  candidates(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: JobApplicationsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): JobApplicationConnection

  """
  get the ChatContact record between the current user and this user
  """
  chatContact: ChatContact

  """
  all chat messages written by this user
  """
  chatMessages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: ChatMessageFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ChatMessageConnection
  chatThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: ChatThreadsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ChatThreadConnection
  clientBonuses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: BonusesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BonusConnection

  """
  all the contracts in which this user is involved as client
  """
  clientContracts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: ContractsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ContractConnection
  clientExpenses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: ExpensesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ExpenseConnection

  """
  all the job applications in which this user is involved as client
  """
  clientJobApplications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: JobApplicationsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): JobApplicationConnection
  clientPayrollItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: PayrollItemsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PayrollItemConnection
  clientSalaries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: SalariesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SalaryConnection

  """
  all the time off requests made by this user's team
  """
  clientTimeOffRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: TimeOffRequestsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimeOffRequestConnection
  clientTimesheets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: TimesheetsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimesheetConnection

  """
  frontend configuration values for this user
  """
  configuration: Configuration
  confirmedAt: DateTime
  confirmedEmail: Boolean
  contacts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: UsersFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    set to true to refresh contacts. Recommended to first fetch with this
    parameter set to false (much faster), then fetch with this set to true
    (slower but might return new contacts)
    """
    refresh: Boolean
  ): UserConnection

  """
  load the contract for the given job and this user
  """
  contract(jobId: ID!): Contract
  contractSigned: Boolean
  contractStats: ContractStats
  contractorAgreementTemplateUrl: String
  contractorStatementOfWorkTemplateUrl: String

  """
  all the contracts in which this user is involved as client/manager or individual
  """
  contracts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: ContractsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ContractConnection
  costBreakdown(
    """
    filter by employee or contractor
    """
    freelancerId: ID
    groupBy: PayrollBreakdownGroupByEnum!
  ): PayrollBreakdown
  createdAt: DateTime
  directChatThread: ChatThread
  displayDialogAfterSavingDraftTimesheet: Boolean
  email: String
  emailSubscriptions: [EmailSubscription!]

  """
  saved message to send when inviting members as employees
  """
  eorInvitationMessage: String

  """
  true if AI has evaluated this user as an applicant for the current user's firm
  """
  evaluatedByAi: Boolean
  expenses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: ExpensesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ExpenseConnection
  expensesStats(filters: ExpensesFilters): PayrollStats

  """
  true if this member has completed the feature step on their profile
  """
  featureStepCompleted: Boolean!
    @deprecated(reason: "use the backgroundCheck field instead")

  """
  true if this member is featured on the Flexhire homepage
  """
  featured: Boolean

  """
  for clients only. Associated companies this user has some level of manage access in
  """
  firms: [Firm!]
  firstName: String
  freelancerBonuses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: BonusesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BonusConnection

  """
  all the contracts in which this user is involved as invidivual
  """
  freelancerContracts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: ContractsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ContractConnection
  freelancerInterviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): InterviewConnection

  """
  all the job applications in which this user is involved as invidivual
  """
  freelancerJobApplications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: JobApplicationsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): JobApplicationConnection
  freelancerPayrollItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: PayrollItemsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PayrollItemConnection
  freelancerSalaries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: SalariesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SalaryConnection

  """
  all the time off requests made by this user
  """
  freelancerTimeOffRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: TimeOffRequestsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimeOffRequestConnection
  freelancerTimesheets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: TimesheetsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimesheetConnection
  groupedPayouts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: PayoutsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PayoutConnection

  """
  if true, hasn't signed up (or hasn't completed the sign up process)
  """
  guest: Boolean!
  hasActivePayoutMethod: Boolean
  hasIndividualWorkspace: Boolean

  """
  true if this user has been invited to the platform with an offer
  """
  hasInvitationContracts: Boolean

  """
  true if this user can access invoices on at least one firm
  """
  hasInvoiceAccess: Boolean

  """
  true if this client has any hired or invited members
  """
  hasTeam: Boolean
  hidden: Boolean
  hireSourcedByClientMargin: Float
    @deprecated(reason: "use firm.billingPlan values")
  hireSourcedByFlexhireMargin: Float
    @deprecated(reason: "use firm.billingPlan values")

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  incomeBreakdown(groupBy: PayrollBreakdownGroupByEnum!): PayrollBreakdown

  """
  name of the integration this user has been imported from, if any
  """
  integrationName: String
  interviews(filters: JobApplicationsFilters): ApplicationsResults
  inviteMargin: Float @deprecated(reason: "use firm.billingPlan values")
  invoices(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: InvoicesFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): InvoiceConnection

  """
  if true, the current user isn't really signed in but is acting as this user
  """
  isActingUser: Boolean!

  """
  true if this user is in the chat contacts of the current user
  """
  isChatContact: Boolean

  """
  if true, the user is a client on the platform, which means they are part of at
  least one firm with some level of management permissions
  """
  isClient: Boolean!

  """
  true if this user is a customer success rep for the current user's firm
  """
  isCustomerSuccessRep: Boolean
  isFlexhireTeam: Boolean

  """
  if true, the user is a member/individual on the platform and has a profile
  """
  isMember: Boolean!
  isProfileFeedback: Boolean

  """
  true if this user is a recruiter for the current user's firm
  """
  isRecruiter: Boolean

  """
  load the job application for the given job and this user
  """
  jobApplication(jobId: ID!): JobApplication

  """
  all the job applications in which this user is involved as client/manager or individual
  """
  jobApplications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: JobApplicationsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): JobApplicationConnection

  """
  used in hire pipeline for candidates and potential applicants: contains any reasons for blocking application to job
  """
  jobIncompatibilityReasons(jobId: Int, jobSlug: String): [String!]

  """
  jobs that might be a fit for the current user to apply to
  """
  jobOpportunities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: JobsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): JobConnection
  jobs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: JobsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): JobConnection
  lastName: String

  """
  timestamp of when the user has last used Flexhire
  """
  lastSeenAt: DateTime
  location: String
    @deprecated(reason: "use country, fullAddress, city, region instead")

  """
  contract with this user's superior in the company. Only for clients
  """
  managerContract: Contract
    @deprecated(reason: "search contracts with firm filter instead")

  """
  saved message to send when inviting managers
  """
  managerInvitationMessage: String

  """
  maximum number of job candidates this user can see
  """
  maxCandidates: Int
  missingPayoutMethod: Boolean

  """
  combination of firstName and lastName
  """
  name: String

  """
  if true, this user is required to set a password before using the account
  """
  passwordSetupRequired: Boolean
  paychecks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: PaychecksFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PaycheckConnection
  paymentMethods(cardsOnly: Boolean, exceptCards: Boolean): [PaymentMethod!]

  """
  default payout method
  """
  payoutMethod: PayoutMethod
  payoutMethods: [PayoutMethod!]
  payouts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: PayoutsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PayoutConnection
  payoutsStats(filters: PayoutsFilters): PayoutsStats

  """
  true if this user has dismissed the payroll item rejection message
  """
  payrollItemRejectionMessageDismissed: Boolean
  phone: String

  """
  for members only. Associated profile data
  """
  profile: Profile
  projectSubmissions: [ProjectSubmission!]

  """
  All holidays for the country that the user is located
  """
  publicHolidays(filters: TimeOffRequestsFilters): [Holiday!]!

  """
  will be added to all invoices to this user
  """
  purchaseOrderNumber: String
  ratingCountHigh: Int
  ratingCountLow: Int
  ratingCountMedium: Int

  """
  internal DB ID of this record
  """
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")

  """
  will reference the 'real user' when using the masking feature to mask into this User
  """
  realUser: User

  """
  raw IDs of users whose invoices are being managed by this user
  """
  receivesInvoicesFor: [Int!]
  recipientForHiringEmails: Boolean
  references(
    """
    filter by status
    """
    status: ReferenceStatusEnum
  ): [Reference!]

  """
  the contract between your company and this user. Only for clients
  """
  relatedContract: Contract
    @deprecated(reason: "search contracts with firm filter instead")
  remoteDebugCode: String
  requestedBackgroundChecks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BackgroundCheckConnection
  resume: Resume

  """
  list of roles the user has. These will affect API permissions and visibility and the frontend UI
  """
  roles: [UserRoleEnum!]
  salariesStats(filters: SalariesFilters): PayrollStats
  screening(filters: JobApplicationsFilters): ApplicationsResults

  """
  will be true if this is the same user that is querying the API
  """
  self: Boolean

  """
  true if this user has enabled sending timesheet reminders to their directly managed team members
  """
  sendTimesheetReminders: Boolean
  signupRedirectUrl: String

  """
  true if it's a skipped candidate
  """
  skipped: Boolean

  """
  true if this user has added the Slack integration
  """
  slackIntegrationAdded: Boolean

  """
  saved message to send when inviting members as standard team members
  """
  standardTeamInvitationMessage: String

  """
  only relevant for members
  """
  status: UserStatus

  """
  recommended questions to answer to boost candidate score for a member
  """
  suggestedQuestions: [Question!]

  """
  true if this user wants to receive summary emails on hire pipeline
  """
  summaryEmailsEnabled: Boolean
  tasks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: TasksFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TaskConnection

  """
  saved message to send when inviting members as contractors
  """
  teamInvitationMessage: String

  """
  all the time off requests made by this user and their team
  """
  teamTimeOffRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: TimeOffRequestsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimeOffRequestConnection
  termsOfServiceApproved: Boolean
  timelineEntries: [TimelineEntry!]
  timesheets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: TimesheetsFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimesheetConnection @deprecated(reason: "use freelancerTimesheets instead")
  timesheetsStats(filters: TimesheetsFilters): PayrollStats
  timezone: String
  timezoneName: String
  timezoneOffset: Int

  """
  contains the new email address when changing address and not having the new one confirmed yet
  """
  unconfirmedEmail: String
  unsubscribedFromAllEmails: Boolean
  updatedAt: DateTime

  """
  skills that this user has on their profile
  """
  userSkills: [UserSkill!]

  """
  true if this member is pre-screened
  """
  verified: Boolean

  """
  video introduction
  """
  video: Video

  """
  video evaluations for this applicant's videos
  """
  videoEvaluationsOnOwnVideos(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AnswerEvaluationConnection
  webhooks: [Webhook!]
  workingOrOfferedJob: Boolean
}

input UserAttributes {
  """
  associate a user by email, sending an invite
  """
  email: String

  """
  associate an existing user by ID
  """
  id: ID
}

"""
The connection type for User.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User
}

enum UserRoleEnum {
  """
  Flexhire admin, has the highest level of permissions possible
  """
  admin

  """
  Not in use at the moment
  """
  customer_success_rep

  """
  Can be assigned to customers and manage their hiring pipeline
  """
  recruiter

  """
  Flexhire sales account. Can manage firms
  """
  sales

  """
  Flexhire screening account. Can review member applications for pre-screening
  """
  screening
}

type UserSkill implements Node
  @talent(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Profile" }
    ]
  ) {
  experience: Int

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  skill: Skill
}

input UserSkillAttributes {
  experience: Int
  rawSkillId: Int!
}

enum UserStatus {
  accepted
  applied
  deleted
  pending
  rejected
  unverified
}

"""
Autogenerated return type of UserUpdated.
"""
type UserUpdatedPayload {
  user: User
}

input UsersFilters {
  search: String
}

type ValidationResult {
  error: String
  valid: Boolean!
}

"""
a video recorded or uploaded for various purposes, mainly for answering structured interview questions or as a profile video
"""
type Video implements Node
  @ats(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Screening" }
    ]
  ) {
  """
  evaluation of this video by AI
  """
  aiAnswerEvaluation: AnswerEvaluation

  """
  for video answers
  """
  answer: Answer

  """
  evaluations of this video by colleagues or AI
  """
  answerEvaluations: [AnswerEvaluation!]
  available: Boolean!

  """
  average rating of videos like this one by colleagues or AI. The value is
  between 0 and 1. For example, if this video answers a question, this will
  return the average rating of all answers to that question.
  """
  averageAnswerRating: Float

  """
  average rating of this video by colleagues or AI. The value is between 0 and 1.
  """
  averageRating: Float

  """
  requests that this video is an answer to
  """
  contractRequests: [ContractRequest!]
  createdAt: DateTime!

  """
  whether the video has subtitles enabled
  """
  enableSubtitles: Boolean!

  """
  for company videos
  """
  firm: Firm

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!

  """
  video url served by CDN
  """
  optimizedUrl: String!

  """
  preview image for the video
  """
  posterUrl: String
  public: Boolean!

  """
  for video answers
  """
  question: Question

  """
  internal DB ID of this record
  """
  rawId: Int @deprecated(reason: "used only by some legacy frontend code")
  rejectReason: String
  status: VideoStatusEnum!

  """
  transcription of the video
  """
  transcript: String

  """
  the raw file url of the video file
  """
  url: String!

  """
  video creator
  """
  user: User
  videoType: VideoTypeEnum!
}

enum VideoStatusEnum {
  """
  video is incomplete and is waiting upload by remote client
  """
  pending

  """
  video has been processed successfully and is ready
  """
  processed

  """
  video is currently being processed
  """
  processing

  """
  video processing failed due to an unknown error; processing will be retried
  """
  processing_failed

  """
  video is queued for processing
  """
  processing_queued

  """
  video processing failed due to an invalid video file; processing will not be retried
  """
  processing_rejected

  """
  video is unprocessed and waiting to be processed
  """
  unprocessed
}

enum VideoTypeEnum {
  answer
  blog_post
  company
  profile
}

"""
Autogenerated return type of VideoUpdated.
"""
type VideoUpdatedPayload {
  video: Video
}

"""
webhooks used by Flexhire to send events to external services
"""
type Webhook implements Node
  @api(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Integration" }
    ]
  ) {
  """
  if both this and authenticationHeaderValue are present, the header will be
  sent for all webhooks. The value is not write-only for security reasons.
  """
  authenticationHeaderName: String

  """
  this field will always return null for security reasons
  """
  authenticationHeaderValue: String

  """
  if false, events won't be sent
  """
  enabled: Boolean!

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  url: String!
  webhookDeliveries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): WebhookDeliveryConnection
}

type WebhookDelivery implements Node
  @api(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Integration" }
    ]
  ) {
  createdAt: DateTime!
  eventName: EventTypeEnum!

  """
  globally unique, opaque ID for this Node. This ID is fully compatible with
  Relay can be used to reference this object globally and load it via node() and
  related root fields.
  """
  id: ID!
  status: WebhookDeliveryStatusEnum!
  webhook: Webhook
}

"""
The connection type for WebhookDelivery.
"""
type WebhookDeliveryConnection {
  """
  A list of edges.
  """
  edges: [WebhookDeliveryEdge]

  """
  A list of nodes.
  """
  nodes: [WebhookDelivery]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An edge in a connection.
"""
type WebhookDeliveryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: WebhookDelivery
}

enum WebhookDeliveryStatusEnum
  @api(
    options: [
      { key: "documented", value: "true" }
      { key: "subdomain", value: "Integration" }
    ]
  ) {
  delivered
  delivering
  delivery_failed
  pending
  scheduled
}
